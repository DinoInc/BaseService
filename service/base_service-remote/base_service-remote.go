// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"BaseService"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  ReturnType AddPatient( identifier,  name,  contact, AdministrativeGender gender, i32 birthDate,  address, bool issueMR)")
	fmt.Fprintln(os.Stderr, "   FindPatientByIdentifier(Identifier identifier)")
	fmt.Fprintln(os.Stderr, "  Patient FindPatientById(string id)")
	fmt.Fprintln(os.Stderr, "  Patient FindPatientByName(string name)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = math.MinInt32 // will become unneeded eventually
	_ = strconv.Atoi
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := BaseService.NewBaseServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "AddPatient":
		if flag.NArg()-1 != 7 {
			fmt.Fprintln(os.Stderr, "AddPatient requires 7 args")
			flag.Usage()
		}
		arg23 := flag.Arg(1)
		mbTrans24 := thrift.NewTMemoryBufferLen(len(arg23))
		defer mbTrans24.Close()
		_, err25 := mbTrans24.WriteString(arg23)
		if err25 != nil {
			Usage()
			return
		}
		factory26 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt27 := factory26.GetProtocol(mbTrans24)
		containerStruct0 := BaseService.NewAddPatientArgs()
		err28 := containerStruct0.ReadField1(jsProt27)
		if err28 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Identifier
		value0 := argvalue0
		arg29 := flag.Arg(2)
		mbTrans30 := thrift.NewTMemoryBufferLen(len(arg29))
		defer mbTrans30.Close()
		_, err31 := mbTrans30.WriteString(arg29)
		if err31 != nil {
			Usage()
			return
		}
		factory32 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt33 := factory32.GetProtocol(mbTrans30)
		containerStruct1 := BaseService.NewAddPatientArgs()
		err34 := containerStruct1.ReadField2(jsProt33)
		if err34 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Name
		value1 := argvalue1
		arg35 := flag.Arg(3)
		mbTrans36 := thrift.NewTMemoryBufferLen(len(arg35))
		defer mbTrans36.Close()
		_, err37 := mbTrans36.WriteString(arg35)
		if err37 != nil {
			Usage()
			return
		}
		factory38 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt39 := factory38.GetProtocol(mbTrans36)
		containerStruct2 := BaseService.NewAddPatientArgs()
		err40 := containerStruct2.ReadField3(jsProt39)
		if err40 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Contact
		value2 := argvalue2
		arg41 := flag.Arg(4)
		mbTrans42 := thrift.NewTMemoryBufferLen(len(arg41))
		defer mbTrans42.Close()
		_, err43 := mbTrans42.WriteString(arg41)
		if err43 != nil {
			Usage()
			return
		}
		factory44 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt45 := factory44.GetProtocol(mbTrans42)
		argvalue3 := BaseService.NewAdministrativeGender()
		err46 := argvalue3.Read(jsProt45)
		if err46 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		tmp4, err47 := (strconv.Atoi(flag.Arg(5)))
		if err47 != nil {
			Usage()
			return
		}
		argvalue4 := int32(tmp4)
		value4 := argvalue4
		arg48 := flag.Arg(6)
		mbTrans49 := thrift.NewTMemoryBufferLen(len(arg48))
		defer mbTrans49.Close()
		_, err50 := mbTrans49.WriteString(arg48)
		if err50 != nil {
			Usage()
			return
		}
		factory51 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt52 := factory51.GetProtocol(mbTrans49)
		containerStruct5 := BaseService.NewAddPatientArgs()
		err53 := containerStruct5.ReadField6(jsProt52)
		if err53 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.Address
		value5 := argvalue5
		argvalue6 := flag.Arg(7) == "true"
		value6 := argvalue6
		fmt.Print(client.AddPatient(value0, value1, value2, value3, value4, value5, value6))
		fmt.Print("\n")
		break
	case "FindPatientByIdentifier":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindPatientByIdentifier requires 1 args")
			flag.Usage()
		}
		arg55 := flag.Arg(1)
		mbTrans56 := thrift.NewTMemoryBufferLen(len(arg55))
		defer mbTrans56.Close()
		_, err57 := mbTrans56.WriteString(arg55)
		if err57 != nil {
			Usage()
			return
		}
		factory58 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt59 := factory58.GetProtocol(mbTrans56)
		argvalue0 := BaseService.NewIdentifier()
		err60 := argvalue0.Read(jsProt59)
		if err60 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.FindPatientByIdentifier(value0))
		fmt.Print("\n")
		break
	case "FindPatientById":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindPatientById requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.FindPatientById(value0))
		fmt.Print("\n")
		break
	case "FindPatientByName":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "FindPatientByName requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.FindPatientByName(value0))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
