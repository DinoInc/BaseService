// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package service

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/DinoInc/BaseService/domain"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var _ = domain.GoUnusedProtection__

type BaseService interface {
	//
	// This function is used, for example in "Front Office" want to register a new patient.
	// The new patient will get a new Medical Record (MR) identifier linked to his/her Person
	// object that also linked to his/her Patient object.
	//
	// issue MR: by default is [TRUE]
	// [FALSE IF] when in emergency situation such as "IGD".The person will not get a new
	// Medical Record number because of lack of patient data and could not confirm whether
	// the patient has been registered on hospital or not. New Patient object will be created
	// without any Person object linked.
	//
	//
	// Parameters:
	//  - Identifier
	//  - Name
	//  - Contact
	//  - Gender
	//  - BirthDate
	//  - Address
	//  - IssueMR
	AddPatient(identifier []*domain.Identifier, name []*domain.HumanName, contact []*domain.ContactPoint, gender *domain.AdministrativeGender, birthDate int32, address []*domain.Address, issueMR bool) (r *ReturnType, err error)
	// Function to find Patient using identifier on his/her linked Person object
	//
	// Parameters:
	//  - Identifier
	FindPatientByIdentifier(identifier *domain.Identifier) (r []*domain.Patient, err error)
	// Function to find Patient using id on his/her Patient object
	//
	// Parameters:
	//  - Id
	FindPatientById(id string) (r *domain.Patient, err error)
	// Function to find Patient using HumanName on his/her Patient object
	//
	// Parameters:
	//  - Name
	FindPatientByName(name string) (r *domain.Patient, err error)
}

type BaseServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewBaseServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BaseServiceClient {
	return &BaseServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewBaseServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BaseServiceClient {
	return &BaseServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

//
// This function is used, for example in "Front Office" want to register a new patient.
// The new patient will get a new Medical Record (MR) identifier linked to his/her Person
// object that also linked to his/her Patient object.
//
// issue MR: by default is [TRUE]
// [FALSE IF] when in emergency situation such as "IGD".The person will not get a new
// Medical Record number because of lack of patient data and could not confirm whether
// the patient has been registered on hospital or not. New Patient object will be created
// without any Person object linked.
//
//
// Parameters:
//  - Identifier
//  - Name
//  - Contact
//  - Gender
//  - BirthDate
//  - Address
//  - IssueMR
func (p *BaseServiceClient) AddPatient(identifier []*domain.Identifier, name []*domain.HumanName, contact []*domain.ContactPoint, gender *domain.AdministrativeGender, birthDate int32, address []*domain.Address, issueMR bool) (r *ReturnType, err error) {
	if err = p.sendAddPatient(identifier, name, contact, gender, birthDate, address, issueMR); err != nil {
		return
	}
	return p.recvAddPatient()
}

func (p *BaseServiceClient) sendAddPatient(identifier []*domain.Identifier, name []*domain.HumanName, contact []*domain.ContactPoint, gender *domain.AdministrativeGender, birthDate int32, address []*domain.Address, issueMR bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("AddPatient", thrift.CALL, p.SeqId)
	args0 := NewAddPatientArgs()
	args0.Identifier = identifier
	args0.Name = name
	args0.Contact = contact
	args0.Gender = gender
	args0.BirthDate = birthDate
	args0.Address = address
	args0.IssueMR = issueMR
	err = args0.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *BaseServiceClient) recvAddPatient() (value *ReturnType, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result1 := NewAddPatientResult()
	err = result1.Read(iprot)
	iprot.ReadMessageEnd()
	value = result1.Success
	return
}

// Function to find Patient using identifier on his/her linked Person object
//
// Parameters:
//  - Identifier
func (p *BaseServiceClient) FindPatientByIdentifier(identifier *domain.Identifier) (r []*domain.Patient, err error) {
	if err = p.sendFindPatientByIdentifier(identifier); err != nil {
		return
	}
	return p.recvFindPatientByIdentifier()
}

func (p *BaseServiceClient) sendFindPatientByIdentifier(identifier *domain.Identifier) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("FindPatientByIdentifier", thrift.CALL, p.SeqId)
	args4 := NewFindPatientByIdentifierArgs()
	args4.Identifier = identifier
	err = args4.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *BaseServiceClient) recvFindPatientByIdentifier() (value []*domain.Patient, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result5 := NewFindPatientByIdentifierResult()
	err = result5.Read(iprot)
	iprot.ReadMessageEnd()
	value = result5.Success
	return
}

// Function to find Patient using id on his/her Patient object
//
// Parameters:
//  - Id
func (p *BaseServiceClient) FindPatientById(id string) (r *domain.Patient, err error) {
	if err = p.sendFindPatientById(id); err != nil {
		return
	}
	return p.recvFindPatientById()
}

func (p *BaseServiceClient) sendFindPatientById(id string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("FindPatientById", thrift.CALL, p.SeqId)
	args8 := NewFindPatientByIdArgs()
	args8.Id = id
	err = args8.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *BaseServiceClient) recvFindPatientById() (value *domain.Patient, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result9 := NewFindPatientByIdResult()
	err = result9.Read(iprot)
	iprot.ReadMessageEnd()
	value = result9.Success
	return
}

// Function to find Patient using HumanName on his/her Patient object
//
// Parameters:
//  - Name
func (p *BaseServiceClient) FindPatientByName(name string) (r *domain.Patient, err error) {
	if err = p.sendFindPatientByName(name); err != nil {
		return
	}
	return p.recvFindPatientByName()
}

func (p *BaseServiceClient) sendFindPatientByName(name string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("FindPatientByName", thrift.CALL, p.SeqId)
	args12 := NewFindPatientByNameArgs()
	args12.Name = name
	err = args12.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return
}

func (p *BaseServiceClient) recvFindPatientByName() (value *domain.Patient, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result13 := NewFindPatientByNameResult()
	err = result13.Read(iprot)
	iprot.ReadMessageEnd()
	value = result13.Success
	return
}

type BaseServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BaseService
}

func (p *BaseServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BaseServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BaseServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBaseServiceProcessor(handler BaseService) *BaseServiceProcessor {

	self16 := &BaseServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self16.processorMap["AddPatient"] = &baseServiceProcessorAddPatient{handler: handler}
	self16.processorMap["FindPatientByIdentifier"] = &baseServiceProcessorFindPatientByIdentifier{handler: handler}
	self16.processorMap["FindPatientById"] = &baseServiceProcessorFindPatientById{handler: handler}
	self16.processorMap["FindPatientByName"] = &baseServiceProcessorFindPatientByName{handler: handler}
	return self16
}

func (p *BaseServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x17.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x17

}

type baseServiceProcessorAddPatient struct {
	handler BaseService
}

func (p *baseServiceProcessorAddPatient) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAddPatientArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("AddPatient", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAddPatientResult()
	if result.Success, err = p.handler.AddPatient(args.Identifier, args.Name, args.Contact, args.Gender, args.BirthDate, args.Address, args.IssueMR); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddPatient: "+err.Error())
		oprot.WriteMessageBegin("AddPatient", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("AddPatient", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type baseServiceProcessorFindPatientByIdentifier struct {
	handler BaseService
}

func (p *baseServiceProcessorFindPatientByIdentifier) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewFindPatientByIdentifierArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FindPatientByIdentifier", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewFindPatientByIdentifierResult()
	if result.Success, err = p.handler.FindPatientByIdentifier(args.Identifier); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindPatientByIdentifier: "+err.Error())
		oprot.WriteMessageBegin("FindPatientByIdentifier", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("FindPatientByIdentifier", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type baseServiceProcessorFindPatientById struct {
	handler BaseService
}

func (p *baseServiceProcessorFindPatientById) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewFindPatientByIdArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FindPatientById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewFindPatientByIdResult()
	if result.Success, err = p.handler.FindPatientById(args.Id); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindPatientById: "+err.Error())
		oprot.WriteMessageBegin("FindPatientById", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("FindPatientById", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type baseServiceProcessorFindPatientByName struct {
	handler BaseService
}

func (p *baseServiceProcessorFindPatientByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewFindPatientByNameArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FindPatientByName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewFindPatientByNameResult()
	if result.Success, err = p.handler.FindPatientByName(args.Name); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindPatientByName: "+err.Error())
		oprot.WriteMessageBegin("FindPatientByName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("FindPatientByName", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type AddPatientArgs struct {
	Identifier []*domain.Identifier         `thrift:"identifier,1,required"`
	Name       []*domain.HumanName          `thrift:"name,2"`
	Contact    []*domain.ContactPoint       `thrift:"contact,3"`
	Gender     *domain.AdministrativeGender `thrift:"gender,4"`
	BirthDate  int32                        `thrift:"birthDate,5"`
	Address    []*domain.Address            `thrift:"address,6"`
	IssueMR    bool                         `thrift:"issueMR,7,required"`
}

func NewAddPatientArgs() *AddPatientArgs {
	return &AddPatientArgs{}
}

func (p *AddPatientArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPatientArgs) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Identifier = make([]*domain.Identifier, 0, size)
	for i := 0; i < size; i++ {
		_elem18 := domain.NewIdentifier()
		if err := _elem18.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem18)
		}
		p.Identifier = append(p.Identifier, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *AddPatientArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Name = make([]*domain.HumanName, 0, size)
	for i := 0; i < size; i++ {
		_elem19 := domain.NewHumanName()
		if err := _elem19.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem19)
		}
		p.Name = append(p.Name, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *AddPatientArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Contact = make([]*domain.ContactPoint, 0, size)
	for i := 0; i < size; i++ {
		_elem20 := domain.NewContactPoint()
		if err := _elem20.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem20)
		}
		p.Contact = append(p.Contact, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *AddPatientArgs) readField4(iprot thrift.TProtocol) error {
	p.Gender = domain.NewAdministrativeGender()
	if err := p.Gender.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Gender)
	}
	return nil
}

func (p *AddPatientArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.BirthDate = v
	}
	return nil
}

func (p *AddPatientArgs) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Address = make([]*domain.Address, 0, size)
	for i := 0; i < size; i++ {
		_elem21 := domain.NewAddress()
		if err := _elem21.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem21)
		}
		p.Address = append(p.Address, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *AddPatientArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.IssueMR = v
	}
	return nil
}

func (p *AddPatientArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddPatient_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPatientArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Identifier != nil {
		if err := oprot.WriteFieldBegin("identifier", thrift.LIST, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:identifier: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Identifier)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Identifier {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:identifier: %s", p, err)
		}
	}
	return err
}

func (p *AddPatientArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Name != nil {
		if err := oprot.WriteFieldBegin("name", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:name: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Name)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Name {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:name: %s", p, err)
		}
	}
	return err
}

func (p *AddPatientArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Contact != nil {
		if err := oprot.WriteFieldBegin("contact", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:contact: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contact)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Contact {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:contact: %s", p, err)
		}
	}
	return err
}

func (p *AddPatientArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Gender != nil {
		if err := oprot.WriteFieldBegin("gender", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:gender: %s", p, err)
		}
		if err := p.Gender.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Gender)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:gender: %s", p, err)
		}
	}
	return err
}

func (p *AddPatientArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("birthDate", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:birthDate: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.BirthDate)); err != nil {
		return fmt.Errorf("%T.birthDate (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:birthDate: %s", p, err)
	}
	return err
}

func (p *AddPatientArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if p.Address != nil {
		if err := oprot.WriteFieldBegin("address", thrift.LIST, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:address: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Address)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Address {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:address: %s", p, err)
		}
	}
	return err
}

func (p *AddPatientArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("issueMR", thrift.BOOL, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:issueMR: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IssueMR)); err != nil {
		return fmt.Errorf("%T.issueMR (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:issueMR: %s", p, err)
	}
	return err
}

func (p *AddPatientArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPatientArgs(%+v)", *p)
}

type AddPatientResult struct {
	Success *ReturnType `thrift:"success,0"`
}

func NewAddPatientResult() *AddPatientResult {
	return &AddPatientResult{}
}

func (p *AddPatientResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddPatientResult) readField0(iprot thrift.TProtocol) error {
	p.Success = NewReturnType()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *AddPatientResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddPatient_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AddPatientResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *AddPatientResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddPatientResult(%+v)", *p)
}

type FindPatientByIdentifierArgs struct {
	Identifier *domain.Identifier `thrift:"identifier,1,required"`
}

func NewFindPatientByIdentifierArgs() *FindPatientByIdentifierArgs {
	return &FindPatientByIdentifierArgs{}
}

func (p *FindPatientByIdentifierArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindPatientByIdentifierArgs) readField1(iprot thrift.TProtocol) error {
	p.Identifier = domain.NewIdentifier()
	if err := p.Identifier.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Identifier)
	}
	return nil
}

func (p *FindPatientByIdentifierArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FindPatientByIdentifier_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindPatientByIdentifierArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Identifier != nil {
		if err := oprot.WriteFieldBegin("identifier", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:identifier: %s", p, err)
		}
		if err := p.Identifier.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Identifier)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:identifier: %s", p, err)
		}
	}
	return err
}

func (p *FindPatientByIdentifierArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindPatientByIdentifierArgs(%+v)", *p)
}

type FindPatientByIdentifierResult struct {
	Success []*domain.Patient `thrift:"success,0"`
}

func NewFindPatientByIdentifierResult() *FindPatientByIdentifierResult {
	return &FindPatientByIdentifierResult{}
}

func (p *FindPatientByIdentifierResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindPatientByIdentifierResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Success = make([]*domain.Patient, 0, size)
	for i := 0; i < size; i++ {
		_elem22 := domain.NewPatient()
		if err := _elem22.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem22)
		}
		p.Success = append(p.Success, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *FindPatientByIdentifierResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FindPatientByIdentifier_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindPatientByIdentifierResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindPatientByIdentifierResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindPatientByIdentifierResult(%+v)", *p)
}

type FindPatientByIdArgs struct {
	Id string `thrift:"id,1,required"`
}

func NewFindPatientByIdArgs() *FindPatientByIdArgs {
	return &FindPatientByIdArgs{}
}

func (p *FindPatientByIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindPatientByIdArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *FindPatientByIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FindPatientById_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindPatientByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *FindPatientByIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindPatientByIdArgs(%+v)", *p)
}

type FindPatientByIdResult struct {
	Success *domain.Patient `thrift:"success,0"`
}

func NewFindPatientByIdResult() *FindPatientByIdResult {
	return &FindPatientByIdResult{}
}

func (p *FindPatientByIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindPatientByIdResult) readField0(iprot thrift.TProtocol) error {
	p.Success = domain.NewPatient()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *FindPatientByIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FindPatientById_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindPatientByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindPatientByIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindPatientByIdResult(%+v)", *p)
}

type FindPatientByNameArgs struct {
	Name string `thrift:"name,1,required"`
}

func NewFindPatientByNameArgs() *FindPatientByNameArgs {
	return &FindPatientByNameArgs{}
}

func (p *FindPatientByNameArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindPatientByNameArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = v
	}
	return nil
}

func (p *FindPatientByNameArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FindPatientByName_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindPatientByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *FindPatientByNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindPatientByNameArgs(%+v)", *p)
}

type FindPatientByNameResult struct {
	Success *domain.Patient `thrift:"success,0"`
}

func NewFindPatientByNameResult() *FindPatientByNameResult {
	return &FindPatientByNameResult{}
}

func (p *FindPatientByNameResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *FindPatientByNameResult) readField0(iprot thrift.TProtocol) error {
	p.Success = domain.NewPatient()
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success)
	}
	return nil
}

func (p *FindPatientByNameResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("FindPatientByName_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	switch {
	default:
		if err := p.writeField0(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *FindPatientByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.Success != nil {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *FindPatientByNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FindPatientByNameResult(%+v)", *p)
}
