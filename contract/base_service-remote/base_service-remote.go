// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
	"domain"
        "contract"
)

var _ = domain.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  ReturnType AddPatient( identifier,  name,  contact, AdministrativeGender gender, i32 birthDate,  address, bool issueMR)")
  fmt.Fprintln(os.Stderr, "   FindPatientByIdentifier(Identifier identifier)")
  fmt.Fprintln(os.Stderr, "  Patient FindPatientById(string id)")
  fmt.Fprintln(os.Stderr, "   FindPatientByName(string name)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := contract.NewBaseServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "AddPatient":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "AddPatient requires 7 args")
      flag.Usage()
    }
    arg16 := flag.Arg(1)
    mbTrans17 := thrift.NewTMemoryBufferLen(len(arg16))
    defer mbTrans17.Close()
    _, err18 := mbTrans17.WriteString(arg16)
    if err18 != nil { 
      Usage()
      return
    }
    factory19 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt20 := factory19.GetProtocol(mbTrans17)
    containerStruct0 := contract.NewBaseServiceAddPatientArgs()
    err21 := containerStruct0.ReadField1(jsProt20)
    if err21 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Identifier
    value0 := argvalue0
    arg22 := flag.Arg(2)
    mbTrans23 := thrift.NewTMemoryBufferLen(len(arg22))
    defer mbTrans23.Close()
    _, err24 := mbTrans23.WriteString(arg22)
    if err24 != nil { 
      Usage()
      return
    }
    factory25 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt26 := factory25.GetProtocol(mbTrans23)
    containerStruct1 := contract.NewBaseServiceAddPatientArgs()
    err27 := containerStruct1.ReadField2(jsProt26)
    if err27 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Name
    value1 := argvalue1
    arg28 := flag.Arg(3)
    mbTrans29 := thrift.NewTMemoryBufferLen(len(arg28))
    defer mbTrans29.Close()
    _, err30 := mbTrans29.WriteString(arg28)
    if err30 != nil { 
      Usage()
      return
    }
    factory31 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt32 := factory31.GetProtocol(mbTrans29)
    containerStruct2 := contract.NewBaseServiceAddPatientArgs()
    err33 := containerStruct2.ReadField3(jsProt32)
    if err33 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Contact
    value2 := argvalue2
    arg34 := flag.Arg(4)
    mbTrans35 := thrift.NewTMemoryBufferLen(len(arg34))
    defer mbTrans35.Close()
    _, err36 := mbTrans35.WriteString(arg34)
    if err36 != nil {
      Usage()
      return
    }
    factory37 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt38 := factory37.GetProtocol(mbTrans35)
    argvalue3 := domain.NewAdministrativeGender()
    err39 := argvalue3.Read(jsProt38)
    if err39 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    tmp4, err40 := (strconv.Atoi(flag.Arg(5)))
    if err40 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    arg41 := flag.Arg(6)
    mbTrans42 := thrift.NewTMemoryBufferLen(len(arg41))
    defer mbTrans42.Close()
    _, err43 := mbTrans42.WriteString(arg41)
    if err43 != nil { 
      Usage()
      return
    }
    factory44 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt45 := factory44.GetProtocol(mbTrans42)
    containerStruct5 := contract.NewBaseServiceAddPatientArgs()
    err46 := containerStruct5.ReadField6(jsProt45)
    if err46 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.Address
    value5 := argvalue5
    argvalue6 := flag.Arg(7) == "true"
    value6 := argvalue6
    fmt.Print(client.AddPatient(value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "FindPatientByIdentifier":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindPatientByIdentifier requires 1 args")
      flag.Usage()
    }
    arg48 := flag.Arg(1)
    mbTrans49 := thrift.NewTMemoryBufferLen(len(arg48))
    defer mbTrans49.Close()
    _, err50 := mbTrans49.WriteString(arg48)
    if err50 != nil {
      Usage()
      return
    }
    factory51 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt52 := factory51.GetProtocol(mbTrans49)
    argvalue0 := domain.NewIdentifier()
    err53 := argvalue0.Read(jsProt52)
    if err53 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FindPatientByIdentifier(value0))
    fmt.Print("\n")
    break
  case "FindPatientById":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindPatientById requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindPatientById(value0))
    fmt.Print("\n")
    break
  case "FindPatientByName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindPatientByName requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindPatientByName(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
