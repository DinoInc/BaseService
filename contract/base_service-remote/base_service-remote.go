// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
	"domain"
        "contract"
)

var _ = domain.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  ReturnType AddPatient( identifier,  name,  contact, enumPatientGender gender, i32 birthDate,  address, bool issueMR)")
  fmt.Fprintln(os.Stderr, "   FindPatientByIdentifier(Identifier identifier)")
  fmt.Fprintln(os.Stderr, "  Patient FindPatientById(string id)")
  fmt.Fprintln(os.Stderr, "   FindPatientByName(string name)")
  fmt.Fprintln(os.Stderr, "   FindPersonByIdentifier(Identifier identifier)")
  fmt.Fprintln(os.Stderr, "  Person FindPersonById(string id)")
  fmt.Fprintln(os.Stderr, "   FindPersonByName(string name)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := contract.NewBaseServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "AddPatient":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "AddPatient requires 7 args")
      flag.Usage()
    }
    arg24 := flag.Arg(1)
    mbTrans25 := thrift.NewTMemoryBufferLen(len(arg24))
    defer mbTrans25.Close()
    _, err26 := mbTrans25.WriteString(arg24)
    if err26 != nil { 
      Usage()
      return
    }
    factory27 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt28 := factory27.GetProtocol(mbTrans25)
    containerStruct0 := contract.NewBaseServiceAddPatientArgs()
    err29 := containerStruct0.ReadField1(jsProt28)
    if err29 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Identifier
    value0 := argvalue0
    arg30 := flag.Arg(2)
    mbTrans31 := thrift.NewTMemoryBufferLen(len(arg30))
    defer mbTrans31.Close()
    _, err32 := mbTrans31.WriteString(arg30)
    if err32 != nil { 
      Usage()
      return
    }
    factory33 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt34 := factory33.GetProtocol(mbTrans31)
    containerStruct1 := contract.NewBaseServiceAddPatientArgs()
    err35 := containerStruct1.ReadField2(jsProt34)
    if err35 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Name
    value1 := argvalue1
    arg36 := flag.Arg(3)
    mbTrans37 := thrift.NewTMemoryBufferLen(len(arg36))
    defer mbTrans37.Close()
    _, err38 := mbTrans37.WriteString(arg36)
    if err38 != nil { 
      Usage()
      return
    }
    factory39 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt40 := factory39.GetProtocol(mbTrans37)
    containerStruct2 := contract.NewBaseServiceAddPatientArgs()
    err41 := containerStruct2.ReadField3(jsProt40)
    if err41 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Contact
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := contract.EnumPatientGender(tmp3)
    value3 := argvalue3
    tmp4, err42 := (strconv.Atoi(flag.Arg(5)))
    if err42 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    arg43 := flag.Arg(6)
    mbTrans44 := thrift.NewTMemoryBufferLen(len(arg43))
    defer mbTrans44.Close()
    _, err45 := mbTrans44.WriteString(arg43)
    if err45 != nil { 
      Usage()
      return
    }
    factory46 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt47 := factory46.GetProtocol(mbTrans44)
    containerStruct5 := contract.NewBaseServiceAddPatientArgs()
    err48 := containerStruct5.ReadField6(jsProt47)
    if err48 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.Address
    value5 := argvalue5
    argvalue6 := flag.Arg(7) == "true"
    value6 := argvalue6
    fmt.Print(client.AddPatient(value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "FindPatientByIdentifier":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindPatientByIdentifier requires 1 args")
      flag.Usage()
    }
    arg50 := flag.Arg(1)
    mbTrans51 := thrift.NewTMemoryBufferLen(len(arg50))
    defer mbTrans51.Close()
    _, err52 := mbTrans51.WriteString(arg50)
    if err52 != nil {
      Usage()
      return
    }
    factory53 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt54 := factory53.GetProtocol(mbTrans51)
    argvalue0 := domain.NewIdentifier()
    err55 := argvalue0.Read(jsProt54)
    if err55 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FindPatientByIdentifier(value0))
    fmt.Print("\n")
    break
  case "FindPatientById":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindPatientById requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindPatientById(value0))
    fmt.Print("\n")
    break
  case "FindPatientByName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindPatientByName requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindPatientByName(value0))
    fmt.Print("\n")
    break
  case "FindPersonByIdentifier":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindPersonByIdentifier requires 1 args")
      flag.Usage()
    }
    arg58 := flag.Arg(1)
    mbTrans59 := thrift.NewTMemoryBufferLen(len(arg58))
    defer mbTrans59.Close()
    _, err60 := mbTrans59.WriteString(arg58)
    if err60 != nil {
      Usage()
      return
    }
    factory61 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt62 := factory61.GetProtocol(mbTrans59)
    argvalue0 := domain.NewIdentifier()
    err63 := argvalue0.Read(jsProt62)
    if err63 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FindPersonByIdentifier(value0))
    fmt.Print("\n")
    break
  case "FindPersonById":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindPersonById requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindPersonById(value0))
    fmt.Print("\n")
    break
  case "FindPersonByName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindPersonByName requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindPersonByName(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
