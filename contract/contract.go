// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package contract

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/DinoInc/BaseService/domain"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = domain.GoUnusedProtection__
// Attributes:
//  - Code
//  - Resource
//  - Target
//  - Value
//  - Message
type ReturnType struct {
  Code int32 `thrift:"code,1,required" db:"code" json:"code"`
  Resource *string `thrift:"resource,2" db:"resource" json:"resource,omitempty"`
  Target *string `thrift:"target,3" db:"target" json:"target,omitempty"`
  Value *string `thrift:"value,4" db:"value" json:"value,omitempty"`
  Message string `thrift:"message,5,required" db:"message" json:"message"`
}

func NewReturnType() *ReturnType {
  return &ReturnType{}
}


func (p *ReturnType) GetCode() int32 {
  return p.Code
}
var ReturnType_Resource_DEFAULT string
func (p *ReturnType) GetResource() string {
  if !p.IsSetResource() {
    return ReturnType_Resource_DEFAULT
  }
return *p.Resource
}
var ReturnType_Target_DEFAULT string
func (p *ReturnType) GetTarget() string {
  if !p.IsSetTarget() {
    return ReturnType_Target_DEFAULT
  }
return *p.Target
}
var ReturnType_Value_DEFAULT string
func (p *ReturnType) GetValue() string {
  if !p.IsSetValue() {
    return ReturnType_Value_DEFAULT
  }
return *p.Value
}

func (p *ReturnType) GetMessage() string {
  return p.Message
}
func (p *ReturnType) IsSetResource() bool {
  return p.Resource != nil
}

func (p *ReturnType) IsSetTarget() bool {
  return p.Target != nil
}

func (p *ReturnType) IsSetValue() bool {
  return p.Value != nil
}

func (p *ReturnType) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCode bool = false;
  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetCode = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"));
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *ReturnType)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *ReturnType)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Resource = &v
}
  return nil
}

func (p *ReturnType)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Target = &v
}
  return nil
}

func (p *ReturnType)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Value = &v
}
  return nil
}

func (p *ReturnType)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *ReturnType) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ReturnType"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReturnType) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *ReturnType) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetResource() {
    if err := oprot.WriteFieldBegin("resource", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:resource: ", p), err) }
    if err := oprot.WriteString(string(*p.Resource)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.resource (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:resource: ", p), err) }
  }
  return err
}

func (p *ReturnType) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTarget() {
    if err := oprot.WriteFieldBegin("target", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:target: ", p), err) }
    if err := oprot.WriteString(string(*p.Target)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.target (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:target: ", p), err) }
  }
  return err
}

func (p *ReturnType) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err) }
    if err := oprot.WriteString(string(*p.Value)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err) }
  }
  return err
}

func (p *ReturnType) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:message: ", p), err) }
  return err
}

func (p *ReturnType) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReturnType(%+v)", *p)
}

type BaseService interface {
  // 
  // This function is used, for example in "Front Office" want to register a new patient.
  // The new patient will get a new Medical Record (MR) identifier linked to his/her Person
  // object that also linked to his/her Patient object.
  // 
  // issue MR: by default is [TRUE]
  // [FALSE IF] when in emergency situation such as "IGD".The person will not get a new
  // Medical Record number because of lack of patient data and could not confirm whether
  // the patient has been registered on hospital or not. New Patient object will be created
  // without any Person object linked.
  // 
  // 
  // Parameters:
  //  - Identifier
  //  - Name
  //  - Contact
  //  - Gender
  //  - BirthDate
  //  - Address
  //  - IssueMR
  AddPatient(identifier []*domain.Identifier, name []*domain.HumanName, contact []*domain.ContactPoint, gender *domain.AdministrativeGender, birthDate int32, address []*domain.Address, issueMR bool) (r *ReturnType, err error)
  // Function to find Patient using identifier on his/her linked Person object
  // 
  // Parameters:
  //  - Identifier
  FindPatientByIdentifier(identifier *domain.Identifier) (r []*domain.Patient, err error)
  // Function to find Patient using id on his/her Patient object
  // 
  // Parameters:
  //  - ID
  FindPatientById(id string) (r *domain.Patient, err error)
  // Function to find Patient using HumanName on his/her Patient object
  // 
  // Parameters:
  //  - Name
  FindPatientByName(name string) (r []*domain.Patient, err error)
}

type BaseServiceClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewBaseServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BaseServiceClient {
  return &BaseServiceClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewBaseServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BaseServiceClient {
  return &BaseServiceClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// 
// This function is used, for example in "Front Office" want to register a new patient.
// The new patient will get a new Medical Record (MR) identifier linked to his/her Person
// object that also linked to his/her Patient object.
// 
// issue MR: by default is [TRUE]
// [FALSE IF] when in emergency situation such as "IGD".The person will not get a new
// Medical Record number because of lack of patient data and could not confirm whether
// the patient has been registered on hospital or not. New Patient object will be created
// without any Person object linked.
// 
// 
// Parameters:
//  - Identifier
//  - Name
//  - Contact
//  - Gender
//  - BirthDate
//  - Address
//  - IssueMR
func (p *BaseServiceClient) AddPatient(identifier []*domain.Identifier, name []*domain.HumanName, contact []*domain.ContactPoint, gender *domain.AdministrativeGender, birthDate int32, address []*domain.Address, issueMR bool) (r *ReturnType, err error) {
  if err = p.sendAddPatient(identifier, name, contact, gender, birthDate, address, issueMR); err != nil { return }
  return p.recvAddPatient()
}

func (p *BaseServiceClient) sendAddPatient(identifier []*domain.Identifier, name []*domain.HumanName, contact []*domain.ContactPoint, gender *domain.AdministrativeGender, birthDate int32, address []*domain.Address, issueMR bool)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("AddPatient", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BaseServiceAddPatientArgs{
  Identifier : identifier,
  Name : name,
  Contact : contact,
  Gender : gender,
  BirthDate : birthDate,
  Address : address,
  IssueMR : issueMR,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BaseServiceClient) recvAddPatient() (value *ReturnType, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "AddPatient" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "AddPatient failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "AddPatient failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error1 error
    error1, err = error0.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error1
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "AddPatient failed: invalid message type")
    return
  }
  result := BaseServiceAddPatientResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Function to find Patient using identifier on his/her linked Person object
// 
// Parameters:
//  - Identifier
func (p *BaseServiceClient) FindPatientByIdentifier(identifier *domain.Identifier) (r []*domain.Patient, err error) {
  if err = p.sendFindPatientByIdentifier(identifier); err != nil { return }
  return p.recvFindPatientByIdentifier()
}

func (p *BaseServiceClient) sendFindPatientByIdentifier(identifier *domain.Identifier)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("FindPatientByIdentifier", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BaseServiceFindPatientByIdentifierArgs{
  Identifier : identifier,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BaseServiceClient) recvFindPatientByIdentifier() (value []*domain.Patient, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "FindPatientByIdentifier" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "FindPatientByIdentifier failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "FindPatientByIdentifier failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error3 error
    error3, err = error2.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error3
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "FindPatientByIdentifier failed: invalid message type")
    return
  }
  result := BaseServiceFindPatientByIdentifierResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Function to find Patient using id on his/her Patient object
// 
// Parameters:
//  - ID
func (p *BaseServiceClient) FindPatientById(id string) (r *domain.Patient, err error) {
  if err = p.sendFindPatientById(id); err != nil { return }
  return p.recvFindPatientById()
}

func (p *BaseServiceClient) sendFindPatientById(id string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("FindPatientById", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BaseServiceFindPatientByIdArgs{
  ID : id,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BaseServiceClient) recvFindPatientById() (value *domain.Patient, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "FindPatientById" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "FindPatientById failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "FindPatientById failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error5 error
    error5, err = error4.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error5
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "FindPatientById failed: invalid message type")
    return
  }
  result := BaseServiceFindPatientByIdResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Function to find Patient using HumanName on his/her Patient object
// 
// Parameters:
//  - Name
func (p *BaseServiceClient) FindPatientByName(name string) (r []*domain.Patient, err error) {
  if err = p.sendFindPatientByName(name); err != nil { return }
  return p.recvFindPatientByName()
}

func (p *BaseServiceClient) sendFindPatientByName(name string)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("FindPatientByName", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := BaseServiceFindPatientByNameArgs{
  Name : name,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *BaseServiceClient) recvFindPatientByName() (value []*domain.Patient, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "FindPatientByName" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "FindPatientByName failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "FindPatientByName failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error7 error
    error7, err = error6.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error7
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "FindPatientByName failed: invalid message type")
    return
  }
  result := BaseServiceFindPatientByNameResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type BaseServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BaseService
}

func (p *BaseServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BaseServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BaseServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBaseServiceProcessor(handler BaseService) *BaseServiceProcessor {

  self8 := &BaseServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["AddPatient"] = &baseServiceProcessorAddPatient{handler:handler}
  self8.processorMap["FindPatientByIdentifier"] = &baseServiceProcessorFindPatientByIdentifier{handler:handler}
  self8.processorMap["FindPatientById"] = &baseServiceProcessorFindPatientById{handler:handler}
  self8.processorMap["FindPatientByName"] = &baseServiceProcessorFindPatientByName{handler:handler}
return self8
}

func (p *BaseServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x9.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x9

}

type baseServiceProcessorAddPatient struct {
  handler BaseService
}

func (p *baseServiceProcessorAddPatient) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BaseServiceAddPatientArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("AddPatient", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BaseServiceAddPatientResult{}
var retval *ReturnType
  var err2 error
  if retval, err2 = p.handler.AddPatient(args.Identifier, args.Name, args.Contact, args.Gender, args.BirthDate, args.Address, args.IssueMR); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing AddPatient: " + err2.Error())
    oprot.WriteMessageBegin("AddPatient", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("AddPatient", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type baseServiceProcessorFindPatientByIdentifier struct {
  handler BaseService
}

func (p *baseServiceProcessorFindPatientByIdentifier) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BaseServiceFindPatientByIdentifierArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("FindPatientByIdentifier", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BaseServiceFindPatientByIdentifierResult{}
var retval []*domain.Patient
  var err2 error
  if retval, err2 = p.handler.FindPatientByIdentifier(args.Identifier); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindPatientByIdentifier: " + err2.Error())
    oprot.WriteMessageBegin("FindPatientByIdentifier", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("FindPatientByIdentifier", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type baseServiceProcessorFindPatientById struct {
  handler BaseService
}

func (p *baseServiceProcessorFindPatientById) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BaseServiceFindPatientByIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("FindPatientById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BaseServiceFindPatientByIdResult{}
var retval *domain.Patient
  var err2 error
  if retval, err2 = p.handler.FindPatientById(args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindPatientById: " + err2.Error())
    oprot.WriteMessageBegin("FindPatientById", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("FindPatientById", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type baseServiceProcessorFindPatientByName struct {
  handler BaseService
}

func (p *baseServiceProcessorFindPatientByName) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := BaseServiceFindPatientByNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("FindPatientByName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := BaseServiceFindPatientByNameResult{}
var retval []*domain.Patient
  var err2 error
  if retval, err2 = p.handler.FindPatientByName(args.Name); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FindPatientByName: " + err2.Error())
    oprot.WriteMessageBegin("FindPatientByName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("FindPatientByName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Identifier
//  - Name
//  - Contact
//  - Gender
//  - BirthDate
//  - Address
//  - IssueMR
type BaseServiceAddPatientArgs struct {
  Identifier []*domain.Identifier `thrift:"identifier,1,required" db:"identifier" json:"identifier"`
  Name []*domain.HumanName `thrift:"name,2" db:"name" json:"name"`
  Contact []*domain.ContactPoint `thrift:"contact,3" db:"contact" json:"contact"`
  Gender *domain.AdministrativeGender `thrift:"gender,4" db:"gender" json:"gender"`
  BirthDate int32 `thrift:"birthDate,5" db:"birthDate" json:"birthDate"`
  Address []*domain.Address `thrift:"address,6" db:"address" json:"address"`
  IssueMR bool `thrift:"issueMR,7,required" db:"issueMR" json:"issueMR"`
}

func NewBaseServiceAddPatientArgs() *BaseServiceAddPatientArgs {
  return &BaseServiceAddPatientArgs{}
}


func (p *BaseServiceAddPatientArgs) GetIdentifier() []*domain.Identifier {
  return p.Identifier
}

func (p *BaseServiceAddPatientArgs) GetName() []*domain.HumanName {
  return p.Name
}

func (p *BaseServiceAddPatientArgs) GetContact() []*domain.ContactPoint {
  return p.Contact
}
var BaseServiceAddPatientArgs_Gender_DEFAULT *domain.AdministrativeGender
func (p *BaseServiceAddPatientArgs) GetGender() *domain.AdministrativeGender {
  if !p.IsSetGender() {
    return BaseServiceAddPatientArgs_Gender_DEFAULT
  }
return p.Gender
}

func (p *BaseServiceAddPatientArgs) GetBirthDate() int32 {
  return p.BirthDate
}

func (p *BaseServiceAddPatientArgs) GetAddress() []*domain.Address {
  return p.Address
}

func (p *BaseServiceAddPatientArgs) GetIssueMR() bool {
  return p.IssueMR
}
func (p *BaseServiceAddPatientArgs) IsSetGender() bool {
  return p.Gender != nil
}

func (p *BaseServiceAddPatientArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIdentifier bool = false;
  var issetIssueMR bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetIdentifier = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetIssueMR = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIdentifier{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Identifier is not set"));
  }
  if !issetIssueMR{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IssueMR is not set"));
  }
  return nil
}

func (p *BaseServiceAddPatientArgs)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*domain.Identifier, 0, size)
  p.Identifier =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &domain.Identifier{}
    if err := _elem10.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.Identifier = append(p.Identifier, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BaseServiceAddPatientArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*domain.HumanName, 0, size)
  p.Name =  tSlice
  for i := 0; i < size; i ++ {
    _elem11 := &domain.HumanName{}
    if err := _elem11.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
    }
    p.Name = append(p.Name, _elem11)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BaseServiceAddPatientArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*domain.ContactPoint, 0, size)
  p.Contact =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &domain.ContactPoint{}
    if err := _elem12.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.Contact = append(p.Contact, _elem12)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BaseServiceAddPatientArgs)  ReadField4(iprot thrift.TProtocol) error {
  p.Gender = &domain.AdministrativeGender{}
  if err := p.Gender.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Gender), err)
  }
  return nil
}

func (p *BaseServiceAddPatientArgs)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BirthDate = v
}
  return nil
}

func (p *BaseServiceAddPatientArgs)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*domain.Address, 0, size)
  p.Address =  tSlice
  for i := 0; i < size; i ++ {
    _elem13 := &domain.Address{}
    if err := _elem13.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
    }
    p.Address = append(p.Address, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BaseServiceAddPatientArgs)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.IssueMR = v
}
  return nil
}

func (p *BaseServiceAddPatientArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddPatient_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseServiceAddPatientArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identifier", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:identifier: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Identifier)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Identifier {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:identifier: ", p), err) }
  return err
}

func (p *BaseServiceAddPatientArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Name)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Name {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *BaseServiceAddPatientArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contact", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contact: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contact)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Contact {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contact: ", p), err) }
  return err
}

func (p *BaseServiceAddPatientArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("gender", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:gender: ", p), err) }
  if err := p.Gender.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Gender), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:gender: ", p), err) }
  return err
}

func (p *BaseServiceAddPatientArgs) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("birthDate", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:birthDate: ", p), err) }
  if err := oprot.WriteI32(int32(p.BirthDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.birthDate (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:birthDate: ", p), err) }
  return err
}

func (p *BaseServiceAddPatientArgs) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.LIST, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:address: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Address)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Address {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:address: ", p), err) }
  return err
}

func (p *BaseServiceAddPatientArgs) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("issueMR", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:issueMR: ", p), err) }
  if err := oprot.WriteBool(bool(p.IssueMR)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.issueMR (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:issueMR: ", p), err) }
  return err
}

func (p *BaseServiceAddPatientArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseServiceAddPatientArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BaseServiceAddPatientResult struct {
  Success *ReturnType `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBaseServiceAddPatientResult() *BaseServiceAddPatientResult {
  return &BaseServiceAddPatientResult{}
}

var BaseServiceAddPatientResult_Success_DEFAULT *ReturnType
func (p *BaseServiceAddPatientResult) GetSuccess() *ReturnType {
  if !p.IsSetSuccess() {
    return BaseServiceAddPatientResult_Success_DEFAULT
  }
return p.Success
}
func (p *BaseServiceAddPatientResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BaseServiceAddPatientResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseServiceAddPatientResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &ReturnType{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BaseServiceAddPatientResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddPatient_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseServiceAddPatientResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BaseServiceAddPatientResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseServiceAddPatientResult(%+v)", *p)
}

// Attributes:
//  - Identifier
type BaseServiceFindPatientByIdentifierArgs struct {
  Identifier *domain.Identifier `thrift:"identifier,1,required" db:"identifier" json:"identifier"`
}

func NewBaseServiceFindPatientByIdentifierArgs() *BaseServiceFindPatientByIdentifierArgs {
  return &BaseServiceFindPatientByIdentifierArgs{}
}

var BaseServiceFindPatientByIdentifierArgs_Identifier_DEFAULT *domain.Identifier
func (p *BaseServiceFindPatientByIdentifierArgs) GetIdentifier() *domain.Identifier {
  if !p.IsSetIdentifier() {
    return BaseServiceFindPatientByIdentifierArgs_Identifier_DEFAULT
  }
return p.Identifier
}
func (p *BaseServiceFindPatientByIdentifierArgs) IsSetIdentifier() bool {
  return p.Identifier != nil
}

func (p *BaseServiceFindPatientByIdentifierArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIdentifier bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetIdentifier = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIdentifier{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Identifier is not set"));
  }
  return nil
}

func (p *BaseServiceFindPatientByIdentifierArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Identifier = &domain.Identifier{}
  if err := p.Identifier.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Identifier), err)
  }
  return nil
}

func (p *BaseServiceFindPatientByIdentifierArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FindPatientByIdentifier_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseServiceFindPatientByIdentifierArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("identifier", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:identifier: ", p), err) }
  if err := p.Identifier.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Identifier), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:identifier: ", p), err) }
  return err
}

func (p *BaseServiceFindPatientByIdentifierArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseServiceFindPatientByIdentifierArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BaseServiceFindPatientByIdentifierResult struct {
  Success []*domain.Patient `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBaseServiceFindPatientByIdentifierResult() *BaseServiceFindPatientByIdentifierResult {
  return &BaseServiceFindPatientByIdentifierResult{}
}

var BaseServiceFindPatientByIdentifierResult_Success_DEFAULT []*domain.Patient

func (p *BaseServiceFindPatientByIdentifierResult) GetSuccess() []*domain.Patient {
  return p.Success
}
func (p *BaseServiceFindPatientByIdentifierResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BaseServiceFindPatientByIdentifierResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseServiceFindPatientByIdentifierResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*domain.Patient, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &domain.Patient{}
    if err := _elem14.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.Success = append(p.Success, _elem14)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BaseServiceFindPatientByIdentifierResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FindPatientByIdentifier_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseServiceFindPatientByIdentifierResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BaseServiceFindPatientByIdentifierResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseServiceFindPatientByIdentifierResult(%+v)", *p)
}

// Attributes:
//  - ID
type BaseServiceFindPatientByIdArgs struct {
  ID string `thrift:"id,1,required" db:"id" json:"id"`
}

func NewBaseServiceFindPatientByIdArgs() *BaseServiceFindPatientByIdArgs {
  return &BaseServiceFindPatientByIdArgs{}
}


func (p *BaseServiceFindPatientByIdArgs) GetID() string {
  return p.ID
}
func (p *BaseServiceFindPatientByIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetID = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  return nil
}

func (p *BaseServiceFindPatientByIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *BaseServiceFindPatientByIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FindPatientById_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseServiceFindPatientByIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *BaseServiceFindPatientByIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseServiceFindPatientByIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BaseServiceFindPatientByIdResult struct {
  Success *domain.Patient `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBaseServiceFindPatientByIdResult() *BaseServiceFindPatientByIdResult {
  return &BaseServiceFindPatientByIdResult{}
}

var BaseServiceFindPatientByIdResult_Success_DEFAULT *domain.Patient
func (p *BaseServiceFindPatientByIdResult) GetSuccess() *domain.Patient {
  if !p.IsSetSuccess() {
    return BaseServiceFindPatientByIdResult_Success_DEFAULT
  }
return p.Success
}
func (p *BaseServiceFindPatientByIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BaseServiceFindPatientByIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseServiceFindPatientByIdResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &domain.Patient{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BaseServiceFindPatientByIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FindPatientById_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseServiceFindPatientByIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BaseServiceFindPatientByIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseServiceFindPatientByIdResult(%+v)", *p)
}

// Attributes:
//  - Name
type BaseServiceFindPatientByNameArgs struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
}

func NewBaseServiceFindPatientByNameArgs() *BaseServiceFindPatientByNameArgs {
  return &BaseServiceFindPatientByNameArgs{}
}


func (p *BaseServiceFindPatientByNameArgs) GetName() string {
  return p.Name
}
func (p *BaseServiceFindPatientByNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetName = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  return nil
}

func (p *BaseServiceFindPatientByNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *BaseServiceFindPatientByNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FindPatientByName_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseServiceFindPatientByNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *BaseServiceFindPatientByNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseServiceFindPatientByNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BaseServiceFindPatientByNameResult struct {
  Success []*domain.Patient `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBaseServiceFindPatientByNameResult() *BaseServiceFindPatientByNameResult {
  return &BaseServiceFindPatientByNameResult{}
}

var BaseServiceFindPatientByNameResult_Success_DEFAULT []*domain.Patient

func (p *BaseServiceFindPatientByNameResult) GetSuccess() []*domain.Patient {
  return p.Success
}
func (p *BaseServiceFindPatientByNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BaseServiceFindPatientByNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BaseServiceFindPatientByNameResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*domain.Patient, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem15 := &domain.Patient{}
    if err := _elem15.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
    }
    p.Success = append(p.Success, _elem15)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BaseServiceFindPatientByNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("FindPatientByName_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BaseServiceFindPatientByNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BaseServiceFindPatientByNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BaseServiceFindPatientByNameResult(%+v)", *p)
}


