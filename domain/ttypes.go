// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package domain

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type NameUseList int64

const (
	NameUseList_NameUse_list_anonymous NameUseList = 0
	NameUseList_NameUse_list_maiden    NameUseList = 1
	NameUseList_NameUse_list_nickname  NameUseList = 2
	NameUseList_NameUse_list_official  NameUseList = 3
	NameUseList_NameUse_list_old       NameUseList = 4
	NameUseList_NameUse_list_temp      NameUseList = 5
	NameUseList_NameUse_list_usual     NameUseList = 6
)

func (p NameUseList) String() string {
	switch p {
	case NameUseList_NameUse_list_anonymous:
		return "NameUseList_NameUse_list_anonymous"
	case NameUseList_NameUse_list_maiden:
		return "NameUseList_NameUse_list_maiden"
	case NameUseList_NameUse_list_nickname:
		return "NameUseList_NameUse_list_nickname"
	case NameUseList_NameUse_list_official:
		return "NameUseList_NameUse_list_official"
	case NameUseList_NameUse_list_old:
		return "NameUseList_NameUse_list_old"
	case NameUseList_NameUse_list_temp:
		return "NameUseList_NameUse_list_temp"
	case NameUseList_NameUse_list_usual:
		return "NameUseList_NameUse_list_usual"
	}
	return "<UNSET>"
}

func NameUseListFromString(s string) (NameUseList, error) {
	switch s {
	case "NameUseList_NameUse_list_anonymous":
		return NameUseList_NameUse_list_anonymous, nil
	case "NameUseList_NameUse_list_maiden":
		return NameUseList_NameUse_list_maiden, nil
	case "NameUseList_NameUse_list_nickname":
		return NameUseList_NameUse_list_nickname, nil
	case "NameUseList_NameUse_list_official":
		return NameUseList_NameUse_list_official, nil
	case "NameUseList_NameUse_list_old":
		return NameUseList_NameUse_list_old, nil
	case "NameUseList_NameUse_list_temp":
		return NameUseList_NameUse_list_temp, nil
	case "NameUseList_NameUse_list_usual":
		return NameUseList_NameUse_list_usual, nil
	}
	return NameUseList(math.MinInt32 - 1), fmt.Errorf("not a valid NameUseList string")
}

type IdentifierUseList int64

const (
	IdentifierUseList_IdentifierUse_list_official  IdentifierUseList = 0
	IdentifierUseList_IdentifierUse_list_secondary IdentifierUseList = 1
	IdentifierUseList_IdentifierUse_list_temp      IdentifierUseList = 2
	IdentifierUseList_IdentifierUse_list_usual     IdentifierUseList = 3
)

func (p IdentifierUseList) String() string {
	switch p {
	case IdentifierUseList_IdentifierUse_list_official:
		return "IdentifierUseList_IdentifierUse_list_official"
	case IdentifierUseList_IdentifierUse_list_secondary:
		return "IdentifierUseList_IdentifierUse_list_secondary"
	case IdentifierUseList_IdentifierUse_list_temp:
		return "IdentifierUseList_IdentifierUse_list_temp"
	case IdentifierUseList_IdentifierUse_list_usual:
		return "IdentifierUseList_IdentifierUse_list_usual"
	}
	return "<UNSET>"
}

func IdentifierUseListFromString(s string) (IdentifierUseList, error) {
	switch s {
	case "IdentifierUseList_IdentifierUse_list_official":
		return IdentifierUseList_IdentifierUse_list_official, nil
	case "IdentifierUseList_IdentifierUse_list_secondary":
		return IdentifierUseList_IdentifierUse_list_secondary, nil
	case "IdentifierUseList_IdentifierUse_list_temp":
		return IdentifierUseList_IdentifierUse_list_temp, nil
	case "IdentifierUseList_IdentifierUse_list_usual":
		return IdentifierUseList_IdentifierUse_list_usual, nil
	}
	return IdentifierUseList(math.MinInt32 - 1), fmt.Errorf("not a valid IdentifierUseList string")
}

type ContactPointSystemList int64

const (
	ContactPointSystemList_ContactPointSystem_list_email ContactPointSystemList = 0
	ContactPointSystemList_ContactPointSystem_list_fax   ContactPointSystemList = 1
	ContactPointSystemList_ContactPointSystem_list_other ContactPointSystemList = 2
	ContactPointSystemList_ContactPointSystem_list_pager ContactPointSystemList = 3
	ContactPointSystemList_ContactPointSystem_list_phone ContactPointSystemList = 4
	ContactPointSystemList_ContactPointSystem_list_sms   ContactPointSystemList = 5
	ContactPointSystemList_ContactPointSystem_list_url   ContactPointSystemList = 6
)

func (p ContactPointSystemList) String() string {
	switch p {
	case ContactPointSystemList_ContactPointSystem_list_email:
		return "ContactPointSystemList_ContactPointSystem_list_email"
	case ContactPointSystemList_ContactPointSystem_list_fax:
		return "ContactPointSystemList_ContactPointSystem_list_fax"
	case ContactPointSystemList_ContactPointSystem_list_other:
		return "ContactPointSystemList_ContactPointSystem_list_other"
	case ContactPointSystemList_ContactPointSystem_list_pager:
		return "ContactPointSystemList_ContactPointSystem_list_pager"
	case ContactPointSystemList_ContactPointSystem_list_phone:
		return "ContactPointSystemList_ContactPointSystem_list_phone"
	case ContactPointSystemList_ContactPointSystem_list_sms:
		return "ContactPointSystemList_ContactPointSystem_list_sms"
	case ContactPointSystemList_ContactPointSystem_list_url:
		return "ContactPointSystemList_ContactPointSystem_list_url"
	}
	return "<UNSET>"
}

func ContactPointSystemListFromString(s string) (ContactPointSystemList, error) {
	switch s {
	case "ContactPointSystemList_ContactPointSystem_list_email":
		return ContactPointSystemList_ContactPointSystem_list_email, nil
	case "ContactPointSystemList_ContactPointSystem_list_fax":
		return ContactPointSystemList_ContactPointSystem_list_fax, nil
	case "ContactPointSystemList_ContactPointSystem_list_other":
		return ContactPointSystemList_ContactPointSystem_list_other, nil
	case "ContactPointSystemList_ContactPointSystem_list_pager":
		return ContactPointSystemList_ContactPointSystem_list_pager, nil
	case "ContactPointSystemList_ContactPointSystem_list_phone":
		return ContactPointSystemList_ContactPointSystem_list_phone, nil
	case "ContactPointSystemList_ContactPointSystem_list_sms":
		return ContactPointSystemList_ContactPointSystem_list_sms, nil
	case "ContactPointSystemList_ContactPointSystem_list_url":
		return ContactPointSystemList_ContactPointSystem_list_url, nil
	}
	return ContactPointSystemList(math.MinInt32 - 1), fmt.Errorf("not a valid ContactPointSystemList string")
}

type ContactPointUseList int64

const (
	ContactPointUseList_ContactPointUse_list_home   ContactPointUseList = 0
	ContactPointUseList_ContactPointUse_list_mobile ContactPointUseList = 1
	ContactPointUseList_ContactPointUse_list_old    ContactPointUseList = 2
	ContactPointUseList_ContactPointUse_list_temp   ContactPointUseList = 3
	ContactPointUseList_ContactPointUse_list_work   ContactPointUseList = 4
)

func (p ContactPointUseList) String() string {
	switch p {
	case ContactPointUseList_ContactPointUse_list_home:
		return "ContactPointUseList_ContactPointUse_list_home"
	case ContactPointUseList_ContactPointUse_list_mobile:
		return "ContactPointUseList_ContactPointUse_list_mobile"
	case ContactPointUseList_ContactPointUse_list_old:
		return "ContactPointUseList_ContactPointUse_list_old"
	case ContactPointUseList_ContactPointUse_list_temp:
		return "ContactPointUseList_ContactPointUse_list_temp"
	case ContactPointUseList_ContactPointUse_list_work:
		return "ContactPointUseList_ContactPointUse_list_work"
	}
	return "<UNSET>"
}

func ContactPointUseListFromString(s string) (ContactPointUseList, error) {
	switch s {
	case "ContactPointUseList_ContactPointUse_list_home":
		return ContactPointUseList_ContactPointUse_list_home, nil
	case "ContactPointUseList_ContactPointUse_list_mobile":
		return ContactPointUseList_ContactPointUse_list_mobile, nil
	case "ContactPointUseList_ContactPointUse_list_old":
		return ContactPointUseList_ContactPointUse_list_old, nil
	case "ContactPointUseList_ContactPointUse_list_temp":
		return ContactPointUseList_ContactPointUse_list_temp, nil
	case "ContactPointUseList_ContactPointUse_list_work":
		return ContactPointUseList_ContactPointUse_list_work, nil
	}
	return ContactPointUseList(math.MinInt32 - 1), fmt.Errorf("not a valid ContactPointUseList string")
}

type AdministrativeGenderList int64

const (
	AdministrativeGenderList_AdministrativeGender_list_female  AdministrativeGenderList = 0
	AdministrativeGenderList_AdministrativeGender_list_male    AdministrativeGenderList = 1
	AdministrativeGenderList_AdministrativeGender_list_other   AdministrativeGenderList = 2
	AdministrativeGenderList_AdministrativeGender_list_unknown AdministrativeGenderList = 3
)

func (p AdministrativeGenderList) String() string {
	switch p {
	case AdministrativeGenderList_AdministrativeGender_list_female:
		return "AdministrativeGenderList_AdministrativeGender_list_female"
	case AdministrativeGenderList_AdministrativeGender_list_male:
		return "AdministrativeGenderList_AdministrativeGender_list_male"
	case AdministrativeGenderList_AdministrativeGender_list_other:
		return "AdministrativeGenderList_AdministrativeGender_list_other"
	case AdministrativeGenderList_AdministrativeGender_list_unknown:
		return "AdministrativeGenderList_AdministrativeGender_list_unknown"
	}
	return "<UNSET>"
}

func AdministrativeGenderListFromString(s string) (AdministrativeGenderList, error) {
	switch s {
	case "AdministrativeGenderList_AdministrativeGender_list_female":
		return AdministrativeGenderList_AdministrativeGender_list_female, nil
	case "AdministrativeGenderList_AdministrativeGender_list_male":
		return AdministrativeGenderList_AdministrativeGender_list_male, nil
	case "AdministrativeGenderList_AdministrativeGender_list_other":
		return AdministrativeGenderList_AdministrativeGender_list_other, nil
	case "AdministrativeGenderList_AdministrativeGender_list_unknown":
		return AdministrativeGenderList_AdministrativeGender_list_unknown, nil
	}
	return AdministrativeGenderList(math.MinInt32 - 1), fmt.Errorf("not a valid AdministrativeGenderList string")
}

type AddressTypeList int64

const (
	AddressTypeList_AddressType_list_both     AddressTypeList = 0
	AddressTypeList_AddressType_list_physical AddressTypeList = 1
	AddressTypeList_AddressType_list_postal   AddressTypeList = 2
)

func (p AddressTypeList) String() string {
	switch p {
	case AddressTypeList_AddressType_list_both:
		return "AddressTypeList_AddressType_list_both"
	case AddressTypeList_AddressType_list_physical:
		return "AddressTypeList_AddressType_list_physical"
	case AddressTypeList_AddressType_list_postal:
		return "AddressTypeList_AddressType_list_postal"
	}
	return "<UNSET>"
}

func AddressTypeListFromString(s string) (AddressTypeList, error) {
	switch s {
	case "AddressTypeList_AddressType_list_both":
		return AddressTypeList_AddressType_list_both, nil
	case "AddressTypeList_AddressType_list_physical":
		return AddressTypeList_AddressType_list_physical, nil
	case "AddressTypeList_AddressType_list_postal":
		return AddressTypeList_AddressType_list_postal, nil
	}
	return AddressTypeList(math.MinInt32 - 1), fmt.Errorf("not a valid AddressTypeList string")
}

type AddressUseList int64

const (
	AddressUseList_AddressUse_list_home AddressUseList = 0
	AddressUseList_AddressUse_list_old  AddressUseList = 1
	AddressUseList_AddressUse_list_temp AddressUseList = 2
	AddressUseList_AddressUse_list_work AddressUseList = 3
)

func (p AddressUseList) String() string {
	switch p {
	case AddressUseList_AddressUse_list_home:
		return "AddressUseList_AddressUse_list_home"
	case AddressUseList_AddressUse_list_old:
		return "AddressUseList_AddressUse_list_old"
	case AddressUseList_AddressUse_list_temp:
		return "AddressUseList_AddressUse_list_temp"
	case AddressUseList_AddressUse_list_work:
		return "AddressUseList_AddressUse_list_work"
	}
	return "<UNSET>"
}

func AddressUseListFromString(s string) (AddressUseList, error) {
	switch s {
	case "AddressUseList_AddressUse_list_home":
		return AddressUseList_AddressUse_list_home, nil
	case "AddressUseList_AddressUse_list_old":
		return AddressUseList_AddressUse_list_old, nil
	case "AddressUseList_AddressUse_list_temp":
		return AddressUseList_AddressUse_list_temp, nil
	case "AddressUseList_AddressUse_list_work":
		return AddressUseList_AddressUse_list_work, nil
	}
	return AddressUseList(math.MinInt32 - 1), fmt.Errorf("not a valid AddressUseList string")
}

type LinkTypeList int64

const (
	LinkTypeList_LinkType_list_refer       LinkTypeList = 0
	LinkTypeList_LinkType_list_replaced_by LinkTypeList = 1
	LinkTypeList_LinkType_list_replaces    LinkTypeList = 2
	LinkTypeList_LinkType_list_seealso     LinkTypeList = 3
)

func (p LinkTypeList) String() string {
	switch p {
	case LinkTypeList_LinkType_list_refer:
		return "LinkTypeList_LinkType_list_refer"
	case LinkTypeList_LinkType_list_replaced_by:
		return "LinkTypeList_LinkType_list_replaced_by"
	case LinkTypeList_LinkType_list_replaces:
		return "LinkTypeList_LinkType_list_replaces"
	case LinkTypeList_LinkType_list_seealso:
		return "LinkTypeList_LinkType_list_seealso"
	}
	return "<UNSET>"
}

func LinkTypeListFromString(s string) (LinkTypeList, error) {
	switch s {
	case "LinkTypeList_LinkType_list_refer":
		return LinkTypeList_LinkType_list_refer, nil
	case "LinkTypeList_LinkType_list_replaced_by":
		return LinkTypeList_LinkType_list_replaced_by, nil
	case "LinkTypeList_LinkType_list_replaces":
		return LinkTypeList_LinkType_list_replaces, nil
	case "LinkTypeList_LinkType_list_seealso":
		return LinkTypeList_LinkType_list_seealso, nil
	}
	return LinkTypeList(math.MinInt32 - 1), fmt.Errorf("not a valid LinkTypeList string")
}

type NarrativeStatusList int64

const (
	NarrativeStatusList_NarrativeStatus_list_additional NarrativeStatusList = 0
	NarrativeStatusList_NarrativeStatus_list_empty      NarrativeStatusList = 1
	NarrativeStatusList_NarrativeStatus_list_extensions NarrativeStatusList = 2
	NarrativeStatusList_NarrativeStatus_list_generated  NarrativeStatusList = 3
)

func (p NarrativeStatusList) String() string {
	switch p {
	case NarrativeStatusList_NarrativeStatus_list_additional:
		return "NarrativeStatusList_NarrativeStatus_list_additional"
	case NarrativeStatusList_NarrativeStatus_list_empty:
		return "NarrativeStatusList_NarrativeStatus_list_empty"
	case NarrativeStatusList_NarrativeStatus_list_extensions:
		return "NarrativeStatusList_NarrativeStatus_list_extensions"
	case NarrativeStatusList_NarrativeStatus_list_generated:
		return "NarrativeStatusList_NarrativeStatus_list_generated"
	}
	return "<UNSET>"
}

func NarrativeStatusListFromString(s string) (NarrativeStatusList, error) {
	switch s {
	case "NarrativeStatusList_NarrativeStatus_list_additional":
		return NarrativeStatusList_NarrativeStatus_list_additional, nil
	case "NarrativeStatusList_NarrativeStatus_list_empty":
		return NarrativeStatusList_NarrativeStatus_list_empty, nil
	case "NarrativeStatusList_NarrativeStatus_list_extensions":
		return NarrativeStatusList_NarrativeStatus_list_extensions, nil
	case "NarrativeStatusList_NarrativeStatus_list_generated":
		return NarrativeStatusList_NarrativeStatus_list_generated, nil
	}
	return NarrativeStatusList(math.MinInt32 - 1), fmt.Errorf("not a valid NarrativeStatusList string")
}

type NameUse struct {
	Extension [][]byte    `thrift:"extension,1"`
	Id        string      `thrift:"id,2"`
	Value     NameUseList `thrift:"value,3"`
}

func NewNameUse() *NameUse {
	return &NameUse{
		Value: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *NameUse) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *NameUse) IsSetId() bool {
	return p.Id != ""
}

func (p *NameUse) IsSetValue() bool {
	return int64(p.Value) != math.MinInt32-1
}

func (p *NameUse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NameUse) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem0 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem0 = v
		}
		p.Extension = append(p.Extension, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NameUse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *NameUse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = NameUseList(v)
	}
	return nil
}

func (p *NameUse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NameUse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NameUse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *NameUse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *NameUse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Value)); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *NameUse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NameUse(%+v)", *p)
}

type Period struct {
	PeriodEnd   int64    `thrift:"PeriodEnd,1"`
	Extension   [][]byte `thrift:"extension,2"`
	Id          string   `thrift:"id,3"`
	PeriodStart int64    `thrift:"PeriodStart,4"`
}

func NewPeriod() *Period {
	return &Period{}
}

func (p *Period) IsSetPeriodEnd() bool {
	return p.PeriodEnd != 0
}

func (p *Period) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Period) IsSetId() bool {
	return p.Id != ""
}

func (p *Period) IsSetPeriodStart() bool {
	return p.PeriodStart != 0
}

func (p *Period) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Period) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.PeriodEnd = v
	}
	return nil
}

func (p *Period) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem1 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem1 = v
		}
		p.Extension = append(p.Extension, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Period) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Period) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.PeriodStart = v
	}
	return nil
}

func (p *Period) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Period"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Period) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPeriodEnd() {
		if err := oprot.WriteFieldBegin("PeriodEnd", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:PeriodEnd: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.PeriodEnd)); err != nil {
			return fmt.Errorf("%T.PeriodEnd (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:PeriodEnd: %s", p, err)
		}
	}
	return err
}

func (p *Period) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Period) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:id: %s", p, err)
		}
	}
	return err
}

func (p *Period) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPeriodStart() {
		if err := oprot.WriteFieldBegin("PeriodStart", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:PeriodStart: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.PeriodStart)); err != nil {
			return fmt.Errorf("%T.PeriodStart (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:PeriodStart: %s", p, err)
		}
	}
	return err
}

func (p *Period) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Period(%+v)", *p)
}

type UnspecifiedType struct {
	BaseObjectType string `thrift:"baseObjectType,1,required"`
	Object         []byte `thrift:"object,2,required"`
}

func NewUnspecifiedType() *UnspecifiedType {
	return &UnspecifiedType{}
}

func (p *UnspecifiedType) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnspecifiedType) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.BaseObjectType = v
	}
	return nil
}

func (p *UnspecifiedType) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Object = v
	}
	return nil
}

func (p *UnspecifiedType) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnspecifiedType"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UnspecifiedType) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("baseObjectType", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:baseObjectType: %s", p, err)
	}
	if err := oprot.WriteString(string(p.BaseObjectType)); err != nil {
		return fmt.Errorf("%T.baseObjectType (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:baseObjectType: %s", p, err)
	}
	return err
}

func (p *UnspecifiedType) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Object != nil {
		if err := oprot.WriteFieldBegin("object", thrift.BINARY, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:object: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Object); err != nil {
			return fmt.Errorf("%T.object (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:object: %s", p, err)
		}
	}
	return err
}

func (p *UnspecifiedType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnspecifiedType(%+v)", *p)
}

type Uri struct {
	Extension [][]byte         `thrift:"extension,1"`
	Id        string           `thrift:"id,2"`
	Value     *UnspecifiedType `thrift:"value,3"`
}

func NewUri() *Uri {
	return &Uri{}
}

func (p *Uri) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Uri) IsSetId() bool {
	return p.Id != ""
}

func (p *Uri) IsSetValue() bool {
	return p.Value != nil
}

func (p *Uri) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Uri) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem2 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem2 = v
		}
		p.Extension = append(p.Extension, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Uri) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Uri) readField3(iprot thrift.TProtocol) error {
	p.Value = NewUnspecifiedType()
	if err := p.Value.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Value)
	}
	return nil
}

func (p *Uri) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("uri"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Uri) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Uri) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *Uri) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Value != nil {
		if p.IsSetValue() {
			if err := oprot.WriteFieldBegin("value", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
			}
			if err := p.Value.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Value)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:value: %s", p, err)
			}
		}
	}
	return err
}

func (p *Uri) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Uri(%+v)", *p)
}

type Code struct {
	Extension [][]byte `thrift:"extension,1"`
	Id        string   `thrift:"id,2"`
	Value     string   `thrift:"value,3"`
}

func NewCode() *Code {
	return &Code{}
}

func (p *Code) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Code) IsSetId() bool {
	return p.Id != ""
}

func (p *Code) IsSetValue() bool {
	return p.Value != ""
}

func (p *Code) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Code) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem3 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem3 = v
		}
		p.Extension = append(p.Extension, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Code) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Code) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = v
	}
	return nil
}

func (p *Code) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("code"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Code) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Code) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *Code) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Value)); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *Code) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Code(%+v)", *p)
}

type Coding struct {
	_code        *Code    `thrift:"_code,1"`
	Display      string   `thrift:"display,2"`
	Extension    [][]byte `thrift:"extension,3"`
	Id           string   `thrift:"id,4"`
	System       *Uri     `thrift:"system,5"`
	UserSelected bool     `thrift:"userSelected,6"`
	Version      string   `thrift:"version,7"`
}

func NewCoding() *Coding {
	return &Coding{}
}

func (p *Coding) IsSet_code() bool {
	return p._code != nil
}

func (p *Coding) IsSetDisplay() bool {
	return p.Display != ""
}

func (p *Coding) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Coding) IsSetId() bool {
	return p.Id != ""
}

func (p *Coding) IsSetSystem() bool {
	return p.System != nil
}

func (p *Coding) IsSetUserSelected() bool {
	return p.UserSelected != false
}

func (p *Coding) IsSetVersion() bool {
	return p.Version != ""
}

func (p *Coding) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Coding) readField1(iprot thrift.TProtocol) error {
	p._code = NewCode()
	if err := p._code.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p._code)
	}
	return nil
}

func (p *Coding) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Display = v
	}
	return nil
}

func (p *Coding) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem4 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem4 = v
		}
		p.Extension = append(p.Extension, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Coding) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Coding) readField5(iprot thrift.TProtocol) error {
	p.System = NewUri()
	if err := p.System.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.System)
	}
	return nil
}

func (p *Coding) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.UserSelected = v
	}
	return nil
}

func (p *Coding) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Version = v
	}
	return nil
}

func (p *Coding) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Coding"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Coding) writeField1(oprot thrift.TProtocol) (err error) {
	if p._code != nil {
		if p.IsSet_code() {
			if err := oprot.WriteFieldBegin("_code", thrift.STRUCT, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:_code: %s", p, err)
			}
			if err := p._code.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p._code)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:_code: %s", p, err)
			}
		}
	}
	return err
}

func (p *Coding) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplay() {
		if err := oprot.WriteFieldBegin("display", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:display: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Display)); err != nil {
			return fmt.Errorf("%T.display (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:display: %s", p, err)
		}
	}
	return err
}

func (p *Coding) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Coding) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:id: %s", p, err)
		}
	}
	return err
}

func (p *Coding) writeField5(oprot thrift.TProtocol) (err error) {
	if p.System != nil {
		if p.IsSetSystem() {
			if err := oprot.WriteFieldBegin("system", thrift.STRUCT, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:system: %s", p, err)
			}
			if err := p.System.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.System)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:system: %s", p, err)
			}
		}
	}
	return err
}

func (p *Coding) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserSelected() {
		if err := oprot.WriteFieldBegin("userSelected", thrift.BOOL, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:userSelected: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.UserSelected)); err != nil {
			return fmt.Errorf("%T.userSelected (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:userSelected: %s", p, err)
		}
	}
	return err
}

func (p *Coding) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err := oprot.WriteFieldBegin("version", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:version: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Version)); err != nil {
			return fmt.Errorf("%T.version (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:version: %s", p, err)
		}
	}
	return err
}

func (p *Coding) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Coding(%+v)", *p)
}

type CodeableConcept struct {
	Coding    []*Coding `thrift:"coding,1"`
	Extension [][]byte  `thrift:"extension,2"`
	Id        string    `thrift:"id,3"`
	Text      string    `thrift:"text,4"`
}

func NewCodeableConcept() *CodeableConcept {
	return &CodeableConcept{}
}

func (p *CodeableConcept) IsSetCoding() bool {
	return p.Coding != nil && len(p.Coding) > 0
}

func (p *CodeableConcept) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *CodeableConcept) IsSetId() bool {
	return p.Id != ""
}

func (p *CodeableConcept) IsSetText() bool {
	return p.Text != ""
}

func (p *CodeableConcept) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *CodeableConcept) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Coding = make([]*Coding, 0, size)
	for i := 0; i < size; i++ {
		_elem5 := NewCoding()
		if err := _elem5.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem5)
		}
		p.Coding = append(p.Coding, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *CodeableConcept) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem6 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem6 = v
		}
		p.Extension = append(p.Extension, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *CodeableConcept) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *CodeableConcept) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Text = v
	}
	return nil
}

func (p *CodeableConcept) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CodeableConcept"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *CodeableConcept) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Coding != nil {
		if p.IsSetCoding() {
			if err := oprot.WriteFieldBegin("coding", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:coding: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Coding)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Coding {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:coding: %s", p, err)
			}
		}
	}
	return err
}

func (p *CodeableConcept) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *CodeableConcept) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:id: %s", p, err)
		}
	}
	return err
}

func (p *CodeableConcept) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err := oprot.WriteFieldBegin("text", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:text: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Text)); err != nil {
			return fmt.Errorf("%T.text (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:text: %s", p, err)
		}
	}
	return err
}

func (p *CodeableConcept) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CodeableConcept(%+v)", *p)
}

type IdentifierUse struct {
	Extension [][]byte          `thrift:"extension,1"`
	Id        string            `thrift:"id,2"`
	Value     IdentifierUseList `thrift:"value,3"`
}

func NewIdentifierUse() *IdentifierUse {
	return &IdentifierUse{
		Value: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *IdentifierUse) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *IdentifierUse) IsSetId() bool {
	return p.Id != ""
}

func (p *IdentifierUse) IsSetValue() bool {
	return int64(p.Value) != math.MinInt32-1
}

func (p *IdentifierUse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IdentifierUse) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem7 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem7 = v
		}
		p.Extension = append(p.Extension, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *IdentifierUse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *IdentifierUse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = IdentifierUseList(v)
	}
	return nil
}

func (p *IdentifierUse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IdentifierUse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *IdentifierUse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *IdentifierUse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *IdentifierUse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Value)); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *IdentifierUse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdentifierUse(%+v)", *p)
}

type Identifier struct {
	// unused field # 1
	Extension     [][]byte         `thrift:"extension,2"`
	Id            string           `thrift:"id,3"`
	Period        *Period          `thrift:"period,4"`
	System        *Uri             `thrift:"system,5"`
	TypeA1        *CodeableConcept `thrift:"type,6"`
	IdentifierUse *IdentifierUse   `thrift:"identifierUse,7"`
	Value         string           `thrift:"value,8"`
}

func NewIdentifier() *Identifier {
	return &Identifier{}
}

func (p *Identifier) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Identifier) IsSetId() bool {
	return p.Id != ""
}

func (p *Identifier) IsSetPeriod() bool {
	return p.Period != nil
}

func (p *Identifier) IsSetSystem() bool {
	return p.System != nil
}

func (p *Identifier) IsSetTypeA1() bool {
	return p.TypeA1 != nil
}

func (p *Identifier) IsSetIdentifierUse() bool {
	return p.IdentifierUse != nil
}

func (p *Identifier) IsSetValue() bool {
	return p.Value != ""
}

func (p *Identifier) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Identifier) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem8 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem8 = v
		}
		p.Extension = append(p.Extension, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Identifier) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Identifier) readField4(iprot thrift.TProtocol) error {
	p.Period = NewPeriod()
	if err := p.Period.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Period)
	}
	return nil
}

func (p *Identifier) readField5(iprot thrift.TProtocol) error {
	p.System = NewUri()
	if err := p.System.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.System)
	}
	return nil
}

func (p *Identifier) readField6(iprot thrift.TProtocol) error {
	p.TypeA1 = NewCodeableConcept()
	if err := p.TypeA1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TypeA1)
	}
	return nil
}

func (p *Identifier) readField7(iprot thrift.TProtocol) error {
	p.IdentifierUse = NewIdentifierUse()
	if err := p.IdentifierUse.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.IdentifierUse)
	}
	return nil
}

func (p *Identifier) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Value = v
	}
	return nil
}

func (p *Identifier) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Identifier"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Identifier) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Identifier) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:id: %s", p, err)
		}
	}
	return err
}

func (p *Identifier) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Period != nil {
		if p.IsSetPeriod() {
			if err := oprot.WriteFieldBegin("period", thrift.STRUCT, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:period: %s", p, err)
			}
			if err := p.Period.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Period)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:period: %s", p, err)
			}
		}
	}
	return err
}

func (p *Identifier) writeField5(oprot thrift.TProtocol) (err error) {
	if p.System != nil {
		if p.IsSetSystem() {
			if err := oprot.WriteFieldBegin("system", thrift.STRUCT, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:system: %s", p, err)
			}
			if err := p.System.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.System)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:system: %s", p, err)
			}
		}
	}
	return err
}

func (p *Identifier) writeField6(oprot thrift.TProtocol) (err error) {
	if p.TypeA1 != nil {
		if p.IsSetTypeA1() {
			if err := oprot.WriteFieldBegin("type", thrift.STRUCT, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:type: %s", p, err)
			}
			if err := p.TypeA1.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.TypeA1)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:type: %s", p, err)
			}
		}
	}
	return err
}

func (p *Identifier) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IdentifierUse != nil {
		if p.IsSetIdentifierUse() {
			if err := oprot.WriteFieldBegin("identifierUse", thrift.STRUCT, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:identifierUse: %s", p, err)
			}
			if err := p.IdentifierUse.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.IdentifierUse)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:identifierUse: %s", p, err)
			}
		}
	}
	return err
}

func (p *Identifier) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:value: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Value)); err != nil {
			return fmt.Errorf("%T.value (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:value: %s", p, err)
		}
	}
	return err
}

func (p *Identifier) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Identifier(%+v)", *p)
}

type Reference struct {
	Display    string      `thrift:"display,1"`
	Extension  [][]byte    `thrift:"extension,2"`
	Id         string      `thrift:"id,3"`
	Identifier *Identifier `thrift:"identifier,4"`
	Reference  string      `thrift:"reference,5"`
}

func NewReference() *Reference {
	return &Reference{}
}

func (p *Reference) IsSetDisplay() bool {
	return p.Display != ""
}

func (p *Reference) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Reference) IsSetId() bool {
	return p.Id != ""
}

func (p *Reference) IsSetIdentifier() bool {
	return p.Identifier != nil
}

func (p *Reference) IsSetReference() bool {
	return p.Reference != ""
}

func (p *Reference) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Reference) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Display = v
	}
	return nil
}

func (p *Reference) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem9 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem9 = v
		}
		p.Extension = append(p.Extension, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Reference) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Reference) readField4(iprot thrift.TProtocol) error {
	p.Identifier = NewIdentifier()
	if err := p.Identifier.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Identifier)
	}
	return nil
}

func (p *Reference) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Reference = v
	}
	return nil
}

func (p *Reference) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Reference"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Reference) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplay() {
		if err := oprot.WriteFieldBegin("display", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:display: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Display)); err != nil {
			return fmt.Errorf("%T.display (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:display: %s", p, err)
		}
	}
	return err
}

func (p *Reference) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Reference) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:id: %s", p, err)
		}
	}
	return err
}

func (p *Reference) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Identifier != nil {
		if p.IsSetIdentifier() {
			if err := oprot.WriteFieldBegin("identifier", thrift.STRUCT, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:identifier: %s", p, err)
			}
			if err := p.Identifier.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Identifier)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:identifier: %s", p, err)
			}
		}
	}
	return err
}

func (p *Reference) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetReference() {
		if err := oprot.WriteFieldBegin("reference", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:reference: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Reference)); err != nil {
			return fmt.Errorf("%T.reference (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:reference: %s", p, err)
		}
	}
	return err
}

func (p *Reference) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Reference(%+v)", *p)
}

type ContactPointSystem struct {
	Extension [][]byte               `thrift:"extension,1"`
	Id        string                 `thrift:"id,2"`
	Value     ContactPointSystemList `thrift:"value,3"`
}

func NewContactPointSystem() *ContactPointSystem {
	return &ContactPointSystem{
		Value: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *ContactPointSystem) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *ContactPointSystem) IsSetId() bool {
	return p.Id != ""
}

func (p *ContactPointSystem) IsSetValue() bool {
	return int64(p.Value) != math.MinInt32-1
}

func (p *ContactPointSystem) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ContactPointSystem) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem10 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem10 = v
		}
		p.Extension = append(p.Extension, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ContactPointSystem) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *ContactPointSystem) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = ContactPointSystemList(v)
	}
	return nil
}

func (p *ContactPointSystem) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContactPointSystem"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ContactPointSystem) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *ContactPointSystem) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *ContactPointSystem) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Value)); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *ContactPointSystem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactPointSystem(%+v)", *p)
}

type ContactPointUse struct {
	Extension [][]byte            `thrift:"extension,1"`
	Id        string              `thrift:"id,2"`
	Value     ContactPointUseList `thrift:"value,3"`
}

func NewContactPointUse() *ContactPointUse {
	return &ContactPointUse{
		Value: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *ContactPointUse) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *ContactPointUse) IsSetId() bool {
	return p.Id != ""
}

func (p *ContactPointUse) IsSetValue() bool {
	return int64(p.Value) != math.MinInt32-1
}

func (p *ContactPointUse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ContactPointUse) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem11 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem11 = v
		}
		p.Extension = append(p.Extension, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ContactPointUse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *ContactPointUse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = ContactPointUseList(v)
	}
	return nil
}

func (p *ContactPointUse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContactPointUse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ContactPointUse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *ContactPointUse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *ContactPointUse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Value)); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *ContactPointUse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactPointUse(%+v)", *p)
}

type PositiveInt struct {
	Extension [][]byte `thrift:"extension,1"`
	Id        string   `thrift:"id,2"`
	Value     int64    `thrift:"value,3"`
}

func NewPositiveInt() *PositiveInt {
	return &PositiveInt{}
}

func (p *PositiveInt) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *PositiveInt) IsSetId() bool {
	return p.Id != ""
}

func (p *PositiveInt) IsSetValue() bool {
	return p.Value != 0
}

func (p *PositiveInt) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PositiveInt) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem12 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem12 = v
		}
		p.Extension = append(p.Extension, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *PositiveInt) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *PositiveInt) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = v
	}
	return nil
}

func (p *PositiveInt) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("positiveInt"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *PositiveInt) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *PositiveInt) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *PositiveInt) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Value)); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *PositiveInt) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PositiveInt(%+v)", *p)
}

type ContactPoint struct {
	Extension       [][]byte            `thrift:"extension,1"`
	Id              string              `thrift:"id,2"`
	Period          *Period             `thrift:"period,3"`
	Rank            *PositiveInt        `thrift:"rank,4"`
	System          *ContactPointSystem `thrift:"system,5"`
	ContactPointUse *ContactPointUse    `thrift:"contactPointUse,6"`
	Value           string              `thrift:"value,7"`
}

func NewContactPoint() *ContactPoint {
	return &ContactPoint{}
}

func (p *ContactPoint) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *ContactPoint) IsSetId() bool {
	return p.Id != ""
}

func (p *ContactPoint) IsSetPeriod() bool {
	return p.Period != nil
}

func (p *ContactPoint) IsSetRank() bool {
	return p.Rank != nil
}

func (p *ContactPoint) IsSetSystem() bool {
	return p.System != nil
}

func (p *ContactPoint) IsSetContactPointUse() bool {
	return p.ContactPointUse != nil
}

func (p *ContactPoint) IsSetValue() bool {
	return p.Value != ""
}

func (p *ContactPoint) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ContactPoint) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem13 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem13 = v
		}
		p.Extension = append(p.Extension, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ContactPoint) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *ContactPoint) readField3(iprot thrift.TProtocol) error {
	p.Period = NewPeriod()
	if err := p.Period.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Period)
	}
	return nil
}

func (p *ContactPoint) readField4(iprot thrift.TProtocol) error {
	p.Rank = NewPositiveInt()
	if err := p.Rank.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Rank)
	}
	return nil
}

func (p *ContactPoint) readField5(iprot thrift.TProtocol) error {
	p.System = NewContactPointSystem()
	if err := p.System.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.System)
	}
	return nil
}

func (p *ContactPoint) readField6(iprot thrift.TProtocol) error {
	p.ContactPointUse = NewContactPointUse()
	if err := p.ContactPointUse.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ContactPointUse)
	}
	return nil
}

func (p *ContactPoint) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Value = v
	}
	return nil
}

func (p *ContactPoint) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ContactPoint"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ContactPoint) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *ContactPoint) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *ContactPoint) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Period != nil {
		if p.IsSetPeriod() {
			if err := oprot.WriteFieldBegin("period", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:period: %s", p, err)
			}
			if err := p.Period.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Period)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:period: %s", p, err)
			}
		}
	}
	return err
}

func (p *ContactPoint) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Rank != nil {
		if p.IsSetRank() {
			if err := oprot.WriteFieldBegin("rank", thrift.STRUCT, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:rank: %s", p, err)
			}
			if err := p.Rank.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Rank)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:rank: %s", p, err)
			}
		}
	}
	return err
}

func (p *ContactPoint) writeField5(oprot thrift.TProtocol) (err error) {
	if p.System != nil {
		if p.IsSetSystem() {
			if err := oprot.WriteFieldBegin("system", thrift.STRUCT, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:system: %s", p, err)
			}
			if err := p.System.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.System)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:system: %s", p, err)
			}
		}
	}
	return err
}

func (p *ContactPoint) writeField6(oprot thrift.TProtocol) (err error) {
	if p.ContactPointUse != nil {
		if p.IsSetContactPointUse() {
			if err := oprot.WriteFieldBegin("contactPointUse", thrift.STRUCT, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:contactPointUse: %s", p, err)
			}
			if err := p.ContactPointUse.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.ContactPointUse)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:contactPointUse: %s", p, err)
			}
		}
	}
	return err
}

func (p *ContactPoint) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:value: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Value)); err != nil {
			return fmt.Errorf("%T.value (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:value: %s", p, err)
		}
	}
	return err
}

func (p *ContactPoint) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContactPoint(%+v)", *p)
}

type HumanName struct {
	Extension [][]byte `thrift:"extension,1"`
	Family    string   `thrift:"family,2"`
	Given     []string `thrift:"given,3"`
	Id        string   `thrift:"id,4"`
	Period    *Period  `thrift:"period,5"`
	Prefix    []string `thrift:"prefix,6"`
	Suffix    []string `thrift:"suffix,7"`
	Text      string   `thrift:"text,8"`
	NameUse   *NameUse `thrift:"nameUse,9"`
}

func NewHumanName() *HumanName {
	return &HumanName{}
}

func (p *HumanName) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *HumanName) IsSetFamily() bool {
	return p.Family != ""
}

func (p *HumanName) IsSetGiven() bool {
	return p.Given != nil && len(p.Given) > 0
}

func (p *HumanName) IsSetId() bool {
	return p.Id != ""
}

func (p *HumanName) IsSetPeriod() bool {
	return p.Period != nil
}

func (p *HumanName) IsSetPrefix() bool {
	return p.Prefix != nil && len(p.Prefix) > 0
}

func (p *HumanName) IsSetSuffix() bool {
	return p.Suffix != nil && len(p.Suffix) > 0
}

func (p *HumanName) IsSetText() bool {
	return p.Text != ""
}

func (p *HumanName) IsSetNameUse() bool {
	return p.NameUse != nil
}

func (p *HumanName) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *HumanName) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem14 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem14 = v
		}
		p.Extension = append(p.Extension, _elem14)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *HumanName) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Family = v
	}
	return nil
}

func (p *HumanName) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Given = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem15 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem15 = v
		}
		p.Given = append(p.Given, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *HumanName) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *HumanName) readField5(iprot thrift.TProtocol) error {
	p.Period = NewPeriod()
	if err := p.Period.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Period)
	}
	return nil
}

func (p *HumanName) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Prefix = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem16 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem16 = v
		}
		p.Prefix = append(p.Prefix, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *HumanName) readField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Suffix = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem17 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem17 = v
		}
		p.Suffix = append(p.Suffix, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *HumanName) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Text = v
	}
	return nil
}

func (p *HumanName) readField9(iprot thrift.TProtocol) error {
	p.NameUse = NewNameUse()
	if err := p.NameUse.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.NameUse)
	}
	return nil
}

func (p *HumanName) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("HumanName"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *HumanName) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *HumanName) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFamily() {
		if err := oprot.WriteFieldBegin("family", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:family: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Family)); err != nil {
			return fmt.Errorf("%T.family (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:family: %s", p, err)
		}
	}
	return err
}

func (p *HumanName) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Given != nil {
		if p.IsSetGiven() {
			if err := oprot.WriteFieldBegin("given", thrift.LIST, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:given: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.Given)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Given {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:given: %s", p, err)
			}
		}
	}
	return err
}

func (p *HumanName) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:id: %s", p, err)
		}
	}
	return err
}

func (p *HumanName) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Period != nil {
		if p.IsSetPeriod() {
			if err := oprot.WriteFieldBegin("period", thrift.STRUCT, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:period: %s", p, err)
			}
			if err := p.Period.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Period)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:period: %s", p, err)
			}
		}
	}
	return err
}

func (p *HumanName) writeField6(oprot thrift.TProtocol) (err error) {
	if p.Prefix != nil {
		if p.IsSetPrefix() {
			if err := oprot.WriteFieldBegin("prefix", thrift.LIST, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:prefix: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.Prefix)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Prefix {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:prefix: %s", p, err)
			}
		}
	}
	return err
}

func (p *HumanName) writeField7(oprot thrift.TProtocol) (err error) {
	if p.Suffix != nil {
		if p.IsSetSuffix() {
			if err := oprot.WriteFieldBegin("suffix", thrift.LIST, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:suffix: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.Suffix)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Suffix {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:suffix: %s", p, err)
			}
		}
	}
	return err
}

func (p *HumanName) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err := oprot.WriteFieldBegin("text", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:text: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Text)); err != nil {
			return fmt.Errorf("%T.text (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:text: %s", p, err)
		}
	}
	return err
}

func (p *HumanName) writeField9(oprot thrift.TProtocol) (err error) {
	if p.NameUse != nil {
		if p.IsSetNameUse() {
			if err := oprot.WriteFieldBegin("nameUse", thrift.STRUCT, 9); err != nil {
				return fmt.Errorf("%T write field begin error 9:nameUse: %s", p, err)
			}
			if err := p.NameUse.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.NameUse)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 9:nameUse: %s", p, err)
			}
		}
	}
	return err
}

func (p *HumanName) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HumanName(%+v)", *p)
}

type AdministrativeGender struct {
	Extension [][]byte                 `thrift:"extension,1"`
	Id        string                   `thrift:"id,2"`
	Value     AdministrativeGenderList `thrift:"value,3"`
}

func NewAdministrativeGender() *AdministrativeGender {
	return &AdministrativeGender{
		Value: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *AdministrativeGender) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *AdministrativeGender) IsSetId() bool {
	return p.Id != ""
}

func (p *AdministrativeGender) IsSetValue() bool {
	return int64(p.Value) != math.MinInt32-1
}

func (p *AdministrativeGender) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AdministrativeGender) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem18 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem18 = v
		}
		p.Extension = append(p.Extension, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *AdministrativeGender) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *AdministrativeGender) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = AdministrativeGenderList(v)
	}
	return nil
}

func (p *AdministrativeGender) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AdministrativeGender"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AdministrativeGender) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *AdministrativeGender) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *AdministrativeGender) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Value)); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *AdministrativeGender) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdministrativeGender(%+v)", *p)
}

type AddressType struct {
	Extension [][]byte        `thrift:"extension,1"`
	Id        string          `thrift:"id,2"`
	Value     AddressTypeList `thrift:"value,3"`
}

func NewAddressType() *AddressType {
	return &AddressType{
		Value: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *AddressType) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *AddressType) IsSetId() bool {
	return p.Id != ""
}

func (p *AddressType) IsSetValue() bool {
	return int64(p.Value) != math.MinInt32-1
}

func (p *AddressType) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddressType) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem19 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem19 = v
		}
		p.Extension = append(p.Extension, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *AddressType) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *AddressType) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = AddressTypeList(v)
	}
	return nil
}

func (p *AddressType) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddressType"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AddressType) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *AddressType) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *AddressType) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Value)); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *AddressType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddressType(%+v)", *p)
}

type AddressUse struct {
	Extension [][]byte       `thrift:"extension,1"`
	Id        string         `thrift:"id,2"`
	Value     AddressUseList `thrift:"value,3"`
}

func NewAddressUse() *AddressUse {
	return &AddressUse{
		Value: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *AddressUse) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *AddressUse) IsSetId() bool {
	return p.Id != ""
}

func (p *AddressUse) IsSetValue() bool {
	return int64(p.Value) != math.MinInt32-1
}

func (p *AddressUse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddressUse) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem20 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem20 = v
		}
		p.Extension = append(p.Extension, _elem20)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *AddressUse) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *AddressUse) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = AddressUseList(v)
	}
	return nil
}

func (p *AddressUse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddressUse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AddressUse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *AddressUse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *AddressUse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Value)); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *AddressUse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddressUse(%+v)", *p)
}

type Address struct {
	City       string       `thrift:"city,1"`
	Country    string       `thrift:"country,2"`
	District   string       `thrift:"district,3"`
	Extension  [][]byte     `thrift:"extension,4"`
	Id         string       `thrift:"id,5"`
	Line       []string     `thrift:"line,6"`
	Period     *Period      `thrift:"period,7"`
	PostalCode string       `thrift:"postalCode,8"`
	State      string       `thrift:"state,9"`
	Text       string       `thrift:"text,10"`
	TypeA1     *AddressType `thrift:"type,11"`
	AddressUse *AddressUse  `thrift:"addressUse,12"`
}

func NewAddress() *Address {
	return &Address{}
}

func (p *Address) IsSetCity() bool {
	return p.City != ""
}

func (p *Address) IsSetCountry() bool {
	return p.Country != ""
}

func (p *Address) IsSetDistrict() bool {
	return p.District != ""
}

func (p *Address) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Address) IsSetId() bool {
	return p.Id != ""
}

func (p *Address) IsSetLine() bool {
	return p.Line != nil && len(p.Line) > 0
}

func (p *Address) IsSetPeriod() bool {
	return p.Period != nil
}

func (p *Address) IsSetPostalCode() bool {
	return p.PostalCode != ""
}

func (p *Address) IsSetState() bool {
	return p.State != ""
}

func (p *Address) IsSetText() bool {
	return p.Text != ""
}

func (p *Address) IsSetTypeA1() bool {
	return p.TypeA1 != nil
}

func (p *Address) IsSetAddressUse() bool {
	return p.AddressUse != nil
}

func (p *Address) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Address) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.City = v
	}
	return nil
}

func (p *Address) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Country = v
	}
	return nil
}

func (p *Address) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.District = v
	}
	return nil
}

func (p *Address) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem21 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem21 = v
		}
		p.Extension = append(p.Extension, _elem21)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Address) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Address) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Line = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem22 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem22 = v
		}
		p.Line = append(p.Line, _elem22)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Address) readField7(iprot thrift.TProtocol) error {
	p.Period = NewPeriod()
	if err := p.Period.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Period)
	}
	return nil
}

func (p *Address) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.PostalCode = v
	}
	return nil
}

func (p *Address) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.State = v
	}
	return nil
}

func (p *Address) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.Text = v
	}
	return nil
}

func (p *Address) readField11(iprot thrift.TProtocol) error {
	p.TypeA1 = NewAddressType()
	if err := p.TypeA1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TypeA1)
	}
	return nil
}

func (p *Address) readField12(iprot thrift.TProtocol) error {
	p.AddressUse = NewAddressUse()
	if err := p.AddressUse.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.AddressUse)
	}
	return nil
}

func (p *Address) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Address"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Address) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCity() {
		if err := oprot.WriteFieldBegin("city", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:city: %s", p, err)
		}
		if err := oprot.WriteString(string(p.City)); err != nil {
			return fmt.Errorf("%T.city (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:city: %s", p, err)
		}
	}
	return err
}

func (p *Address) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCountry() {
		if err := oprot.WriteFieldBegin("country", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:country: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Country)); err != nil {
			return fmt.Errorf("%T.country (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:country: %s", p, err)
		}
	}
	return err
}

func (p *Address) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDistrict() {
		if err := oprot.WriteFieldBegin("district", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:district: %s", p, err)
		}
		if err := oprot.WriteString(string(p.District)); err != nil {
			return fmt.Errorf("%T.district (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:district: %s", p, err)
		}
	}
	return err
}

func (p *Address) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Address) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:id: %s", p, err)
		}
	}
	return err
}

func (p *Address) writeField6(oprot thrift.TProtocol) (err error) {
	if p.Line != nil {
		if p.IsSetLine() {
			if err := oprot.WriteFieldBegin("line", thrift.LIST, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:line: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRING, len(p.Line)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Line {
				if err := oprot.WriteString(string(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:line: %s", p, err)
			}
		}
	}
	return err
}

func (p *Address) writeField7(oprot thrift.TProtocol) (err error) {
	if p.Period != nil {
		if p.IsSetPeriod() {
			if err := oprot.WriteFieldBegin("period", thrift.STRUCT, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:period: %s", p, err)
			}
			if err := p.Period.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Period)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:period: %s", p, err)
			}
		}
	}
	return err
}

func (p *Address) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPostalCode() {
		if err := oprot.WriteFieldBegin("postalCode", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:postalCode: %s", p, err)
		}
		if err := oprot.WriteString(string(p.PostalCode)); err != nil {
			return fmt.Errorf("%T.postalCode (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:postalCode: %s", p, err)
		}
	}
	return err
}

func (p *Address) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetState() {
		if err := oprot.WriteFieldBegin("state", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:state: %s", p, err)
		}
		if err := oprot.WriteString(string(p.State)); err != nil {
			return fmt.Errorf("%T.state (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:state: %s", p, err)
		}
	}
	return err
}

func (p *Address) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err := oprot.WriteFieldBegin("text", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:text: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Text)); err != nil {
			return fmt.Errorf("%T.text (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:text: %s", p, err)
		}
	}
	return err
}

func (p *Address) writeField11(oprot thrift.TProtocol) (err error) {
	if p.TypeA1 != nil {
		if p.IsSetTypeA1() {
			if err := oprot.WriteFieldBegin("type", thrift.STRUCT, 11); err != nil {
				return fmt.Errorf("%T write field begin error 11:type: %s", p, err)
			}
			if err := p.TypeA1.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.TypeA1)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 11:type: %s", p, err)
			}
		}
	}
	return err
}

func (p *Address) writeField12(oprot thrift.TProtocol) (err error) {
	if p.AddressUse != nil {
		if p.IsSetAddressUse() {
			if err := oprot.WriteFieldBegin("addressUse", thrift.STRUCT, 12); err != nil {
				return fmt.Errorf("%T write field begin error 12:addressUse: %s", p, err)
			}
			if err := p.AddressUse.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.AddressUse)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 12:addressUse: %s", p, err)
			}
		}
	}
	return err
}

func (p *Address) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Address(%+v)", *p)
}

type Patient_Contact struct {
	Address           *Address              `thrift:"address,1"`
	Extension         [][]byte              `thrift:"extension,2"`
	Gender            *AdministrativeGender `thrift:"gender,3"`
	Id                string                `thrift:"id,4"`
	ModifierExtension [][]byte              `thrift:"modifierExtension,5"`
	Name              *HumanName            `thrift:"name,6"`
	Organization      *Reference            `thrift:"organization,7"`
	Period            *Period               `thrift:"period,8"`
	Relationship      []*CodeableConcept    `thrift:"relationship,9"`
	Telecom           []*ContactPoint       `thrift:"telecom,10"`
}

func NewPatient_Contact() *Patient_Contact {
	return &Patient_Contact{}
}

func (p *Patient_Contact) IsSetAddress() bool {
	return p.Address != nil
}

func (p *Patient_Contact) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Patient_Contact) IsSetGender() bool {
	return p.Gender != nil
}

func (p *Patient_Contact) IsSetId() bool {
	return p.Id != ""
}

func (p *Patient_Contact) IsSetModifierExtension() bool {
	return p.ModifierExtension != nil && len(p.ModifierExtension) > 0
}

func (p *Patient_Contact) IsSetName() bool {
	return p.Name != nil
}

func (p *Patient_Contact) IsSetOrganization() bool {
	return p.Organization != nil
}

func (p *Patient_Contact) IsSetPeriod() bool {
	return p.Period != nil
}

func (p *Patient_Contact) IsSetRelationship() bool {
	return p.Relationship != nil && len(p.Relationship) > 0
}

func (p *Patient_Contact) IsSetTelecom() bool {
	return p.Telecom != nil && len(p.Telecom) > 0
}

func (p *Patient_Contact) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Patient_Contact) readField1(iprot thrift.TProtocol) error {
	p.Address = NewAddress()
	if err := p.Address.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Address)
	}
	return nil
}

func (p *Patient_Contact) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem23 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem23 = v
		}
		p.Extension = append(p.Extension, _elem23)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient_Contact) readField3(iprot thrift.TProtocol) error {
	p.Gender = NewAdministrativeGender()
	if err := p.Gender.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Gender)
	}
	return nil
}

func (p *Patient_Contact) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Patient_Contact) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ModifierExtension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem24 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem24 = v
		}
		p.ModifierExtension = append(p.ModifierExtension, _elem24)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient_Contact) readField6(iprot thrift.TProtocol) error {
	p.Name = NewHumanName()
	if err := p.Name.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Name)
	}
	return nil
}

func (p *Patient_Contact) readField7(iprot thrift.TProtocol) error {
	p.Organization = NewReference()
	if err := p.Organization.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Organization)
	}
	return nil
}

func (p *Patient_Contact) readField8(iprot thrift.TProtocol) error {
	p.Period = NewPeriod()
	if err := p.Period.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Period)
	}
	return nil
}

func (p *Patient_Contact) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Relationship = make([]*CodeableConcept, 0, size)
	for i := 0; i < size; i++ {
		_elem25 := NewCodeableConcept()
		if err := _elem25.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem25)
		}
		p.Relationship = append(p.Relationship, _elem25)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient_Contact) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Telecom = make([]*ContactPoint, 0, size)
	for i := 0; i < size; i++ {
		_elem26 := NewContactPoint()
		if err := _elem26.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem26)
		}
		p.Telecom = append(p.Telecom, _elem26)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient_Contact) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Patient_Contact"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Patient_Contact) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Address != nil {
		if p.IsSetAddress() {
			if err := oprot.WriteFieldBegin("address", thrift.STRUCT, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:address: %s", p, err)
			}
			if err := p.Address.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Address)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:address: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Contact) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Contact) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Gender != nil {
		if p.IsSetGender() {
			if err := oprot.WriteFieldBegin("gender", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:gender: %s", p, err)
			}
			if err := p.Gender.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Gender)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:gender: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Contact) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:id: %s", p, err)
		}
	}
	return err
}

func (p *Patient_Contact) writeField5(oprot thrift.TProtocol) (err error) {
	if p.ModifierExtension != nil {
		if p.IsSetModifierExtension() {
			if err := oprot.WriteFieldBegin("modifierExtension", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:modifierExtension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.ModifierExtension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ModifierExtension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:modifierExtension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Contact) writeField6(oprot thrift.TProtocol) (err error) {
	if p.Name != nil {
		if p.IsSetName() {
			if err := oprot.WriteFieldBegin("name", thrift.STRUCT, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:name: %s", p, err)
			}
			if err := p.Name.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Name)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:name: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Contact) writeField7(oprot thrift.TProtocol) (err error) {
	if p.Organization != nil {
		if p.IsSetOrganization() {
			if err := oprot.WriteFieldBegin("organization", thrift.STRUCT, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:organization: %s", p, err)
			}
			if err := p.Organization.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Organization)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:organization: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Contact) writeField8(oprot thrift.TProtocol) (err error) {
	if p.Period != nil {
		if p.IsSetPeriod() {
			if err := oprot.WriteFieldBegin("period", thrift.STRUCT, 8); err != nil {
				return fmt.Errorf("%T write field begin error 8:period: %s", p, err)
			}
			if err := p.Period.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Period)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 8:period: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Contact) writeField9(oprot thrift.TProtocol) (err error) {
	if p.Relationship != nil {
		if p.IsSetRelationship() {
			if err := oprot.WriteFieldBegin("relationship", thrift.LIST, 9); err != nil {
				return fmt.Errorf("%T write field begin error 9:relationship: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Relationship)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Relationship {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 9:relationship: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Contact) writeField10(oprot thrift.TProtocol) (err error) {
	if p.Telecom != nil {
		if p.IsSetTelecom() {
			if err := oprot.WriteFieldBegin("telecom", thrift.LIST, 10); err != nil {
				return fmt.Errorf("%T write field begin error 10:telecom: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Telecom)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Telecom {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 10:telecom: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Contact) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Patient_Contact(%+v)", *p)
}

type LinkType struct {
	Extension [][]byte     `thrift:"extension,1"`
	Id        string       `thrift:"id,2"`
	Value     LinkTypeList `thrift:"value,3"`
}

func NewLinkType() *LinkType {
	return &LinkType{
		Value: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *LinkType) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *LinkType) IsSetId() bool {
	return p.Id != ""
}

func (p *LinkType) IsSetValue() bool {
	return int64(p.Value) != math.MinInt32-1
}

func (p *LinkType) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LinkType) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem27 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem27 = v
		}
		p.Extension = append(p.Extension, _elem27)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *LinkType) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *LinkType) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = LinkTypeList(v)
	}
	return nil
}

func (p *LinkType) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LinkType"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *LinkType) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *LinkType) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *LinkType) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Value)); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *LinkType) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkType(%+v)", *p)
}

type Patient_Link struct {
	Extension         [][]byte   `thrift:"extension,1"`
	Id                string     `thrift:"id,2"`
	ModifierExtension [][]byte   `thrift:"modifierExtension,3"`
	Other             *Reference `thrift:"other,4,required"`
	TypeA1            *LinkType  `thrift:"type,5,required"`
}

func NewPatient_Link() *Patient_Link {
	return &Patient_Link{}
}

func (p *Patient_Link) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Patient_Link) IsSetId() bool {
	return p.Id != ""
}

func (p *Patient_Link) IsSetModifierExtension() bool {
	return p.ModifierExtension != nil && len(p.ModifierExtension) > 0
}

func (p *Patient_Link) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Patient_Link) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem28 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem28 = v
		}
		p.Extension = append(p.Extension, _elem28)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient_Link) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Patient_Link) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ModifierExtension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem29 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem29 = v
		}
		p.ModifierExtension = append(p.ModifierExtension, _elem29)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient_Link) readField4(iprot thrift.TProtocol) error {
	p.Other = NewReference()
	if err := p.Other.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Other)
	}
	return nil
}

func (p *Patient_Link) readField5(iprot thrift.TProtocol) error {
	p.TypeA1 = NewLinkType()
	if err := p.TypeA1.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TypeA1)
	}
	return nil
}

func (p *Patient_Link) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Patient_Link"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Patient_Link) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Link) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *Patient_Link) writeField3(oprot thrift.TProtocol) (err error) {
	if p.ModifierExtension != nil {
		if p.IsSetModifierExtension() {
			if err := oprot.WriteFieldBegin("modifierExtension", thrift.LIST, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:modifierExtension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.ModifierExtension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ModifierExtension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:modifierExtension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Link) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Other != nil {
		if err := oprot.WriteFieldBegin("other", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:other: %s", p, err)
		}
		if err := p.Other.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Other)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:other: %s", p, err)
		}
	}
	return err
}

func (p *Patient_Link) writeField5(oprot thrift.TProtocol) (err error) {
	if p.TypeA1 != nil {
		if err := oprot.WriteFieldBegin("type", thrift.STRUCT, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:type: %s", p, err)
		}
		if err := p.TypeA1.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.TypeA1)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:type: %s", p, err)
		}
	}
	return err
}

func (p *Patient_Link) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Patient_Link(%+v)", *p)
}

type Patient_Animal struct {
	Breed             *CodeableConcept `thrift:"breed,1"`
	Extension         [][]byte         `thrift:"extension,2"`
	GenderStatus      *CodeableConcept `thrift:"genderStatus,3"`
	Id                string           `thrift:"id,4"`
	ModifierExtension [][]byte         `thrift:"modifierExtension,5"`
	Species           *CodeableConcept `thrift:"species,6,required"`
}

func NewPatient_Animal() *Patient_Animal {
	return &Patient_Animal{}
}

func (p *Patient_Animal) IsSetBreed() bool {
	return p.Breed != nil
}

func (p *Patient_Animal) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Patient_Animal) IsSetGenderStatus() bool {
	return p.GenderStatus != nil
}

func (p *Patient_Animal) IsSetId() bool {
	return p.Id != ""
}

func (p *Patient_Animal) IsSetModifierExtension() bool {
	return p.ModifierExtension != nil && len(p.ModifierExtension) > 0
}

func (p *Patient_Animal) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Patient_Animal) readField1(iprot thrift.TProtocol) error {
	p.Breed = NewCodeableConcept()
	if err := p.Breed.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Breed)
	}
	return nil
}

func (p *Patient_Animal) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem30 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem30 = v
		}
		p.Extension = append(p.Extension, _elem30)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient_Animal) readField3(iprot thrift.TProtocol) error {
	p.GenderStatus = NewCodeableConcept()
	if err := p.GenderStatus.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.GenderStatus)
	}
	return nil
}

func (p *Patient_Animal) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Patient_Animal) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ModifierExtension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem31 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem31 = v
		}
		p.ModifierExtension = append(p.ModifierExtension, _elem31)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient_Animal) readField6(iprot thrift.TProtocol) error {
	p.Species = NewCodeableConcept()
	if err := p.Species.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Species)
	}
	return nil
}

func (p *Patient_Animal) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Patient_Animal"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Patient_Animal) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Breed != nil {
		if p.IsSetBreed() {
			if err := oprot.WriteFieldBegin("breed", thrift.STRUCT, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:breed: %s", p, err)
			}
			if err := p.Breed.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Breed)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:breed: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Animal) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Animal) writeField3(oprot thrift.TProtocol) (err error) {
	if p.GenderStatus != nil {
		if p.IsSetGenderStatus() {
			if err := oprot.WriteFieldBegin("genderStatus", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:genderStatus: %s", p, err)
			}
			if err := p.GenderStatus.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.GenderStatus)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:genderStatus: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Animal) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:id: %s", p, err)
		}
	}
	return err
}

func (p *Patient_Animal) writeField5(oprot thrift.TProtocol) (err error) {
	if p.ModifierExtension != nil {
		if p.IsSetModifierExtension() {
			if err := oprot.WriteFieldBegin("modifierExtension", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:modifierExtension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.ModifierExtension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ModifierExtension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:modifierExtension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Animal) writeField6(oprot thrift.TProtocol) (err error) {
	if p.Species != nil {
		if err := oprot.WriteFieldBegin("species", thrift.STRUCT, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:species: %s", p, err)
		}
		if err := p.Species.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Species)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:species: %s", p, err)
		}
	}
	return err
}

func (p *Patient_Animal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Patient_Animal(%+v)", *p)
}

type Patient_Communication struct {
	Extension         [][]byte         `thrift:"extension,1"`
	Id                string           `thrift:"id,2"`
	Language          *CodeableConcept `thrift:"language,3,required"`
	ModifierExtension [][]byte         `thrift:"modifierExtension,4"`
	Preferred         bool             `thrift:"preferred,5"`
}

func NewPatient_Communication() *Patient_Communication {
	return &Patient_Communication{}
}

func (p *Patient_Communication) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Patient_Communication) IsSetId() bool {
	return p.Id != ""
}

func (p *Patient_Communication) IsSetModifierExtension() bool {
	return p.ModifierExtension != nil && len(p.ModifierExtension) > 0
}

func (p *Patient_Communication) IsSetPreferred() bool {
	return p.Preferred != false
}

func (p *Patient_Communication) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Patient_Communication) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem32 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem32 = v
		}
		p.Extension = append(p.Extension, _elem32)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient_Communication) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Patient_Communication) readField3(iprot thrift.TProtocol) error {
	p.Language = NewCodeableConcept()
	if err := p.Language.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Language)
	}
	return nil
}

func (p *Patient_Communication) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ModifierExtension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem33 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem33 = v
		}
		p.ModifierExtension = append(p.ModifierExtension, _elem33)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient_Communication) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Preferred = v
	}
	return nil
}

func (p *Patient_Communication) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Patient_Communication"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Patient_Communication) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Communication) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *Patient_Communication) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Language != nil {
		if err := oprot.WriteFieldBegin("language", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:language: %s", p, err)
		}
		if err := p.Language.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Language)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:language: %s", p, err)
		}
	}
	return err
}

func (p *Patient_Communication) writeField4(oprot thrift.TProtocol) (err error) {
	if p.ModifierExtension != nil {
		if p.IsSetModifierExtension() {
			if err := oprot.WriteFieldBegin("modifierExtension", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:modifierExtension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.ModifierExtension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ModifierExtension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:modifierExtension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient_Communication) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreferred() {
		if err := oprot.WriteFieldBegin("preferred", thrift.BOOL, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:preferred: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Preferred)); err != nil {
			return fmt.Errorf("%T.preferred (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:preferred: %s", p, err)
		}
	}
	return err
}

func (p *Patient_Communication) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Patient_Communication(%+v)", *p)
}

type Id struct {
	Extension [][]byte `thrift:"extension,1"`
	Id        string   `thrift:"id,2"`
	Value     string   `thrift:"value,3"`
}

func NewId() *Id {
	return &Id{}
}

func (p *Id) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Id) IsSetId() bool {
	return p.Id != ""
}

func (p *Id) IsSetValue() bool {
	return p.Value != ""
}

func (p *Id) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Id) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem34 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem34 = v
		}
		p.Extension = append(p.Extension, _elem34)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Id) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Id) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = v
	}
	return nil
}

func (p *Id) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("id"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Id) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Id) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *Id) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Value)); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *Id) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Id(%+v)", *p)
}

type Instant struct {
	Extension [][]byte `thrift:"extension,1"`
	Id        string   `thrift:"id,2"`
	Value     int64    `thrift:"value,3"`
}

func NewInstant() *Instant {
	return &Instant{}
}

func (p *Instant) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Instant) IsSetId() bool {
	return p.Id != ""
}

func (p *Instant) IsSetValue() bool {
	return p.Value != 0
}

func (p *Instant) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Instant) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem35 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem35 = v
		}
		p.Extension = append(p.Extension, _elem35)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Instant) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Instant) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = v
	}
	return nil
}

func (p *Instant) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("instant"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Instant) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Instant) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *Instant) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Value)); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *Instant) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Instant(%+v)", *p)
}

type Meta struct {
	Extension   [][]byte  `thrift:"extension,1"`
	Id          string    `thrift:"id,2"`
	LastUpdated *Instant  `thrift:"lastUpdated,3"`
	Profile     []*Uri    `thrift:"profile,4"`
	Security    []*Coding `thrift:"security,5"`
	Tag         []*Coding `thrift:"tag,6"`
	VersionId   *Id       `thrift:"versionId,7"`
}

func NewMeta() *Meta {
	return &Meta{}
}

func (p *Meta) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Meta) IsSetId() bool {
	return p.Id != ""
}

func (p *Meta) IsSetLastUpdated() bool {
	return p.LastUpdated != nil
}

func (p *Meta) IsSetProfile() bool {
	return p.Profile != nil && len(p.Profile) > 0
}

func (p *Meta) IsSetSecurity() bool {
	return p.Security != nil && len(p.Security) > 0
}

func (p *Meta) IsSetTag() bool {
	return p.Tag != nil && len(p.Tag) > 0
}

func (p *Meta) IsSetVersionId() bool {
	return p.VersionId != nil
}

func (p *Meta) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Meta) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem36 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem36 = v
		}
		p.Extension = append(p.Extension, _elem36)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Meta) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Meta) readField3(iprot thrift.TProtocol) error {
	p.LastUpdated = NewInstant()
	if err := p.LastUpdated.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.LastUpdated)
	}
	return nil
}

func (p *Meta) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Profile = make([]*Uri, 0, size)
	for i := 0; i < size; i++ {
		_elem37 := NewUri()
		if err := _elem37.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem37)
		}
		p.Profile = append(p.Profile, _elem37)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Meta) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Security = make([]*Coding, 0, size)
	for i := 0; i < size; i++ {
		_elem38 := NewCoding()
		if err := _elem38.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem38)
		}
		p.Security = append(p.Security, _elem38)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Meta) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Tag = make([]*Coding, 0, size)
	for i := 0; i < size; i++ {
		_elem39 := NewCoding()
		if err := _elem39.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem39)
		}
		p.Tag = append(p.Tag, _elem39)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Meta) readField7(iprot thrift.TProtocol) error {
	p.VersionId = NewId()
	if err := p.VersionId.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.VersionId)
	}
	return nil
}

func (p *Meta) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Meta"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Meta) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Meta) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *Meta) writeField3(oprot thrift.TProtocol) (err error) {
	if p.LastUpdated != nil {
		if p.IsSetLastUpdated() {
			if err := oprot.WriteFieldBegin("lastUpdated", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:lastUpdated: %s", p, err)
			}
			if err := p.LastUpdated.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.LastUpdated)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:lastUpdated: %s", p, err)
			}
		}
	}
	return err
}

func (p *Meta) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Profile != nil {
		if p.IsSetProfile() {
			if err := oprot.WriteFieldBegin("profile", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:profile: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Profile)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Profile {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:profile: %s", p, err)
			}
		}
	}
	return err
}

func (p *Meta) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Security != nil {
		if p.IsSetSecurity() {
			if err := oprot.WriteFieldBegin("security", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:security: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Security)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Security {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:security: %s", p, err)
			}
		}
	}
	return err
}

func (p *Meta) writeField6(oprot thrift.TProtocol) (err error) {
	if p.Tag != nil {
		if p.IsSetTag() {
			if err := oprot.WriteFieldBegin("tag", thrift.LIST, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:tag: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tag)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Tag {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:tag: %s", p, err)
			}
		}
	}
	return err
}

func (p *Meta) writeField7(oprot thrift.TProtocol) (err error) {
	if p.VersionId != nil {
		if p.IsSetVersionId() {
			if err := oprot.WriteFieldBegin("versionId", thrift.STRUCT, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:versionId: %s", p, err)
			}
			if err := p.VersionId.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.VersionId)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:versionId: %s", p, err)
			}
		}
	}
	return err
}

func (p *Meta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Meta(%+v)", *p)
}

type NarrativeStatus struct {
	Extension [][]byte            `thrift:"extension,1"`
	Id        string              `thrift:"id,2"`
	Value     NarrativeStatusList `thrift:"value,3"`
}

func NewNarrativeStatus() *NarrativeStatus {
	return &NarrativeStatus{
		Value: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *NarrativeStatus) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *NarrativeStatus) IsSetId() bool {
	return p.Id != ""
}

func (p *NarrativeStatus) IsSetValue() bool {
	return int64(p.Value) != math.MinInt32-1
}

func (p *NarrativeStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NarrativeStatus) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem40 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem40 = v
		}
		p.Extension = append(p.Extension, _elem40)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *NarrativeStatus) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *NarrativeStatus) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = NarrativeStatusList(v)
	}
	return nil
}

func (p *NarrativeStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NarrativeStatus"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *NarrativeStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *NarrativeStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:id: %s", p, err)
		}
	}
	return err
}

func (p *NarrativeStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Value)); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *NarrativeStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NarrativeStatus(%+v)", *p)
}

type Narrative struct {
	Div       string           `thrift:"div,1,required"`
	Extension [][]byte         `thrift:"extension,2"`
	Id        string           `thrift:"id,3"`
	Status    *NarrativeStatus `thrift:"status,4,required"`
}

func NewNarrative() *Narrative {
	return &Narrative{}
}

func (p *Narrative) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Narrative) IsSetId() bool {
	return p.Id != ""
}

func (p *Narrative) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Narrative) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Div = v
	}
	return nil
}

func (p *Narrative) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem41 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem41 = v
		}
		p.Extension = append(p.Extension, _elem41)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Narrative) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Narrative) readField4(iprot thrift.TProtocol) error {
	p.Status = NewNarrativeStatus()
	if err := p.Status.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Status)
	}
	return nil
}

func (p *Narrative) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Narrative"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Narrative) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("div", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:div: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Div)); err != nil {
		return fmt.Errorf("%T.div (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:div: %s", p, err)
	}
	return err
}

func (p *Narrative) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Narrative) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:id: %s", p, err)
		}
	}
	return err
}

func (p *Narrative) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Status != nil {
		if err := oprot.WriteFieldBegin("status", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:status: %s", p, err)
		}
		if err := p.Status.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Status)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:status: %s", p, err)
		}
	}
	return err
}

func (p *Narrative) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Narrative(%+v)", *p)
}

type Attachment struct {
	ContentType *Code    `thrift:"contentType,1"`
	Creation    int64    `thrift:"creation,2"`
	Data        []byte   `thrift:"data,3"`
	Extension   [][]byte `thrift:"extension,4"`
	Hash        []byte   `thrift:"hash,5"`
	Id          string   `thrift:"id,6"`
	Language    *Code    `thrift:"language,7"`
	Size        int32    `thrift:"size,8"`
	Title       string   `thrift:"title,9"`
	Url         *Uri     `thrift:"url,10"`
}

func NewAttachment() *Attachment {
	return &Attachment{}
}

func (p *Attachment) IsSetContentType() bool {
	return p.ContentType != nil
}

func (p *Attachment) IsSetCreation() bool {
	return p.Creation != 0
}

func (p *Attachment) IsSetData() bool {
	return p.Data != nil
}

func (p *Attachment) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Attachment) IsSetHash() bool {
	return p.Hash != nil
}

func (p *Attachment) IsSetId() bool {
	return p.Id != ""
}

func (p *Attachment) IsSetLanguage() bool {
	return p.Language != nil
}

func (p *Attachment) IsSetSize() bool {
	return p.Size != 0
}

func (p *Attachment) IsSetTitle() bool {
	return p.Title != ""
}

func (p *Attachment) IsSetUrl() bool {
	return p.Url != nil
}

func (p *Attachment) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Attachment) readField1(iprot thrift.TProtocol) error {
	p.ContentType = NewCode()
	if err := p.ContentType.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ContentType)
	}
	return nil
}

func (p *Attachment) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Creation = v
	}
	return nil
}

func (p *Attachment) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Data = v
	}
	return nil
}

func (p *Attachment) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem42 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem42 = v
		}
		p.Extension = append(p.Extension, _elem42)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Attachment) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Hash = v
	}
	return nil
}

func (p *Attachment) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *Attachment) readField7(iprot thrift.TProtocol) error {
	p.Language = NewCode()
	if err := p.Language.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Language)
	}
	return nil
}

func (p *Attachment) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Size = v
	}
	return nil
}

func (p *Attachment) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.Title = v
	}
	return nil
}

func (p *Attachment) readField10(iprot thrift.TProtocol) error {
	p.Url = NewUri()
	if err := p.Url.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Url)
	}
	return nil
}

func (p *Attachment) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Attachment"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Attachment) writeField1(oprot thrift.TProtocol) (err error) {
	if p.ContentType != nil {
		if p.IsSetContentType() {
			if err := oprot.WriteFieldBegin("contentType", thrift.STRUCT, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:contentType: %s", p, err)
			}
			if err := p.ContentType.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.ContentType)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:contentType: %s", p, err)
			}
		}
	}
	return err
}

func (p *Attachment) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreation() {
		if err := oprot.WriteFieldBegin("creation", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:creation: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Creation)); err != nil {
			return fmt.Errorf("%T.creation (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:creation: %s", p, err)
		}
	}
	return err
}

func (p *Attachment) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Data != nil {
		if p.IsSetData() {
			if err := oprot.WriteFieldBegin("data", thrift.BINARY, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:data: %s", p, err)
			}
			if err := oprot.WriteBinary(p.Data); err != nil {
				return fmt.Errorf("%T.data (3) field write error: %s", p)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:data: %s", p, err)
			}
		}
	}
	return err
}

func (p *Attachment) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Attachment) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Hash != nil {
		if p.IsSetHash() {
			if err := oprot.WriteFieldBegin("hash", thrift.BINARY, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:hash: %s", p, err)
			}
			if err := oprot.WriteBinary(p.Hash); err != nil {
				return fmt.Errorf("%T.hash (5) field write error: %s", p)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:hash: %s", p, err)
			}
		}
	}
	return err
}

func (p *Attachment) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Id)); err != nil {
			return fmt.Errorf("%T.id (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:id: %s", p, err)
		}
	}
	return err
}

func (p *Attachment) writeField7(oprot thrift.TProtocol) (err error) {
	if p.Language != nil {
		if p.IsSetLanguage() {
			if err := oprot.WriteFieldBegin("language", thrift.STRUCT, 7); err != nil {
				return fmt.Errorf("%T write field begin error 7:language: %s", p, err)
			}
			if err := p.Language.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Language)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 7:language: %s", p, err)
			}
		}
	}
	return err
}

func (p *Attachment) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSize() {
		if err := oprot.WriteFieldBegin("size", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:size: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Size)); err != nil {
			return fmt.Errorf("%T.size (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:size: %s", p, err)
		}
	}
	return err
}

func (p *Attachment) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:title: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Title)); err != nil {
			return fmt.Errorf("%T.title (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:title: %s", p, err)
		}
	}
	return err
}

func (p *Attachment) writeField10(oprot thrift.TProtocol) (err error) {
	if p.Url != nil {
		if p.IsSetUrl() {
			if err := oprot.WriteFieldBegin("url", thrift.STRUCT, 10); err != nil {
				return fmt.Errorf("%T write field begin error 10:url: %s", p, err)
			}
			if err := p.Url.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Url)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 10:url: %s", p, err)
			}
		}
	}
	return err
}

func (p *Attachment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Attachment(%+v)", *p)
}

type Patient struct {
	Active        bool                     `thrift:"active,1"`
	Address       []*Address               `thrift:"address,2"`
	Animal        *Patient_Animal          `thrift:"animal,3"`
	BirthDate     int32                    `thrift:"birthDate,4"`
	Communication []*Patient_Communication `thrift:"communication,5"`
	Contact       []*Patient_Contact       `thrift:"contact,6"`
	// unused field # 7
	DeceasedBoolean      bool                  `thrift:"deceasedBoolean,8"`
	DeceasedDateTime     int64                 `thrift:"deceasedDateTime,9"`
	Extension            [][]byte              `thrift:"extension,10"`
	Gender               *AdministrativeGender `thrift:"gender,11"`
	GeneralPractitioner  []*Reference          `thrift:"generalPractitioner,12"`
	_id                  *Id                   `thrift:"_id,13"`
	Identifier           []*Identifier         `thrift:"identifier,14"`
	ImplicitRules        *Uri                  `thrift:"implicitRules,15"`
	Language             *Code                 `thrift:"language,16"`
	Link                 []*Patient_Link       `thrift:"link,17"`
	ManagingOrganization *Reference            `thrift:"managingOrganization,18"`
	MaritalStatus        *CodeableConcept      `thrift:"maritalStatus,19"`
	Meta                 *Meta                 `thrift:"meta,20"`
	ModifierExtension    [][]byte              `thrift:"modifierExtension,21"`
	MultipleBirthBoolean bool                  `thrift:"multipleBirthBoolean,22"`
	MultipleBirthInteger int64                 `thrift:"multipleBirthInteger,23"`
	Name                 []*HumanName          `thrift:"name,24"`
	Photo                []*Attachment         `thrift:"photo,25"`
	Telecom              []*ContactPoint       `thrift:"telecom,26"`
	Text                 *Narrative            `thrift:"text,27"`
}

func NewPatient() *Patient {
	return &Patient{}
}

func (p *Patient) IsSetActive() bool {
	return p.Active != false
}

func (p *Patient) IsSetAddress() bool {
	return p.Address != nil && len(p.Address) > 0
}

func (p *Patient) IsSetAnimal() bool {
	return p.Animal != nil
}

func (p *Patient) IsSetBirthDate() bool {
	return p.BirthDate != 0
}

func (p *Patient) IsSetCommunication() bool {
	return p.Communication != nil && len(p.Communication) > 0
}

func (p *Patient) IsSetContact() bool {
	return p.Contact != nil && len(p.Contact) > 0
}

func (p *Patient) IsSetDeceasedBoolean() bool {
	return p.DeceasedBoolean != false
}

func (p *Patient) IsSetDeceasedDateTime() bool {
	return p.DeceasedDateTime != 0
}

func (p *Patient) IsSetExtension() bool {
	return p.Extension != nil && len(p.Extension) > 0
}

func (p *Patient) IsSetGender() bool {
	return p.Gender != nil
}

func (p *Patient) IsSetGeneralPractitioner() bool {
	return p.GeneralPractitioner != nil && len(p.GeneralPractitioner) > 0
}

func (p *Patient) IsSet_id() bool {
	return p._id != nil
}

func (p *Patient) IsSetIdentifier() bool {
	return p.Identifier != nil && len(p.Identifier) > 0
}

func (p *Patient) IsSetImplicitRules() bool {
	return p.ImplicitRules != nil
}

func (p *Patient) IsSetLanguage() bool {
	return p.Language != nil
}

func (p *Patient) IsSetLink() bool {
	return p.Link != nil && len(p.Link) > 0
}

func (p *Patient) IsSetManagingOrganization() bool {
	return p.ManagingOrganization != nil
}

func (p *Patient) IsSetMaritalStatus() bool {
	return p.MaritalStatus != nil
}

func (p *Patient) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *Patient) IsSetModifierExtension() bool {
	return p.ModifierExtension != nil && len(p.ModifierExtension) > 0
}

func (p *Patient) IsSetMultipleBirthBoolean() bool {
	return p.MultipleBirthBoolean != false
}

func (p *Patient) IsSetMultipleBirthInteger() bool {
	return p.MultipleBirthInteger != 0
}

func (p *Patient) IsSetName() bool {
	return p.Name != nil && len(p.Name) > 0
}

func (p *Patient) IsSetPhoto() bool {
	return p.Photo != nil && len(p.Photo) > 0
}

func (p *Patient) IsSetTelecom() bool {
	return p.Telecom != nil && len(p.Telecom) > 0
}

func (p *Patient) IsSetText() bool {
	return p.Text != nil
}

func (p *Patient) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		case 18:
			if err := p.readField18(iprot); err != nil {
				return err
			}
		case 19:
			if err := p.readField19(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.readField20(iprot); err != nil {
				return err
			}
		case 21:
			if err := p.readField21(iprot); err != nil {
				return err
			}
		case 22:
			if err := p.readField22(iprot); err != nil {
				return err
			}
		case 23:
			if err := p.readField23(iprot); err != nil {
				return err
			}
		case 24:
			if err := p.readField24(iprot); err != nil {
				return err
			}
		case 25:
			if err := p.readField25(iprot); err != nil {
				return err
			}
		case 26:
			if err := p.readField26(iprot); err != nil {
				return err
			}
		case 27:
			if err := p.readField27(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Patient) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Active = v
	}
	return nil
}

func (p *Patient) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Address = make([]*Address, 0, size)
	for i := 0; i < size; i++ {
		_elem43 := NewAddress()
		if err := _elem43.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem43)
		}
		p.Address = append(p.Address, _elem43)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient) readField3(iprot thrift.TProtocol) error {
	p.Animal = NewPatient_Animal()
	if err := p.Animal.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Animal)
	}
	return nil
}

func (p *Patient) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.BirthDate = v
	}
	return nil
}

func (p *Patient) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Communication = make([]*Patient_Communication, 0, size)
	for i := 0; i < size; i++ {
		_elem44 := NewPatient_Communication()
		if err := _elem44.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem44)
		}
		p.Communication = append(p.Communication, _elem44)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Contact = make([]*Patient_Contact, 0, size)
	for i := 0; i < size; i++ {
		_elem45 := NewPatient_Contact()
		if err := _elem45.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem45)
		}
		p.Contact = append(p.Contact, _elem45)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.DeceasedBoolean = v
	}
	return nil
}

func (p *Patient) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.DeceasedDateTime = v
	}
	return nil
}

func (p *Patient) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Extension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem46 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem46 = v
		}
		p.Extension = append(p.Extension, _elem46)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient) readField11(iprot thrift.TProtocol) error {
	p.Gender = NewAdministrativeGender()
	if err := p.Gender.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Gender)
	}
	return nil
}

func (p *Patient) readField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.GeneralPractitioner = make([]*Reference, 0, size)
	for i := 0; i < size; i++ {
		_elem47 := NewReference()
		if err := _elem47.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem47)
		}
		p.GeneralPractitioner = append(p.GeneralPractitioner, _elem47)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient) readField13(iprot thrift.TProtocol) error {
	p._id = NewId()
	if err := p._id.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p._id)
	}
	return nil
}

func (p *Patient) readField14(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Identifier = make([]*Identifier, 0, size)
	for i := 0; i < size; i++ {
		_elem48 := NewIdentifier()
		if err := _elem48.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem48)
		}
		p.Identifier = append(p.Identifier, _elem48)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient) readField15(iprot thrift.TProtocol) error {
	p.ImplicitRules = NewUri()
	if err := p.ImplicitRules.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ImplicitRules)
	}
	return nil
}

func (p *Patient) readField16(iprot thrift.TProtocol) error {
	p.Language = NewCode()
	if err := p.Language.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Language)
	}
	return nil
}

func (p *Patient) readField17(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Link = make([]*Patient_Link, 0, size)
	for i := 0; i < size; i++ {
		_elem49 := NewPatient_Link()
		if err := _elem49.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem49)
		}
		p.Link = append(p.Link, _elem49)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient) readField18(iprot thrift.TProtocol) error {
	p.ManagingOrganization = NewReference()
	if err := p.ManagingOrganization.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ManagingOrganization)
	}
	return nil
}

func (p *Patient) readField19(iprot thrift.TProtocol) error {
	p.MaritalStatus = NewCodeableConcept()
	if err := p.MaritalStatus.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.MaritalStatus)
	}
	return nil
}

func (p *Patient) readField20(iprot thrift.TProtocol) error {
	p.Meta = NewMeta()
	if err := p.Meta.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Meta)
	}
	return nil
}

func (p *Patient) readField21(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.ModifierExtension = make([][]byte, 0, size)
	for i := 0; i < size; i++ {
		var _elem50 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem50 = v
		}
		p.ModifierExtension = append(p.ModifierExtension, _elem50)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient) readField22(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 22: %s")
	} else {
		p.MultipleBirthBoolean = v
	}
	return nil
}

func (p *Patient) readField23(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 23: %s")
	} else {
		p.MultipleBirthInteger = v
	}
	return nil
}

func (p *Patient) readField24(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Name = make([]*HumanName, 0, size)
	for i := 0; i < size; i++ {
		_elem51 := NewHumanName()
		if err := _elem51.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem51)
		}
		p.Name = append(p.Name, _elem51)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient) readField25(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Photo = make([]*Attachment, 0, size)
	for i := 0; i < size; i++ {
		_elem52 := NewAttachment()
		if err := _elem52.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem52)
		}
		p.Photo = append(p.Photo, _elem52)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient) readField26(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Telecom = make([]*ContactPoint, 0, size)
	for i := 0; i < size; i++ {
		_elem53 := NewContactPoint()
		if err := _elem53.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem53)
		}
		p.Telecom = append(p.Telecom, _elem53)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Patient) readField27(iprot thrift.TProtocol) error {
	p.Text = NewNarrative()
	if err := p.Text.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Text)
	}
	return nil
}

func (p *Patient) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Patient"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := p.writeField18(oprot); err != nil {
		return err
	}
	if err := p.writeField19(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField21(oprot); err != nil {
		return err
	}
	if err := p.writeField22(oprot); err != nil {
		return err
	}
	if err := p.writeField23(oprot); err != nil {
		return err
	}
	if err := p.writeField24(oprot); err != nil {
		return err
	}
	if err := p.writeField25(oprot); err != nil {
		return err
	}
	if err := p.writeField26(oprot); err != nil {
		return err
	}
	if err := p.writeField27(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Patient) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetActive() {
		if err := oprot.WriteFieldBegin("active", thrift.BOOL, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:active: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.Active)); err != nil {
			return fmt.Errorf("%T.active (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:active: %s", p, err)
		}
	}
	return err
}

func (p *Patient) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Address != nil {
		if p.IsSetAddress() {
			if err := oprot.WriteFieldBegin("address", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:address: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Address)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Address {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:address: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Animal != nil {
		if p.IsSetAnimal() {
			if err := oprot.WriteFieldBegin("animal", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:animal: %s", p, err)
			}
			if err := p.Animal.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Animal)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:animal: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBirthDate() {
		if err := oprot.WriteFieldBegin("birthDate", thrift.I32, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:birthDate: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.BirthDate)); err != nil {
			return fmt.Errorf("%T.birthDate (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:birthDate: %s", p, err)
		}
	}
	return err
}

func (p *Patient) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Communication != nil {
		if p.IsSetCommunication() {
			if err := oprot.WriteFieldBegin("communication", thrift.LIST, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:communication: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Communication)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Communication {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:communication: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField6(oprot thrift.TProtocol) (err error) {
	if p.Contact != nil {
		if p.IsSetContact() {
			if err := oprot.WriteFieldBegin("contact", thrift.LIST, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:contact: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contact)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Contact {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:contact: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeceasedBoolean() {
		if err := oprot.WriteFieldBegin("deceasedBoolean", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:deceasedBoolean: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.DeceasedBoolean)); err != nil {
			return fmt.Errorf("%T.deceasedBoolean (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:deceasedBoolean: %s", p, err)
		}
	}
	return err
}

func (p *Patient) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeceasedDateTime() {
		if err := oprot.WriteFieldBegin("deceasedDateTime", thrift.I64, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:deceasedDateTime: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.DeceasedDateTime)); err != nil {
			return fmt.Errorf("%T.deceasedDateTime (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:deceasedDateTime: %s", p, err)
		}
	}
	return err
}

func (p *Patient) writeField10(oprot thrift.TProtocol) (err error) {
	if p.Extension != nil {
		if p.IsSetExtension() {
			if err := oprot.WriteFieldBegin("extension", thrift.LIST, 10); err != nil {
				return fmt.Errorf("%T write field begin error 10:extension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Extension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Extension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 10:extension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField11(oprot thrift.TProtocol) (err error) {
	if p.Gender != nil {
		if p.IsSetGender() {
			if err := oprot.WriteFieldBegin("gender", thrift.STRUCT, 11); err != nil {
				return fmt.Errorf("%T write field begin error 11:gender: %s", p, err)
			}
			if err := p.Gender.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Gender)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 11:gender: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField12(oprot thrift.TProtocol) (err error) {
	if p.GeneralPractitioner != nil {
		if p.IsSetGeneralPractitioner() {
			if err := oprot.WriteFieldBegin("generalPractitioner", thrift.LIST, 12); err != nil {
				return fmt.Errorf("%T write field begin error 12:generalPractitioner: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.GeneralPractitioner)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.GeneralPractitioner {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 12:generalPractitioner: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField13(oprot thrift.TProtocol) (err error) {
	if p._id != nil {
		if p.IsSet_id() {
			if err := oprot.WriteFieldBegin("_id", thrift.STRUCT, 13); err != nil {
				return fmt.Errorf("%T write field begin error 13:_id: %s", p, err)
			}
			if err := p._id.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p._id)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 13:_id: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField14(oprot thrift.TProtocol) (err error) {
	if p.Identifier != nil {
		if p.IsSetIdentifier() {
			if err := oprot.WriteFieldBegin("identifier", thrift.LIST, 14); err != nil {
				return fmt.Errorf("%T write field begin error 14:identifier: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Identifier)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Identifier {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 14:identifier: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField15(oprot thrift.TProtocol) (err error) {
	if p.ImplicitRules != nil {
		if p.IsSetImplicitRules() {
			if err := oprot.WriteFieldBegin("implicitRules", thrift.STRUCT, 15); err != nil {
				return fmt.Errorf("%T write field begin error 15:implicitRules: %s", p, err)
			}
			if err := p.ImplicitRules.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.ImplicitRules)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 15:implicitRules: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField16(oprot thrift.TProtocol) (err error) {
	if p.Language != nil {
		if p.IsSetLanguage() {
			if err := oprot.WriteFieldBegin("language", thrift.STRUCT, 16); err != nil {
				return fmt.Errorf("%T write field begin error 16:language: %s", p, err)
			}
			if err := p.Language.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Language)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 16:language: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField17(oprot thrift.TProtocol) (err error) {
	if p.Link != nil {
		if p.IsSetLink() {
			if err := oprot.WriteFieldBegin("link", thrift.LIST, 17); err != nil {
				return fmt.Errorf("%T write field begin error 17:link: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Link)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Link {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 17:link: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField18(oprot thrift.TProtocol) (err error) {
	if p.ManagingOrganization != nil {
		if p.IsSetManagingOrganization() {
			if err := oprot.WriteFieldBegin("managingOrganization", thrift.STRUCT, 18); err != nil {
				return fmt.Errorf("%T write field begin error 18:managingOrganization: %s", p, err)
			}
			if err := p.ManagingOrganization.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.ManagingOrganization)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 18:managingOrganization: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField19(oprot thrift.TProtocol) (err error) {
	if p.MaritalStatus != nil {
		if p.IsSetMaritalStatus() {
			if err := oprot.WriteFieldBegin("maritalStatus", thrift.STRUCT, 19); err != nil {
				return fmt.Errorf("%T write field begin error 19:maritalStatus: %s", p, err)
			}
			if err := p.MaritalStatus.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.MaritalStatus)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 19:maritalStatus: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField20(oprot thrift.TProtocol) (err error) {
	if p.Meta != nil {
		if p.IsSetMeta() {
			if err := oprot.WriteFieldBegin("meta", thrift.STRUCT, 20); err != nil {
				return fmt.Errorf("%T write field begin error 20:meta: %s", p, err)
			}
			if err := p.Meta.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Meta)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 20:meta: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField21(oprot thrift.TProtocol) (err error) {
	if p.ModifierExtension != nil {
		if p.IsSetModifierExtension() {
			if err := oprot.WriteFieldBegin("modifierExtension", thrift.LIST, 21); err != nil {
				return fmt.Errorf("%T write field begin error 21:modifierExtension: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.ModifierExtension)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.ModifierExtension {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 21:modifierExtension: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetMultipleBirthBoolean() {
		if err := oprot.WriteFieldBegin("multipleBirthBoolean", thrift.BOOL, 22); err != nil {
			return fmt.Errorf("%T write field begin error 22:multipleBirthBoolean: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.MultipleBirthBoolean)); err != nil {
			return fmt.Errorf("%T.multipleBirthBoolean (22) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 22:multipleBirthBoolean: %s", p, err)
		}
	}
	return err
}

func (p *Patient) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetMultipleBirthInteger() {
		if err := oprot.WriteFieldBegin("multipleBirthInteger", thrift.I64, 23); err != nil {
			return fmt.Errorf("%T write field begin error 23:multipleBirthInteger: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.MultipleBirthInteger)); err != nil {
			return fmt.Errorf("%T.multipleBirthInteger (23) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 23:multipleBirthInteger: %s", p, err)
		}
	}
	return err
}

func (p *Patient) writeField24(oprot thrift.TProtocol) (err error) {
	if p.Name != nil {
		if p.IsSetName() {
			if err := oprot.WriteFieldBegin("name", thrift.LIST, 24); err != nil {
				return fmt.Errorf("%T write field begin error 24:name: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Name)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Name {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 24:name: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField25(oprot thrift.TProtocol) (err error) {
	if p.Photo != nil {
		if p.IsSetPhoto() {
			if err := oprot.WriteFieldBegin("photo", thrift.LIST, 25); err != nil {
				return fmt.Errorf("%T write field begin error 25:photo: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Photo)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Photo {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 25:photo: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField26(oprot thrift.TProtocol) (err error) {
	if p.Telecom != nil {
		if p.IsSetTelecom() {
			if err := oprot.WriteFieldBegin("telecom", thrift.LIST, 26); err != nil {
				return fmt.Errorf("%T write field begin error 26:telecom: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Telecom)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Telecom {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 26:telecom: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) writeField27(oprot thrift.TProtocol) (err error) {
	if p.Text != nil {
		if p.IsSetText() {
			if err := oprot.WriteFieldBegin("text", thrift.STRUCT, 27); err != nil {
				return fmt.Errorf("%T write field begin error 27:text: %s", p, err)
			}
			if err := p.Text.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Text)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 27:text: %s", p, err)
			}
		}
	}
	return err
}

func (p *Patient) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Patient(%+v)", *p)
}
