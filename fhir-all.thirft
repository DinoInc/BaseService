enum AccountStatus_list
{
	AccountStatus_list_active,
	AccountStatus_list_entered_in_error,
	AccountStatus_list_inactive,
}

enum ActionCardinalityBehavior_list
{
	ActionCardinalityBehavior_list_multiple,
	ActionCardinalityBehavior_list_single,
}

enum ActionConditionKind_list
{
	ActionConditionKind_list_applicability,
	ActionConditionKind_list_start,
	ActionConditionKind_list_stop,
}

enum ActionGroupingBehavior_list
{
	ActionGroupingBehavior_list_logical_group,
	ActionGroupingBehavior_list_sentence_group,
	ActionGroupingBehavior_list_visual_group,
}

enum ActionList_list
{
	ActionList_list_cancel,
	ActionList_list_poll,
	ActionList_list_reprocess,
	ActionList_list_status,
}

enum ActionParticipantType_list
{
	ActionParticipantType_list_patient,
	ActionParticipantType_list_practitioner,
	ActionParticipantType_list_related_person,
}

enum ActionPrecheckBehavior_list
{
	ActionPrecheckBehavior_list_no,
	ActionPrecheckBehavior_list_yes,
}

enum ActionRelationshipType_list
{
	ActionRelationshipType_list_after,
	ActionRelationshipType_list_after_end,
	ActionRelationshipType_list_after_start,
	ActionRelationshipType_list_before,
	ActionRelationshipType_list_before_end,
	ActionRelationshipType_list_before_start,
	ActionRelationshipType_list_concurrent,
	ActionRelationshipType_list_concurrent_with_end,
	ActionRelationshipType_list_concurrent_with_start,
}

enum ActionRequiredBehavior_list
{
	ActionRequiredBehavior_list_could,
	ActionRequiredBehavior_list_must,
	ActionRequiredBehavior_list_must_unless_documented,
}

enum ActionSelectionBehavior_list
{
	ActionSelectionBehavior_list_all,
	ActionSelectionBehavior_list_all_or_none,
	ActionSelectionBehavior_list_any,
	ActionSelectionBehavior_list_at_most_one,
	ActionSelectionBehavior_list_exactly_one,
	ActionSelectionBehavior_list_one_or_more,
}

enum AddressType_list
{
	AddressType_list_both,
	AddressType_list_physical,
	AddressType_list_postal,
}

enum AddressUse_list
{
	AddressUse_list_home,
	AddressUse_list_old,
	AddressUse_list_temp,
	AddressUse_list_work,
}

enum AdministrativeGender_list
{
	AdministrativeGender_list_female,
	AdministrativeGender_list_male,
	AdministrativeGender_list_other,
	AdministrativeGender_list_unknown,
}

enum AdverseEventCategory_list
{
	AdverseEventCategory_list_AE,
	AdverseEventCategory_list_PAE,
}

enum AdverseEventCausality_list
{
	AdverseEventCausality_list_causality1,
	AdverseEventCausality_list_causality2,
}

enum AggregationMode_list
{
	AggregationMode_list_bundled,
	AggregationMode_list_contained,
	AggregationMode_list_referenced,
}

enum AllergyIntoleranceCategory_list
{
	AllergyIntoleranceCategory_list_biologic,
	AllergyIntoleranceCategory_list_environment,
	AllergyIntoleranceCategory_list_food,
	AllergyIntoleranceCategory_list_medication,
}

enum AllergyIntoleranceClinicalStatus_list
{
	AllergyIntoleranceClinicalStatus_list_active,
	AllergyIntoleranceClinicalStatus_list_inactive,
	AllergyIntoleranceClinicalStatus_list_resolved,
}

enum AllergyIntoleranceCriticality_list
{
	AllergyIntoleranceCriticality_list_high,
	AllergyIntoleranceCriticality_list_low,
	AllergyIntoleranceCriticality_list_unable_to_assess,
}

enum AllergyIntoleranceSeverity_list
{
	AllergyIntoleranceSeverity_list_mild,
	AllergyIntoleranceSeverity_list_moderate,
	AllergyIntoleranceSeverity_list_severe,
}

enum AllergyIntoleranceType_list
{
	AllergyIntoleranceType_list_allergy,
	AllergyIntoleranceType_list_intolerance,
}

enum AllergyIntoleranceVerificationStatus_list
{
	AllergyIntoleranceVerificationStatus_list_confirmed,
	AllergyIntoleranceVerificationStatus_list_entered_in_error,
	AllergyIntoleranceVerificationStatus_list_refuted,
	AllergyIntoleranceVerificationStatus_list_unconfirmed,
}

enum AppointmentStatus_list
{
	AppointmentStatus_list_arrived,
	AppointmentStatus_list_booked,
	AppointmentStatus_list_cancelled,
	AppointmentStatus_list_entered_in_error,
	AppointmentStatus_list_fulfilled,
	AppointmentStatus_list_noshow,
	AppointmentStatus_list_pending,
	AppointmentStatus_list_proposed,
}

enum AssertionDirectionType_list
{
	AssertionDirectionType_list_request,
	AssertionDirectionType_list_response,
}

enum AssertionOperatorType_list
{
	AssertionOperatorType_list_contains,
	AssertionOperatorType_list_empty,
	AssertionOperatorType_list_equals,
	AssertionOperatorType_list_eval,
	AssertionOperatorType_list_greaterThan,
	AssertionOperatorType_list_in,
	AssertionOperatorType_list_lessThan,
	AssertionOperatorType_list_notContains,
	AssertionOperatorType_list_notEmpty,
	AssertionOperatorType_list_notEquals,
	AssertionOperatorType_list_notIn,
}

enum AssertionResponseTypes_list
{
	AssertionResponseTypes_list_bad,
	AssertionResponseTypes_list_conflict,
	AssertionResponseTypes_list_created,
	AssertionResponseTypes_list_forbidden,
	AssertionResponseTypes_list_gone,
	AssertionResponseTypes_list_methodNotAllowed,
	AssertionResponseTypes_list_noContent,
	AssertionResponseTypes_list_notFound,
	AssertionResponseTypes_list_notModified,
	AssertionResponseTypes_list_okay,
	AssertionResponseTypes_list_preconditionFailed,
	AssertionResponseTypes_list_unprocessable,
}

enum AuditEventAction_list
{
	AuditEventAction_list_C,
	AuditEventAction_list_D,
	AuditEventAction_list_E,
	AuditEventAction_list_R,
	AuditEventAction_list_U,
}

enum AuditEventAgentNetworkType_list
{
	AuditEventAgentNetworkType_list_1,
	AuditEventAgentNetworkType_list_2,
	AuditEventAgentNetworkType_list_3,
	AuditEventAgentNetworkType_list_4,
	AuditEventAgentNetworkType_list_5,
}

enum AuditEventOutcome_list
{
	AuditEventOutcome_list_0,
	AuditEventOutcome_list_12,
	AuditEventOutcome_list_4,
	AuditEventOutcome_list_8,
}

enum BindingStrength_list
{
	BindingStrength_list_example,
	BindingStrength_list_extensible,
	BindingStrength_list_preferred,
	BindingStrength_list_required,
}

enum BundleType_list
{
	BundleType_list_batch,
	BundleType_list_batch_response,
	BundleType_list_collection,
	BundleType_list_document,
	BundleType_list_history,
	BundleType_list_message,
	BundleType_list_searchset,
	BundleType_list_transaction,
	BundleType_list_transaction_response,
}

enum CapabilityStatementKind_list
{
	CapabilityStatementKind_list_capability,
	CapabilityStatementKind_list_instance,
	CapabilityStatementKind_list_requirements,
}

enum CarePlanActivityStatus_list
{
	CarePlanActivityStatus_list_cancelled,
	CarePlanActivityStatus_list_completed,
	CarePlanActivityStatus_list_in_progress,
	CarePlanActivityStatus_list_not_started,
	CarePlanActivityStatus_list_on_hold,
	CarePlanActivityStatus_list_scheduled,
	CarePlanActivityStatus_list_unknown,
}

enum CarePlanIntent_list
{
	CarePlanIntent_list_option,
	CarePlanIntent_list_order,
	CarePlanIntent_list_plan,
	CarePlanIntent_list_proposal,
}

enum CarePlanStatus_list
{
	CarePlanStatus_list_active,
	CarePlanStatus_list_cancelled,
	CarePlanStatus_list_completed,
	CarePlanStatus_list_draft,
	CarePlanStatus_list_entered_in_error,
	CarePlanStatus_list_suspended,
	CarePlanStatus_list_unknown,
}

enum CareTeamStatus_list
{
	CareTeamStatus_list_active,
	CareTeamStatus_list_entered_in_error,
	CareTeamStatus_list_inactive,
	CareTeamStatus_list_proposed,
	CareTeamStatus_list_suspended,
}

enum ChargeItemStatus_list
{
	ChargeItemStatus_list_aborted,
	ChargeItemStatus_list_billable,
	ChargeItemStatus_list_billed,
	ChargeItemStatus_list_entered_in_error,
	ChargeItemStatus_list_not_billable,
	ChargeItemStatus_list_planned,
	ChargeItemStatus_list_unknown,
}

enum ClinicalImpressionStatus_list
{
	ClinicalImpressionStatus_list_completed,
	ClinicalImpressionStatus_list_draft,
	ClinicalImpressionStatus_list_entered_in_error,
}

enum CodeSystemContentMode_list
{
	CodeSystemContentMode_list_complete,
	CodeSystemContentMode_list_example,
	CodeSystemContentMode_list_fragment,
	CodeSystemContentMode_list_not_present,
}

enum CodeSystemHierarchyMeaning_list
{
	CodeSystemHierarchyMeaning_list_classified_with,
	CodeSystemHierarchyMeaning_list_grouped_by,
	CodeSystemHierarchyMeaning_list_is_a,
	CodeSystemHierarchyMeaning_list_part_of,
}

enum CompartmentType_list
{
	CompartmentType_list_Device,
	CompartmentType_list_Encounter,
	CompartmentType_list_Patient,
	CompartmentType_list_Practitioner,
	CompartmentType_list_RelatedPerson,
}

enum CompositionAttestationMode_list
{
	CompositionAttestationMode_list_legal,
	CompositionAttestationMode_list_official,
	CompositionAttestationMode_list_personal,
	CompositionAttestationMode_list_professional,
}

enum CompositionStatus_list
{
	CompositionStatus_list_amended,
	CompositionStatus_list_entered_in_error,
	CompositionStatus_list_final,
	CompositionStatus_list_preliminary,
}

enum ConceptMapEquivalence_list
{
	ConceptMapEquivalence_list_disjoint,
	ConceptMapEquivalence_list_equal,
	ConceptMapEquivalence_list_equivalent,
	ConceptMapEquivalence_list_inexact,
	ConceptMapEquivalence_list_narrower,
	ConceptMapEquivalence_list_relatedto,
	ConceptMapEquivalence_list_specializes,
	ConceptMapEquivalence_list_subsumes,
	ConceptMapEquivalence_list_unmatched,
	ConceptMapEquivalence_list_wider,
}

enum ConceptMapGroupUnmappedMode_list
{
	ConceptMapGroupUnmappedMode_list_fixed,
	ConceptMapGroupUnmappedMode_list_other_map,
	ConceptMapGroupUnmappedMode_list_provided,
}

enum ConditionClinicalStatusCodes_list
{
	ConditionClinicalStatusCodes_list_active,
	ConditionClinicalStatusCodes_list_inactive,
	ConditionClinicalStatusCodes_list_recurrence,
	ConditionClinicalStatusCodes_list_remission,
	ConditionClinicalStatusCodes_list_resolved,
}

enum ConditionVerificationStatus_list
{
	ConditionVerificationStatus_list_confirmed,
	ConditionVerificationStatus_list_differential,
	ConditionVerificationStatus_list_entered_in_error,
	ConditionVerificationStatus_list_provisional,
	ConditionVerificationStatus_list_refuted,
	ConditionVerificationStatus_list_unknown,
}

enum ConditionalDeleteStatus_list
{
	ConditionalDeleteStatus_list_multiple,
	ConditionalDeleteStatus_list_not_supported,
	ConditionalDeleteStatus_list_single,
}

enum ConditionalReadStatus_list
{
	ConditionalReadStatus_list_full_support,
	ConditionalReadStatus_list_modified_since,
	ConditionalReadStatus_list_not_match,
	ConditionalReadStatus_list_not_supported,
}

enum ConfidentialityClassification_list
{
	ConfidentialityClassification_list_L,
	ConfidentialityClassification_list_M,
	ConfidentialityClassification_list_N,
	ConfidentialityClassification_list_R,
	ConfidentialityClassification_list_U,
	ConfidentialityClassification_list_V,
}

enum ConsentDataMeaning_list
{
	ConsentDataMeaning_list_authoredby,
	ConsentDataMeaning_list_dependents,
	ConsentDataMeaning_list_instance,
	ConsentDataMeaning_list_related,
}

enum ConsentExceptType_list
{
	ConsentExceptType_list_deny,
	ConsentExceptType_list_permit,
}

enum ConsentState_list
{
	ConsentState_list_active,
	ConsentState_list_draft,
	ConsentState_list_entered_in_error,
	ConsentState_list_inactive,
	ConsentState_list_proposed,
	ConsentState_list_rejected,
}

enum ConstraintSeverity_list
{
	ConstraintSeverity_list_error,
	ConstraintSeverity_list_warning,
}

enum ContactPointSystem_list
{
	ContactPointSystem_list_email,
	ContactPointSystem_list_fax,
	ContactPointSystem_list_other,
	ContactPointSystem_list_pager,
	ContactPointSystem_list_phone,
	ContactPointSystem_list_sms,
	ContactPointSystem_list_url,
}

enum ContactPointUse_list
{
	ContactPointUse_list_home,
	ContactPointUse_list_mobile,
	ContactPointUse_list_old,
	ContactPointUse_list_temp,
	ContactPointUse_list_work,
}

enum ContentType_list
{
	ContentType_list_json,
	ContentType_list_none,
	ContentType_list_ttl,
	ContentType_list_xml,
}

enum ContractResourceStatusCodes_list
{
	ContractResourceStatusCodes_list_amended,
	ContractResourceStatusCodes_list_appended,
	ContractResourceStatusCodes_list_cancelled,
	ContractResourceStatusCodes_list_disputed,
	ContractResourceStatusCodes_list_entered_in_error,
	ContractResourceStatusCodes_list_executable,
	ContractResourceStatusCodes_list_executed,
	ContractResourceStatusCodes_list_negotiable,
	ContractResourceStatusCodes_list_offered,
	ContractResourceStatusCodes_list_policy,
	ContractResourceStatusCodes_list_rejected,
	ContractResourceStatusCodes_list_renewed,
	ContractResourceStatusCodes_list_resolved,
	ContractResourceStatusCodes_list_revoked,
	ContractResourceStatusCodes_list_terminated,
}

enum ContributorType_list
{
	ContributorType_list_author,
	ContributorType_list_editor,
	ContributorType_list_endorser,
	ContributorType_list_reviewer,
}

enum DataElementStringency_list
{
	DataElementStringency_list_comparable,
	DataElementStringency_list_convertable,
	DataElementStringency_list_equivalent,
	DataElementStringency_list_flexible,
	DataElementStringency_list_fully_specified,
	DataElementStringency_list_scaleable,
}

enum DaysOfWeek_list
{
	DaysOfWeek_list_fri,
	DaysOfWeek_list_mon,
	DaysOfWeek_list_sat,
	DaysOfWeek_list_sun,
	DaysOfWeek_list_thu,
	DaysOfWeek_list_tue,
	DaysOfWeek_list_wed,
}

enum DetectedIssueSeverity_list
{
	DetectedIssueSeverity_list_high,
	DetectedIssueSeverity_list_low,
	DetectedIssueSeverity_list_moderate,
}

enum DeviceMetricCalibrationState_list
{
	DeviceMetricCalibrationState_list_calibrated,
	DeviceMetricCalibrationState_list_calibration_required,
	DeviceMetricCalibrationState_list_not_calibrated,
	DeviceMetricCalibrationState_list_unspecified,
}

enum DeviceMetricCalibrationType_list
{
	DeviceMetricCalibrationType_list_gain,
	DeviceMetricCalibrationType_list_offset,
	DeviceMetricCalibrationType_list_two_point,
	DeviceMetricCalibrationType_list_unspecified,
}

enum DeviceMetricCategory_list
{
	DeviceMetricCategory_list_calculation,
	DeviceMetricCategory_list_measurement,
	DeviceMetricCategory_list_setting,
	DeviceMetricCategory_list_unspecified,
}

enum DeviceMetricColor_list
{
	DeviceMetricColor_list_black,
	DeviceMetricColor_list_blue,
	DeviceMetricColor_list_cyan,
	DeviceMetricColor_list_green,
	DeviceMetricColor_list_magenta,
	DeviceMetricColor_list_red,
	DeviceMetricColor_list_white,
	DeviceMetricColor_list_yellow,
}

enum DeviceMetricOperationalStatus_list
{
	DeviceMetricOperationalStatus_list_entered_in_error,
	DeviceMetricOperationalStatus_list_off,
	DeviceMetricOperationalStatus_list_on,
	DeviceMetricOperationalStatus_list_standby,
}

enum DeviceUseStatementStatus_list
{
	DeviceUseStatementStatus_list_active,
	DeviceUseStatementStatus_list_completed,
	DeviceUseStatementStatus_list_entered_in_error,
	DeviceUseStatementStatus_list_intended,
	DeviceUseStatementStatus_list_on_hold,
	DeviceUseStatementStatus_list_stopped,
}

enum DiagnosticReportStatus_list
{
	DiagnosticReportStatus_list_amended,
	DiagnosticReportStatus_list_appended,
	DiagnosticReportStatus_list_cancelled,
	DiagnosticReportStatus_list_corrected,
	DiagnosticReportStatus_list_entered_in_error,
	DiagnosticReportStatus_list_final,
	DiagnosticReportStatus_list_partial,
	DiagnosticReportStatus_list_preliminary,
	DiagnosticReportStatus_list_registered,
	DiagnosticReportStatus_list_unknown,
}

enum DigitalMediaType_list
{
	DigitalMediaType_list_audio,
	DigitalMediaType_list_photo,
	DigitalMediaType_list_video,
}

enum DiscriminatorType_list
{
	DiscriminatorType_list_exists,
	DiscriminatorType_list_pattern,
	DiscriminatorType_list_profile,
	DiscriminatorType_list_type,
	DiscriminatorType_list_value,
}

enum DocumentMode_list
{
	DocumentMode_list_consumer,
	DocumentMode_list_producer,
}

enum DocumentReferenceStatus_list
{
	DocumentReferenceStatus_list_current,
	DocumentReferenceStatus_list_entered_in_error,
	DocumentReferenceStatus_list_superseded,
}

enum DocumentRelationshipType_list
{
	DocumentRelationshipType_list_appends,
	DocumentRelationshipType_list_replaces,
	DocumentRelationshipType_list_signs,
	DocumentRelationshipType_list_transforms,
}

enum EncounterLocationStatus_list
{
	EncounterLocationStatus_list_active,
	EncounterLocationStatus_list_completed,
	EncounterLocationStatus_list_planned,
	EncounterLocationStatus_list_reserved,
}

enum EncounterStatus_list
{
	EncounterStatus_list_arrived,
	EncounterStatus_list_cancelled,
	EncounterStatus_list_entered_in_error,
	EncounterStatus_list_finished,
	EncounterStatus_list_in_progress,
	EncounterStatus_list_onleave,
	EncounterStatus_list_planned,
	EncounterStatus_list_triaged,
	EncounterStatus_list_unknown,
}

enum EndpointStatus_list
{
	EndpointStatus_list_active,
	EndpointStatus_list_entered_in_error,
	EndpointStatus_list_error,
	EndpointStatus_list_off,
	EndpointStatus_list_suspended,
	EndpointStatus_list_test,
}

enum EpisodeOfCareStatus_list
{
	EpisodeOfCareStatus_list_active,
	EpisodeOfCareStatus_list_cancelled,
	EpisodeOfCareStatus_list_entered_in_error,
	EpisodeOfCareStatus_list_finished,
	EpisodeOfCareStatus_list_onhold,
	EpisodeOfCareStatus_list_planned,
	EpisodeOfCareStatus_list_waitlist,
}

enum EventCapabilityMode_list
{
	EventCapabilityMode_list_receiver,
	EventCapabilityMode_list_sender,
}

enum EventStatus_list
{
	EventStatus_list_aborted,
	EventStatus_list_completed,
	EventStatus_list_entered_in_error,
	EventStatus_list_in_progress,
	EventStatus_list_preparation,
	EventStatus_list_suspended,
	EventStatus_list_unknown,
}

enum EventTiming_list
{
	EventTiming_list_AC,
	EventTiming_list_ACD,
	EventTiming_list_ACM,
	EventTiming_list_ACV,
	EventTiming_list_AFT,
	EventTiming_list_C,
	EventTiming_list_CD,
	EventTiming_list_CM,
	EventTiming_list_CV,
	EventTiming_list_EVE,
	EventTiming_list_HS,
	EventTiming_list_MORN,
	EventTiming_list_NIGHT,
	EventTiming_list_PC,
	EventTiming_list_PCD,
	EventTiming_list_PCM,
	EventTiming_list_PCV,
	EventTiming_list_PHS,
	EventTiming_list_WAKE,
}

enum ExplanationOfBenefitStatus_list
{
	ExplanationOfBenefitStatus_list_active,
	ExplanationOfBenefitStatus_list_cancelled,
	ExplanationOfBenefitStatus_list_draft,
	ExplanationOfBenefitStatus_list_entered_in_error,
}

enum ExtensionContext_list
{
	ExtensionContext_list_datatype,
	ExtensionContext_list_extension,
	ExtensionContext_list_resource,
}

enum FHIRAllTypes_list
{
	FHIRAllTypes_list_Account,
	FHIRAllTypes_list_ActivityDefinition,
	FHIRAllTypes_list_Address,
	FHIRAllTypes_list_AdverseEvent,
	FHIRAllTypes_list_Age,
	FHIRAllTypes_list_AllergyIntolerance,
	FHIRAllTypes_list_Annotation,
	FHIRAllTypes_list_Any,
	FHIRAllTypes_list_Appointment,
	FHIRAllTypes_list_AppointmentResponse,
	FHIRAllTypes_list_Attachment,
	FHIRAllTypes_list_AuditEvent,
	FHIRAllTypes_list_BackboneElement,
	FHIRAllTypes_list_Basic,
	FHIRAllTypes_list_Binary,
	FHIRAllTypes_list_BodySite,
	FHIRAllTypes_list_Bundle,
	FHIRAllTypes_list_CapabilityStatement,
	FHIRAllTypes_list_CarePlan,
	FHIRAllTypes_list_CareTeam,
	FHIRAllTypes_list_ChargeItem,
	FHIRAllTypes_list_Claim,
	FHIRAllTypes_list_ClaimResponse,
	FHIRAllTypes_list_ClinicalImpression,
	FHIRAllTypes_list_CodeSystem,
	FHIRAllTypes_list_CodeableConcept,
	FHIRAllTypes_list_Coding,
	FHIRAllTypes_list_Communication,
	FHIRAllTypes_list_CommunicationRequest,
	FHIRAllTypes_list_CompartmentDefinition,
	FHIRAllTypes_list_Composition,
	FHIRAllTypes_list_ConceptMap,
	FHIRAllTypes_list_Condition,
	FHIRAllTypes_list_Consent,
	FHIRAllTypes_list_ContactDetail,
	FHIRAllTypes_list_ContactPoint,
	FHIRAllTypes_list_Contract,
	FHIRAllTypes_list_Contributor,
	FHIRAllTypes_list_Count,
	FHIRAllTypes_list_Coverage,
	FHIRAllTypes_list_DataElement,
	FHIRAllTypes_list_DataRequirement,
	FHIRAllTypes_list_DetectedIssue,
	FHIRAllTypes_list_Device,
	FHIRAllTypes_list_DeviceComponent,
	FHIRAllTypes_list_DeviceMetric,
	FHIRAllTypes_list_DeviceRequest,
	FHIRAllTypes_list_DeviceUseStatement,
	FHIRAllTypes_list_DiagnosticReport,
	FHIRAllTypes_list_Distance,
	FHIRAllTypes_list_DocumentManifest,
	FHIRAllTypes_list_DocumentReference,
	FHIRAllTypes_list_DomainResource,
	FHIRAllTypes_list_Dosage,
	FHIRAllTypes_list_Duration,
	FHIRAllTypes_list_Element,
	FHIRAllTypes_list_ElementDefinition,
	FHIRAllTypes_list_EligibilityRequest,
	FHIRAllTypes_list_EligibilityResponse,
	FHIRAllTypes_list_Encounter,
	FHIRAllTypes_list_Endpoint,
	FHIRAllTypes_list_EnrollmentRequest,
	FHIRAllTypes_list_EnrollmentResponse,
	FHIRAllTypes_list_EpisodeOfCare,
	FHIRAllTypes_list_ExpansionProfile,
	FHIRAllTypes_list_ExplanationOfBenefit,
	FHIRAllTypes_list_Extension,
	FHIRAllTypes_list_FamilyMemberHistory,
	FHIRAllTypes_list_Flag,
	FHIRAllTypes_list_Goal,
	FHIRAllTypes_list_GraphDefinition,
	FHIRAllTypes_list_Group,
	FHIRAllTypes_list_GuidanceResponse,
	FHIRAllTypes_list_HealthcareService,
	FHIRAllTypes_list_HumanName,
	FHIRAllTypes_list_Identifier,
	FHIRAllTypes_list_ImagingManifest,
	FHIRAllTypes_list_ImagingStudy,
	FHIRAllTypes_list_Immunization,
	FHIRAllTypes_list_ImmunizationRecommendation,
	FHIRAllTypes_list_ImplementationGuide,
	FHIRAllTypes_list_Library,
	FHIRAllTypes_list_Linkage,
	FHIRAllTypes_list_List,
	FHIRAllTypes_list_Location,
	FHIRAllTypes_list_Measure,
	FHIRAllTypes_list_MeasureReport,
	FHIRAllTypes_list_Media,
	FHIRAllTypes_list_Medication,
	FHIRAllTypes_list_MedicationAdministration,
	FHIRAllTypes_list_MedicationDispense,
	FHIRAllTypes_list_MedicationRequest,
	FHIRAllTypes_list_MedicationStatement,
	FHIRAllTypes_list_MessageDefinition,
	FHIRAllTypes_list_MessageHeader,
	FHIRAllTypes_list_Meta,
	FHIRAllTypes_list_Money,
	FHIRAllTypes_list_NamingSystem,
	FHIRAllTypes_list_Narrative,
	FHIRAllTypes_list_NutritionOrder,
	FHIRAllTypes_list_Observation,
	FHIRAllTypes_list_OperationDefinition,
	FHIRAllTypes_list_OperationOutcome,
	FHIRAllTypes_list_Organization,
	FHIRAllTypes_list_ParameterDefinition,
	FHIRAllTypes_list_Parameters,
	FHIRAllTypes_list_Patient,
	FHIRAllTypes_list_PaymentNotice,
	FHIRAllTypes_list_PaymentReconciliation,
	FHIRAllTypes_list_Period,
	FHIRAllTypes_list_Person,
	FHIRAllTypes_list_PlanDefinition,
	FHIRAllTypes_list_Practitioner,
	FHIRAllTypes_list_PractitionerRole,
	FHIRAllTypes_list_Procedure,
	FHIRAllTypes_list_ProcedureRequest,
	FHIRAllTypes_list_ProcessRequest,
	FHIRAllTypes_list_ProcessResponse,
	FHIRAllTypes_list_Provenance,
	FHIRAllTypes_list_Quantity,
	FHIRAllTypes_list_Questionnaire,
	FHIRAllTypes_list_QuestionnaireResponse,
	FHIRAllTypes_list_Range,
	FHIRAllTypes_list_Ratio,
	FHIRAllTypes_list_Reference,
	FHIRAllTypes_list_ReferralRequest,
	FHIRAllTypes_list_RelatedArtifact,
	FHIRAllTypes_list_RelatedPerson,
	FHIRAllTypes_list_RequestGroup,
	FHIRAllTypes_list_ResearchStudy,
	FHIRAllTypes_list_ResearchSubject,
	FHIRAllTypes_list_Resource,
	FHIRAllTypes_list_RiskAssessment,
	FHIRAllTypes_list_SampledData,
	FHIRAllTypes_list_Schedule,
	FHIRAllTypes_list_SearchParameter,
	FHIRAllTypes_list_Sequence,
	FHIRAllTypes_list_ServiceDefinition,
	FHIRAllTypes_list_Signature,
	FHIRAllTypes_list_SimpleQuantity,
	FHIRAllTypes_list_Slot,
	FHIRAllTypes_list_Specimen,
	FHIRAllTypes_list_StructureDefinition,
	FHIRAllTypes_list_StructureMap,
	FHIRAllTypes_list_Subscription,
	FHIRAllTypes_list_Substance,
	FHIRAllTypes_list_SupplyDelivery,
	FHIRAllTypes_list_SupplyRequest,
	FHIRAllTypes_list_Task,
	FHIRAllTypes_list_TestReport,
	FHIRAllTypes_list_TestScript,
	FHIRAllTypes_list_Timing,
	FHIRAllTypes_list_TriggerDefinition,
	FHIRAllTypes_list_Type,
	FHIRAllTypes_list_UsageContext,
	FHIRAllTypes_list_ValueSet,
	FHIRAllTypes_list_VisionPrescription,
	FHIRAllTypes_list_base64Binary,
	FHIRAllTypes_list_boolean,
	FHIRAllTypes_list_code,
	FHIRAllTypes_list_date,
	FHIRAllTypes_list_dateTime,
	FHIRAllTypes_list_decimal,
	FHIRAllTypes_list_id,
	FHIRAllTypes_list_instant,
	FHIRAllTypes_list_integer,
	FHIRAllTypes_list_markdown,
	FHIRAllTypes_list_oid,
	FHIRAllTypes_list_positiveInt,
	FHIRAllTypes_list_string,
	FHIRAllTypes_list_time,
	FHIRAllTypes_list_unsignedInt,
	FHIRAllTypes_list_uri,
	FHIRAllTypes_list_uuid,
	FHIRAllTypes_list_xhtml,
}

enum FHIRDefinedType_list
{
	FHIRDefinedType_list_Account,
	FHIRDefinedType_list_ActivityDefinition,
	FHIRDefinedType_list_Address,
	FHIRDefinedType_list_AdverseEvent,
	FHIRDefinedType_list_Age,
	FHIRDefinedType_list_AllergyIntolerance,
	FHIRDefinedType_list_Annotation,
	FHIRDefinedType_list_Appointment,
	FHIRDefinedType_list_AppointmentResponse,
	FHIRDefinedType_list_Attachment,
	FHIRDefinedType_list_AuditEvent,
	FHIRDefinedType_list_BackboneElement,
	FHIRDefinedType_list_Basic,
	FHIRDefinedType_list_Binary,
	FHIRDefinedType_list_BodySite,
	FHIRDefinedType_list_Bundle,
	FHIRDefinedType_list_CapabilityStatement,
	FHIRDefinedType_list_CarePlan,
	FHIRDefinedType_list_CareTeam,
	FHIRDefinedType_list_ChargeItem,
	FHIRDefinedType_list_Claim,
	FHIRDefinedType_list_ClaimResponse,
	FHIRDefinedType_list_ClinicalImpression,
	FHIRDefinedType_list_CodeSystem,
	FHIRDefinedType_list_CodeableConcept,
	FHIRDefinedType_list_Coding,
	FHIRDefinedType_list_Communication,
	FHIRDefinedType_list_CommunicationRequest,
	FHIRDefinedType_list_CompartmentDefinition,
	FHIRDefinedType_list_Composition,
	FHIRDefinedType_list_ConceptMap,
	FHIRDefinedType_list_Condition,
	FHIRDefinedType_list_Consent,
	FHIRDefinedType_list_ContactDetail,
	FHIRDefinedType_list_ContactPoint,
	FHIRDefinedType_list_Contract,
	FHIRDefinedType_list_Contributor,
	FHIRDefinedType_list_Count,
	FHIRDefinedType_list_Coverage,
	FHIRDefinedType_list_DataElement,
	FHIRDefinedType_list_DataRequirement,
	FHIRDefinedType_list_DetectedIssue,
	FHIRDefinedType_list_Device,
	FHIRDefinedType_list_DeviceComponent,
	FHIRDefinedType_list_DeviceMetric,
	FHIRDefinedType_list_DeviceRequest,
	FHIRDefinedType_list_DeviceUseStatement,
	FHIRDefinedType_list_DiagnosticReport,
	FHIRDefinedType_list_Distance,
	FHIRDefinedType_list_DocumentManifest,
	FHIRDefinedType_list_DocumentReference,
	FHIRDefinedType_list_DomainResource,
	FHIRDefinedType_list_Dosage,
	FHIRDefinedType_list_Duration,
	FHIRDefinedType_list_Element,
	FHIRDefinedType_list_ElementDefinition,
	FHIRDefinedType_list_EligibilityRequest,
	FHIRDefinedType_list_EligibilityResponse,
	FHIRDefinedType_list_Encounter,
	FHIRDefinedType_list_Endpoint,
	FHIRDefinedType_list_EnrollmentRequest,
	FHIRDefinedType_list_EnrollmentResponse,
	FHIRDefinedType_list_EpisodeOfCare,
	FHIRDefinedType_list_ExpansionProfile,
	FHIRDefinedType_list_ExplanationOfBenefit,
	FHIRDefinedType_list_Extension,
	FHIRDefinedType_list_FamilyMemberHistory,
	FHIRDefinedType_list_Flag,
	FHIRDefinedType_list_Goal,
	FHIRDefinedType_list_GraphDefinition,
	FHIRDefinedType_list_Group,
	FHIRDefinedType_list_GuidanceResponse,
	FHIRDefinedType_list_HealthcareService,
	FHIRDefinedType_list_HumanName,
	FHIRDefinedType_list_Identifier,
	FHIRDefinedType_list_ImagingManifest,
	FHIRDefinedType_list_ImagingStudy,
	FHIRDefinedType_list_Immunization,
	FHIRDefinedType_list_ImmunizationRecommendation,
	FHIRDefinedType_list_ImplementationGuide,
	FHIRDefinedType_list_Library,
	FHIRDefinedType_list_Linkage,
	FHIRDefinedType_list_List,
	FHIRDefinedType_list_Location,
	FHIRDefinedType_list_Measure,
	FHIRDefinedType_list_MeasureReport,
	FHIRDefinedType_list_Media,
	FHIRDefinedType_list_Medication,
	FHIRDefinedType_list_MedicationAdministration,
	FHIRDefinedType_list_MedicationDispense,
	FHIRDefinedType_list_MedicationRequest,
	FHIRDefinedType_list_MedicationStatement,
	FHIRDefinedType_list_MessageDefinition,
	FHIRDefinedType_list_MessageHeader,
	FHIRDefinedType_list_Meta,
	FHIRDefinedType_list_Money,
	FHIRDefinedType_list_NamingSystem,
	FHIRDefinedType_list_Narrative,
	FHIRDefinedType_list_NutritionOrder,
	FHIRDefinedType_list_Observation,
	FHIRDefinedType_list_OperationDefinition,
	FHIRDefinedType_list_OperationOutcome,
	FHIRDefinedType_list_Organization,
	FHIRDefinedType_list_ParameterDefinition,
	FHIRDefinedType_list_Parameters,
	FHIRDefinedType_list_Patient,
	FHIRDefinedType_list_PaymentNotice,
	FHIRDefinedType_list_PaymentReconciliation,
	FHIRDefinedType_list_Period,
	FHIRDefinedType_list_Person,
	FHIRDefinedType_list_PlanDefinition,
	FHIRDefinedType_list_Practitioner,
	FHIRDefinedType_list_PractitionerRole,
	FHIRDefinedType_list_Procedure,
	FHIRDefinedType_list_ProcedureRequest,
	FHIRDefinedType_list_ProcessRequest,
	FHIRDefinedType_list_ProcessResponse,
	FHIRDefinedType_list_Provenance,
	FHIRDefinedType_list_Quantity,
	FHIRDefinedType_list_Questionnaire,
	FHIRDefinedType_list_QuestionnaireResponse,
	FHIRDefinedType_list_Range,
	FHIRDefinedType_list_Ratio,
	FHIRDefinedType_list_Reference,
	FHIRDefinedType_list_ReferralRequest,
	FHIRDefinedType_list_RelatedArtifact,
	FHIRDefinedType_list_RelatedPerson,
	FHIRDefinedType_list_RequestGroup,
	FHIRDefinedType_list_ResearchStudy,
	FHIRDefinedType_list_ResearchSubject,
	FHIRDefinedType_list_Resource,
	FHIRDefinedType_list_RiskAssessment,
	FHIRDefinedType_list_SampledData,
	FHIRDefinedType_list_Schedule,
	FHIRDefinedType_list_SearchParameter,
	FHIRDefinedType_list_Sequence,
	FHIRDefinedType_list_ServiceDefinition,
	FHIRDefinedType_list_Signature,
	FHIRDefinedType_list_SimpleQuantity,
	FHIRDefinedType_list_Slot,
	FHIRDefinedType_list_Specimen,
	FHIRDefinedType_list_StructureDefinition,
	FHIRDefinedType_list_StructureMap,
	FHIRDefinedType_list_Subscription,
	FHIRDefinedType_list_Substance,
	FHIRDefinedType_list_SupplyDelivery,
	FHIRDefinedType_list_SupplyRequest,
	FHIRDefinedType_list_Task,
	FHIRDefinedType_list_TestReport,
	FHIRDefinedType_list_TestScript,
	FHIRDefinedType_list_Timing,
	FHIRDefinedType_list_TriggerDefinition,
	FHIRDefinedType_list_UsageContext,
	FHIRDefinedType_list_ValueSet,
	FHIRDefinedType_list_VisionPrescription,
	FHIRDefinedType_list_base64Binary,
	FHIRDefinedType_list_boolean,
	FHIRDefinedType_list_code,
	FHIRDefinedType_list_date,
	FHIRDefinedType_list_dateTime,
	FHIRDefinedType_list_decimal,
	FHIRDefinedType_list_id,
	FHIRDefinedType_list_instant,
	FHIRDefinedType_list_integer,
	FHIRDefinedType_list_markdown,
	FHIRDefinedType_list_oid,
	FHIRDefinedType_list_positiveInt,
	FHIRDefinedType_list_string,
	FHIRDefinedType_list_time,
	FHIRDefinedType_list_unsignedInt,
	FHIRDefinedType_list_uri,
	FHIRDefinedType_list_uuid,
	FHIRDefinedType_list_xhtml,
}

enum FHIRDeviceStatus_list
{
	FHIRDeviceStatus_list_active,
	FHIRDeviceStatus_list_entered_in_error,
	FHIRDeviceStatus_list_inactive,
	FHIRDeviceStatus_list_unknown,
}

enum FHIRSubstanceStatus_list
{
	FHIRSubstanceStatus_list_active,
	FHIRSubstanceStatus_list_entered_in_error,
	FHIRSubstanceStatus_list_inactive,
}

enum FamilyHistoryStatus_list
{
	FamilyHistoryStatus_list_completed,
	FamilyHistoryStatus_list_entered_in_error,
	FamilyHistoryStatus_list_health_unknown,
	FamilyHistoryStatus_list_partial,
}

enum FilterOperator_list
{
	FilterOperator_list__,
	FilterOperator_list_descendent_of,
	FilterOperator_list_exists,
	FilterOperator_list_generalizes,
	FilterOperator_list_in,
	FilterOperator_list_is_a,
	FilterOperator_list_is_not_a,
	FilterOperator_list_not_in,
	FilterOperator_list_regex,
}

enum FinancialResourceStatusCodes_list
{
	FinancialResourceStatusCodes_list_active,
	FinancialResourceStatusCodes_list_cancelled,
	FinancialResourceStatusCodes_list_draft,
	FinancialResourceStatusCodes_list_entered_in_error,
}

enum FlagStatus_list
{
	FlagStatus_list_active,
	FlagStatus_list_entered_in_error,
	FlagStatus_list_inactive,
}

enum GoalStatus_list
{
	GoalStatus_list_accepted,
	GoalStatus_list_achieved,
	GoalStatus_list_ahead_of_target,
	GoalStatus_list_behind_target,
	GoalStatus_list_cancelled,
	GoalStatus_list_entered_in_error,
	GoalStatus_list_in_progress,
	GoalStatus_list_on_hold,
	GoalStatus_list_on_target,
	GoalStatus_list_planned,
	GoalStatus_list_proposed,
	GoalStatus_list_rejected,
	GoalStatus_list_sustaining,
}

enum GraphCompartmentRule_list
{
	GraphCompartmentRule_list_custom,
	GraphCompartmentRule_list_different,
	GraphCompartmentRule_list_identical,
	GraphCompartmentRule_list_matching,
}

enum GroupType_list
{
	GroupType_list_animal,
	GroupType_list_device,
	GroupType_list_medication,
	GroupType_list_person,
	GroupType_list_practitioner,
	GroupType_list_substance,
}

enum GuidanceResponseStatus_list
{
	GuidanceResponseStatus_list_data_requested,
	GuidanceResponseStatus_list_data_required,
	GuidanceResponseStatus_list_entered_in_error,
	GuidanceResponseStatus_list_failure,
	GuidanceResponseStatus_list_in_progress,
	GuidanceResponseStatus_list_success,
}

enum GuideDependencyType_list
{
	GuideDependencyType_list_inclusion,
	GuideDependencyType_list_reference,
}

enum GuidePageKind_list
{
	GuidePageKind_list_dictionary,
	GuidePageKind_list_directory,
	GuidePageKind_list_example,
	GuidePageKind_list_include,
	GuidePageKind_list_list,
	GuidePageKind_list_page,
	GuidePageKind_list_resource,
	GuidePageKind_list_toc,
}

enum HTTPVerb_list
{
	HTTPVerb_list_DELETE,
	HTTPVerb_list_GET,
	HTTPVerb_list_POST,
	HTTPVerb_list_PUT,
}

enum IdentifierUse_list
{
	IdentifierUse_list_official,
	IdentifierUse_list_secondary,
	IdentifierUse_list_temp,
	IdentifierUse_list_usual,
}

enum IdentityAssuranceLevel_list
{
	IdentityAssuranceLevel_list_level1,
	IdentityAssuranceLevel_list_level2,
	IdentityAssuranceLevel_list_level3,
	IdentityAssuranceLevel_list_level4,
}

enum ImmunizationStatusCodes_list
{
	ImmunizationStatusCodes_list_completed,
	ImmunizationStatusCodes_list_entered_in_error,
}

enum InstanceAvailability_list
{
	InstanceAvailability_list_NEARLINE,
	InstanceAvailability_list_OFFLINE,
	InstanceAvailability_list_ONLINE,
	InstanceAvailability_list_UNAVAILABLE,
}

enum IssueSeverity_list
{
	IssueSeverity_list_error,
	IssueSeverity_list_fatal,
	IssueSeverity_list_information,
	IssueSeverity_list_warning,
}

enum IssueType_list
{
	IssueType_list_business_rule,
	IssueType_list_code_invalid,
	IssueType_list_conflict,
	IssueType_list_duplicate,
	IssueType_list_exception,
	IssueType_list_expired,
	IssueType_list_extension,
	IssueType_list_forbidden,
	IssueType_list_incomplete,
	IssueType_list_informational,
	IssueType_list_invalid,
	IssueType_list_invariant,
	IssueType_list_lock_error,
	IssueType_list_login,
	IssueType_list_no_store,
	IssueType_list_not_found,
	IssueType_list_not_supported,
	IssueType_list_processing,
	IssueType_list_required,
	IssueType_list_security,
	IssueType_list_structure,
	IssueType_list_suppressed,
	IssueType_list_throttled,
	IssueType_list_timeout,
	IssueType_list_too_costly,
	IssueType_list_too_long,
	IssueType_list_transient,
	IssueType_list_unknown,
	IssueType_list_value,
}

enum LinkType_list
{
	LinkType_list_refer,
	LinkType_list_replaced_by,
	LinkType_list_replaces,
	LinkType_list_seealso,
}

enum LinkageType_list
{
	LinkageType_list_alternate,
	LinkageType_list_historical,
	LinkageType_list_source,
}

enum ListMode_list
{
	ListMode_list_changes,
	ListMode_list_snapshot,
	ListMode_list_working,
}

enum ListStatus_list
{
	ListStatus_list_current,
	ListStatus_list_entered_in_error,
	ListStatus_list_retired,
}

enum LocationMode_list
{
	LocationMode_list_instance,
	LocationMode_list_kind,
}

enum LocationStatus_list
{
	LocationStatus_list_active,
	LocationStatus_list_inactive,
	LocationStatus_list_suspended,
}

enum MeasmntPrinciple_list
{
	MeasmntPrinciple_list_acoustical,
	MeasmntPrinciple_list_biological,
	MeasmntPrinciple_list_chemical,
	MeasmntPrinciple_list_electrical,
	MeasmntPrinciple_list_impedance,
	MeasmntPrinciple_list_manual,
	MeasmntPrinciple_list_mechanical,
	MeasmntPrinciple_list_nuclear,
	MeasmntPrinciple_list_optical,
	MeasmntPrinciple_list_other,
	MeasmntPrinciple_list_thermal,
}

enum MeasureReportStatus_list
{
	MeasureReportStatus_list_complete,
	MeasureReportStatus_list_error,
	MeasureReportStatus_list_pending,
}

enum MeasureReportType_list
{
	MeasureReportType_list_individual,
	MeasureReportType_list_patient_list,
	MeasureReportType_list_summary,
}

enum MedicationAdministrationStatus_list
{
	MedicationAdministrationStatus_list_completed,
	MedicationAdministrationStatus_list_entered_in_error,
	MedicationAdministrationStatus_list_in_progress,
	MedicationAdministrationStatus_list_on_hold,
	MedicationAdministrationStatus_list_stopped,
	MedicationAdministrationStatus_list_unknown,
}

enum MedicationDispenseStatus_list
{
	MedicationDispenseStatus_list_completed,
	MedicationDispenseStatus_list_entered_in_error,
	MedicationDispenseStatus_list_in_progress,
	MedicationDispenseStatus_list_on_hold,
	MedicationDispenseStatus_list_preparation,
	MedicationDispenseStatus_list_stopped,
}

enum MedicationRequestIntent_list
{
	MedicationRequestIntent_list_instance_order,
	MedicationRequestIntent_list_order,
	MedicationRequestIntent_list_plan,
	MedicationRequestIntent_list_proposal,
}

enum MedicationRequestPriority_list
{
	MedicationRequestPriority_list_asap,
	MedicationRequestPriority_list_routine,
	MedicationRequestPriority_list_stat,
	MedicationRequestPriority_list_urgent,
}

enum MedicationRequestStatus_list
{
	MedicationRequestStatus_list_active,
	MedicationRequestStatus_list_cancelled,
	MedicationRequestStatus_list_completed,
	MedicationRequestStatus_list_draft,
	MedicationRequestStatus_list_entered_in_error,
	MedicationRequestStatus_list_on_hold,
	MedicationRequestStatus_list_stopped,
	MedicationRequestStatus_list_unknown,
}

enum MedicationStatementStatus_list
{
	MedicationStatementStatus_list_active,
	MedicationStatementStatus_list_completed,
	MedicationStatementStatus_list_entered_in_error,
	MedicationStatementStatus_list_intended,
	MedicationStatementStatus_list_on_hold,
	MedicationStatementStatus_list_stopped,
}

enum MedicationStatementTaken_list
{
	MedicationStatementTaken_list_n,
	MedicationStatementTaken_list_na,
	MedicationStatementTaken_list_unk,
	MedicationStatementTaken_list_y,
}

enum MedicationStatus_list
{
	MedicationStatus_list_active,
	MedicationStatus_list_entered_in_error,
	MedicationStatus_list_inactive,
}

enum MessageSignificanceCategory_list
{
	MessageSignificanceCategory_list_Consequence,
	MessageSignificanceCategory_list_Currency,
	MessageSignificanceCategory_list_Notification,
}

enum NameUse_list
{
	NameUse_list_anonymous,
	NameUse_list_maiden,
	NameUse_list_nickname,
	NameUse_list_official,
	NameUse_list_old,
	NameUse_list_temp,
	NameUse_list_usual,
}

enum NamingSystemIdentifierType_list
{
	NamingSystemIdentifierType_list_oid,
	NamingSystemIdentifierType_list_other,
	NamingSystemIdentifierType_list_uri,
	NamingSystemIdentifierType_list_uuid,
}

enum NamingSystemType_list
{
	NamingSystemType_list_codesystem,
	NamingSystemType_list_identifier,
	NamingSystemType_list_root,
}

enum NarrativeStatus_list
{
	NarrativeStatus_list_additional,
	NarrativeStatus_list_empty,
	NarrativeStatus_list_extensions,
	NarrativeStatus_list_generated,
}

enum NoteType_list
{
	NoteType_list_display,
	NoteType_list_print,
	NoteType_list_printoper,
}

enum NutritionOrderStatus_list
{
	NutritionOrderStatus_list_active,
	NutritionOrderStatus_list_cancelled,
	NutritionOrderStatus_list_completed,
	NutritionOrderStatus_list_draft,
	NutritionOrderStatus_list_entered_in_error,
	NutritionOrderStatus_list_on_hold,
	NutritionOrderStatus_list_planned,
	NutritionOrderStatus_list_proposed,
	NutritionOrderStatus_list_requested,
}

enum ObservationRelationshipType_list
{
	ObservationRelationshipType_list_derived_from,
	ObservationRelationshipType_list_has_member,
	ObservationRelationshipType_list_interfered_by,
	ObservationRelationshipType_list_qualified_by,
	ObservationRelationshipType_list_replaces,
	ObservationRelationshipType_list_sequel_to,
}

enum ObservationStatus_list
{
	ObservationStatus_list_amended,
	ObservationStatus_list_cancelled,
	ObservationStatus_list_corrected,
	ObservationStatus_list_entered_in_error,
	ObservationStatus_list_final,
	ObservationStatus_list_preliminary,
	ObservationStatus_list_registered,
	ObservationStatus_list_unknown,
}

enum OperationKind_list
{
	OperationKind_list_operation,
	OperationKind_list_query,
}

enum OperationParameterUse_list
{
	OperationParameterUse_list_in,
	OperationParameterUse_list_out,
}

enum ParticipantRequired_list
{
	ParticipantRequired_list_information_only,
	ParticipantRequired_list_optional,
	ParticipantRequired_list_required,
}

enum ParticipationStatus_list
{
	ParticipationStatus_list_accepted,
	ParticipationStatus_list_declined,
	ParticipationStatus_list_needs_action,
	ParticipationStatus_list_tentative,
}

enum PropertyRepresentation_list
{
	PropertyRepresentation_list_cdaText,
	PropertyRepresentation_list_typeAttr,
	PropertyRepresentation_list_xhtml,
	PropertyRepresentation_list_xmlAttr,
	PropertyRepresentation_list_xmlText,
}

enum PropertyType_list
{
	PropertyType_list_Coding,
	PropertyType_list_boolean,
	PropertyType_list_code,
	PropertyType_list_dateTime,
	PropertyType_list_integer,
	PropertyType_list_string,
}

enum ProvenanceEntityRole_list
{
	ProvenanceEntityRole_list_derivation,
	ProvenanceEntityRole_list_quotation,
	ProvenanceEntityRole_list_removal,
	ProvenanceEntityRole_list_revision,
	ProvenanceEntityRole_list_source,
}

enum PublicationStatus_list
{
	PublicationStatus_list_active,
	PublicationStatus_list_draft,
	PublicationStatus_list_retired,
	PublicationStatus_list_unknown,
}

enum QuantityComparator_list
{
	QuantityComparator_list__,
	QuantityComparator_list___,
	QuantityComparator_list__,
	QuantityComparator_list___,
}

enum QuestionnaireItemType_list
{
	QuestionnaireItemType_list_attachment,
	QuestionnaireItemType_list_boolean,
	QuestionnaireItemType_list_choice,
	QuestionnaireItemType_list_date,
	QuestionnaireItemType_list_dateTime,
	QuestionnaireItemType_list_decimal,
	QuestionnaireItemType_list_display,
	QuestionnaireItemType_list_group,
	QuestionnaireItemType_list_integer,
	QuestionnaireItemType_list_open_choice,
	QuestionnaireItemType_list_quantity,
	QuestionnaireItemType_list_reference,
	QuestionnaireItemType_list_string,
	QuestionnaireItemType_list_text,
	QuestionnaireItemType_list_time,
	QuestionnaireItemType_list_url,
}

enum QuestionnaireResponseStatus_list
{
	QuestionnaireResponseStatus_list_amended,
	QuestionnaireResponseStatus_list_completed,
	QuestionnaireResponseStatus_list_entered_in_error,
	QuestionnaireResponseStatus_list_in_progress,
	QuestionnaireResponseStatus_list_stopped,
}

enum ReferenceHandlingPolicy_list
{
	ReferenceHandlingPolicy_list_enforced,
	ReferenceHandlingPolicy_list_literal,
	ReferenceHandlingPolicy_list_local,
	ReferenceHandlingPolicy_list_logical,
	ReferenceHandlingPolicy_list_resolves,
}

enum ReferenceVersionRules_list
{
	ReferenceVersionRules_list_either,
	ReferenceVersionRules_list_independent,
	ReferenceVersionRules_list_specific,
}

enum RelatedArtifactType_list
{
	RelatedArtifactType_list_citation,
	RelatedArtifactType_list_composed_of,
	RelatedArtifactType_list_depends_on,
	RelatedArtifactType_list_derived_from,
	RelatedArtifactType_list_documentation,
	RelatedArtifactType_list_justification,
	RelatedArtifactType_list_predecessor,
	RelatedArtifactType_list_successor,
}

enum RemittanceOutcome_list
{
	RemittanceOutcome_list_complete,
	RemittanceOutcome_list_error,
	RemittanceOutcome_list_partial,
}

enum RequestIntent_list
{
	RequestIntent_list_filler_order,
	RequestIntent_list_instance_order,
	RequestIntent_list_option,
	RequestIntent_list_order,
	RequestIntent_list_original_order,
	RequestIntent_list_plan,
	RequestIntent_list_proposal,
	RequestIntent_list_reflex_order,
}

enum RequestPriority_list
{
	RequestPriority_list_asap,
	RequestPriority_list_routine,
	RequestPriority_list_stat,
	RequestPriority_list_urgent,
}

enum RequestStatus_list
{
	RequestStatus_list_active,
	RequestStatus_list_cancelled,
	RequestStatus_list_completed,
	RequestStatus_list_draft,
	RequestStatus_list_entered_in_error,
	RequestStatus_list_suspended,
	RequestStatus_list_unknown,
}

enum ResearchStudyStatus_list
{
	ResearchStudyStatus_list_completed,
	ResearchStudyStatus_list_draft,
	ResearchStudyStatus_list_entered_in_error,
	ResearchStudyStatus_list_in_progress,
	ResearchStudyStatus_list_stopped,
	ResearchStudyStatus_list_suspended,
}

enum ResearchSubjectStatus_list
{
	ResearchSubjectStatus_list_active,
	ResearchSubjectStatus_list_candidate,
	ResearchSubjectStatus_list_completed,
	ResearchSubjectStatus_list_enrolled,
	ResearchSubjectStatus_list_suspended,
	ResearchSubjectStatus_list_withdrawn,
}

enum ResourceType_list
{
	ResourceType_list_Account,
	ResourceType_list_ActivityDefinition,
	ResourceType_list_AdverseEvent,
	ResourceType_list_AllergyIntolerance,
	ResourceType_list_Appointment,
	ResourceType_list_AppointmentResponse,
	ResourceType_list_AuditEvent,
	ResourceType_list_Basic,
	ResourceType_list_Binary,
	ResourceType_list_BodySite,
	ResourceType_list_Bundle,
	ResourceType_list_CapabilityStatement,
	ResourceType_list_CarePlan,
	ResourceType_list_CareTeam,
	ResourceType_list_ChargeItem,
	ResourceType_list_Claim,
	ResourceType_list_ClaimResponse,
	ResourceType_list_ClinicalImpression,
	ResourceType_list_CodeSystem,
	ResourceType_list_Communication,
	ResourceType_list_CommunicationRequest,
	ResourceType_list_CompartmentDefinition,
	ResourceType_list_Composition,
	ResourceType_list_ConceptMap,
	ResourceType_list_Condition,
	ResourceType_list_Consent,
	ResourceType_list_Contract,
	ResourceType_list_Coverage,
	ResourceType_list_DataElement,
	ResourceType_list_DetectedIssue,
	ResourceType_list_Device,
	ResourceType_list_DeviceComponent,
	ResourceType_list_DeviceMetric,
	ResourceType_list_DeviceRequest,
	ResourceType_list_DeviceUseStatement,
	ResourceType_list_DiagnosticReport,
	ResourceType_list_DocumentManifest,
	ResourceType_list_DocumentReference,
	ResourceType_list_DomainResource,
	ResourceType_list_EligibilityRequest,
	ResourceType_list_EligibilityResponse,
	ResourceType_list_Encounter,
	ResourceType_list_Endpoint,
	ResourceType_list_EnrollmentRequest,
	ResourceType_list_EnrollmentResponse,
	ResourceType_list_EpisodeOfCare,
	ResourceType_list_ExpansionProfile,
	ResourceType_list_ExplanationOfBenefit,
	ResourceType_list_FamilyMemberHistory,
	ResourceType_list_Flag,
	ResourceType_list_Goal,
	ResourceType_list_GraphDefinition,
	ResourceType_list_Group,
	ResourceType_list_GuidanceResponse,
	ResourceType_list_HealthcareService,
	ResourceType_list_ImagingManifest,
	ResourceType_list_ImagingStudy,
	ResourceType_list_Immunization,
	ResourceType_list_ImmunizationRecommendation,
	ResourceType_list_ImplementationGuide,
	ResourceType_list_Library,
	ResourceType_list_Linkage,
	ResourceType_list_List,
	ResourceType_list_Location,
	ResourceType_list_Measure,
	ResourceType_list_MeasureReport,
	ResourceType_list_Media,
	ResourceType_list_Medication,
	ResourceType_list_MedicationAdministration,
	ResourceType_list_MedicationDispense,
	ResourceType_list_MedicationRequest,
	ResourceType_list_MedicationStatement,
	ResourceType_list_MessageDefinition,
	ResourceType_list_MessageHeader,
	ResourceType_list_NamingSystem,
	ResourceType_list_NutritionOrder,
	ResourceType_list_Observation,
	ResourceType_list_OperationDefinition,
	ResourceType_list_OperationOutcome,
	ResourceType_list_Organization,
	ResourceType_list_Parameters,
	ResourceType_list_Patient,
	ResourceType_list_PaymentNotice,
	ResourceType_list_PaymentReconciliation,
	ResourceType_list_Person,
	ResourceType_list_PlanDefinition,
	ResourceType_list_Practitioner,
	ResourceType_list_PractitionerRole,
	ResourceType_list_Procedure,
	ResourceType_list_ProcedureRequest,
	ResourceType_list_ProcessRequest,
	ResourceType_list_ProcessResponse,
	ResourceType_list_Provenance,
	ResourceType_list_Questionnaire,
	ResourceType_list_QuestionnaireResponse,
	ResourceType_list_ReferralRequest,
	ResourceType_list_RelatedPerson,
	ResourceType_list_RequestGroup,
	ResourceType_list_ResearchStudy,
	ResourceType_list_ResearchSubject,
	ResourceType_list_Resource,
	ResourceType_list_RiskAssessment,
	ResourceType_list_Schedule,
	ResourceType_list_SearchParameter,
	ResourceType_list_Sequence,
	ResourceType_list_ServiceDefinition,
	ResourceType_list_Slot,
	ResourceType_list_Specimen,
	ResourceType_list_StructureDefinition,
	ResourceType_list_StructureMap,
	ResourceType_list_Subscription,
	ResourceType_list_Substance,
	ResourceType_list_SupplyDelivery,
	ResourceType_list_SupplyRequest,
	ResourceType_list_Task,
	ResourceType_list_TestReport,
	ResourceType_list_TestScript,
	ResourceType_list_ValueSet,
	ResourceType_list_VisionPrescription,
}

enum ResourceVersionPolicy_list
{
	ResourceVersionPolicy_list_no_version,
	ResourceVersionPolicy_list_versioned,
	ResourceVersionPolicy_list_versioned_update,
}

enum ResponseType_list
{
	ResponseType_list_fatal_error,
	ResponseType_list_ok,
	ResponseType_list_transient_error,
}

enum RestfulCapabilityMode_list
{
	RestfulCapabilityMode_list_client,
	RestfulCapabilityMode_list_server,
}

enum Scope
{
	Scope_col,
	Scope_colgroup,
	Scope_row,
	Scope_rowgroup,
}

enum SearchComparator_list
{
	SearchComparator_list_ap,
	SearchComparator_list_eb,
	SearchComparator_list_eq,
	SearchComparator_list_ge,
	SearchComparator_list_gt,
	SearchComparator_list_le,
	SearchComparator_list_lt,
	SearchComparator_list_ne,
	SearchComparator_list_sa,
}

enum SearchEntryMode_list
{
	SearchEntryMode_list_include,
	SearchEntryMode_list_match,
	SearchEntryMode_list_outcome,
}

enum SearchModifierCode_list
{
	SearchModifierCode_list_above,
	SearchModifierCode_list_below,
	SearchModifierCode_list_contains,
	SearchModifierCode_list_exact,
	SearchModifierCode_list_in,
	SearchModifierCode_list_missing,
	SearchModifierCode_list_not,
	SearchModifierCode_list_not_in,
	SearchModifierCode_list_text,
	SearchModifierCode_list_type,
}

enum SearchParamType_list
{
	SearchParamType_list_composite,
	SearchParamType_list_date,
	SearchParamType_list_number,
	SearchParamType_list_quantity,
	SearchParamType_list_reference,
	SearchParamType_list_string,
	SearchParamType_list_token,
	SearchParamType_list_uri,
}

enum Shape
{
	Shape_circle,
	Shape_default,
	Shape_poly,
	Shape_rect,
}

enum SlicingRules_list
{
	SlicingRules_list_closed,
	SlicingRules_list_open,
	SlicingRules_list_openAtEnd,
}

enum SlotStatus_list
{
	SlotStatus_list_busy,
	SlotStatus_list_busy_tentative,
	SlotStatus_list_busy_unavailable,
	SlotStatus_list_entered_in_error,
	SlotStatus_list_free,
}

enum SpecimenStatus_list
{
	SpecimenStatus_list_available,
	SpecimenStatus_list_entered_in_error,
	SpecimenStatus_list_unavailable,
	SpecimenStatus_list_unsatisfactory,
}

enum StructureDefinitionKind_list
{
	StructureDefinitionKind_list_complex_type,
	StructureDefinitionKind_list_logical,
	StructureDefinitionKind_list_primitive_type,
	StructureDefinitionKind_list_resource,
}

enum StructureMapContextType_list
{
	StructureMapContextType_list_type,
	StructureMapContextType_list_variable,
}

enum StructureMapGroupTypeMode_list
{
	StructureMapGroupTypeMode_list_none,
	StructureMapGroupTypeMode_list_type_and_types,
	StructureMapGroupTypeMode_list_types,
}

enum StructureMapInputMode_list
{
	StructureMapInputMode_list_source,
	StructureMapInputMode_list_target,
}

enum StructureMapModelMode_list
{
	StructureMapModelMode_list_produced,
	StructureMapModelMode_list_queried,
	StructureMapModelMode_list_source,
	StructureMapModelMode_list_target,
}

enum StructureMapSourceListMode_list
{
	StructureMapSourceListMode_list_first,
	StructureMapSourceListMode_list_last,
	StructureMapSourceListMode_list_not_first,
	StructureMapSourceListMode_list_not_last,
	StructureMapSourceListMode_list_only_one,
}

enum StructureMapTargetListMode_list
{
	StructureMapTargetListMode_list_collate,
	StructureMapTargetListMode_list_first,
	StructureMapTargetListMode_list_last,
	StructureMapTargetListMode_list_share,
}

enum StructureMapTransform_list
{
	StructureMapTransform_list_append,
	StructureMapTransform_list_c,
	StructureMapTransform_list_cast,
	StructureMapTransform_list_cc,
	StructureMapTransform_list_copy,
	StructureMapTransform_list_cp,
	StructureMapTransform_list_create,
	StructureMapTransform_list_dateOp,
	StructureMapTransform_list_escape,
	StructureMapTransform_list_evaluate,
	StructureMapTransform_list_id,
	StructureMapTransform_list_pointer,
	StructureMapTransform_list_qty,
	StructureMapTransform_list_reference,
	StructureMapTransform_list_translate,
	StructureMapTransform_list_truncate,
	StructureMapTransform_list_uuid,
}

enum SubscriptionChannelType_list
{
	SubscriptionChannelType_list_email,
	SubscriptionChannelType_list_message,
	SubscriptionChannelType_list_rest_hook,
	SubscriptionChannelType_list_sms,
	SubscriptionChannelType_list_websocket,
}

enum SubscriptionStatus_list
{
	SubscriptionStatus_list_active,
	SubscriptionStatus_list_error,
	SubscriptionStatus_list_off,
	SubscriptionStatus_list_requested,
}

enum SupplyDeliveryStatus_list
{
	SupplyDeliveryStatus_list_abandoned,
	SupplyDeliveryStatus_list_completed,
	SupplyDeliveryStatus_list_entered_in_error,
	SupplyDeliveryStatus_list_in_progress,
}

enum SupplyRequestStatus_list
{
	SupplyRequestStatus_list_active,
	SupplyRequestStatus_list_cancelled,
	SupplyRequestStatus_list_completed,
	SupplyRequestStatus_list_draft,
	SupplyRequestStatus_list_entered_in_error,
	SupplyRequestStatus_list_suspended,
	SupplyRequestStatus_list_unknown,
}

enum SystemRestfulInteraction_list
{
	SystemRestfulInteraction_list_batch,
	SystemRestfulInteraction_list_history_system,
	SystemRestfulInteraction_list_search_system,
	SystemRestfulInteraction_list_transaction,
}

enum SystemVersionProcessingMode_list
{
	SystemVersionProcessingMode_list_check,
	SystemVersionProcessingMode_list_default,
	SystemVersionProcessingMode_list_override,
}

enum TFrame
{
	TFrame_above,
	TFrame_below,
	TFrame_border,
	TFrame_box,
	TFrame_hsides,
	TFrame_lhs,
	TFrame_rhs,
	TFrame_void,
	TFrame_vsides,
}

enum TRules
{
	TRules_all,
	TRules_cols,
	TRules_groups,
	TRules_none,
	TRules_rows,
}

enum TaskStatus_list
{
	TaskStatus_list_accepted,
	TaskStatus_list_cancelled,
	TaskStatus_list_completed,
	TaskStatus_list_draft,
	TaskStatus_list_entered_in_error,
	TaskStatus_list_failed,
	TaskStatus_list_in_progress,
	TaskStatus_list_on_hold,
	TaskStatus_list_ready,
	TaskStatus_list_received,
	TaskStatus_list_rejected,
	TaskStatus_list_requested,
}

enum TestReportActionResult_list
{
	TestReportActionResult_list_error,
	TestReportActionResult_list_fail,
	TestReportActionResult_list_pass,
	TestReportActionResult_list_skip,
	TestReportActionResult_list_warning,
}

enum TestReportParticipantType_list
{
	TestReportParticipantType_list_client,
	TestReportParticipantType_list_server,
	TestReportParticipantType_list_test_engine,
}

enum TestReportResult_list
{
	TestReportResult_list_fail,
	TestReportResult_list_pass,
	TestReportResult_list_pending,
}

enum TestReportStatus_list
{
	TestReportStatus_list_completed,
	TestReportStatus_list_entered_in_error,
	TestReportStatus_list_in_progress,
	TestReportStatus_list_stopped,
	TestReportStatus_list_waiting,
}

enum TestScriptRequestMethodCode_list
{
	TestScriptRequestMethodCode_list_delete,
	TestScriptRequestMethodCode_list_get,
	TestScriptRequestMethodCode_list_options,
	TestScriptRequestMethodCode_list_patch,
	TestScriptRequestMethodCode_list_post,
	TestScriptRequestMethodCode_list_put,
}

enum TriggerType_list
{
	TriggerType_list_data_access_ended,
	TriggerType_list_data_accessed,
	TriggerType_list_data_added,
	TriggerType_list_data_modified,
	TriggerType_list_data_removed,
	TriggerType_list_named_event,
	TriggerType_list_periodic,
}

enum TypeDerivationRule_list
{
	TypeDerivationRule_list_constraint,
	TypeDerivationRule_list_specialization,
}

enum TypeRestfulInteraction_list
{
	TypeRestfulInteraction_list_create,
	TypeRestfulInteraction_list_delete,
	TypeRestfulInteraction_list_history_instance,
	TypeRestfulInteraction_list_history_type,
	TypeRestfulInteraction_list_patch,
	TypeRestfulInteraction_list_read,
	TypeRestfulInteraction_list_search_type,
	TypeRestfulInteraction_list_update,
	TypeRestfulInteraction_list_vread,
}

enum UDIEntryType_list
{
	UDIEntryType_list_barcode,
	UDIEntryType_list_card,
	UDIEntryType_list_manual,
	UDIEntryType_list_rfid,
	UDIEntryType_list_self_reported,
	UDIEntryType_list_unknown,
}

enum UnitsOfTime_list
{
	UnitsOfTime_list_a,
	UnitsOfTime_list_d,
	UnitsOfTime_list_h,
	UnitsOfTime_list_min,
	UnitsOfTime_list_mo,
	UnitsOfTime_list_s,
	UnitsOfTime_list_wk,
}

enum UnknownContentCode_list
{
	UnknownContentCode_list_both,
	UnknownContentCode_list_elements,
	UnknownContentCode_list_extensions,
	UnknownContentCode_list_no,
}

enum Use_list
{
	Use_list_complete,
	Use_list_exploratory,
	Use_list_other,
	Use_list_proposed,
}

enum VisionBase_list
{
	VisionBase_list_down,
	VisionBase_list_in,
	VisionBase_list_out,
	VisionBase_list_up,
}

enum VisionEyes_list
{
	VisionEyes_list_left,
	VisionEyes_list_right,
}

enum XPathUsageType_list
{
	XPathUsageType_list_distance,
	XPathUsageType_list_nearby,
	XPathUsageType_list_normal,
	XPathUsageType_list_other,
	XPathUsageType_list_phonetic,
}

enum alignType
{
	alignType_center,
	alignType_char,
	alignType_justify,
	alignType_left,
	alignType_right,
}

enum dirType
{
	dirType_ltr,
	dirType_rtl,
}

enum ismapType
{
	ismapType_ismap,
}

enum nohrefType
{
	nohrefType_nohref,
}

enum qualityType_list
{
	qualityType_list_indel,
	qualityType_list_snp,
	qualityType_list_unknown,
}

enum repositoryType_list
{
	repositoryType_list_directlink,
	repositoryType_list_login,
	repositoryType_list_oauth,
	repositoryType_list_openapi,
	repositoryType_list_other,
}

enum spaceType
{
	spaceType_default,
	spaceType_preserve,
}

enum valignType
{
	valignType_baseline,
	valignType_bottom,
	valignType_middle,
	valignType_top,
}

struct UnspecifiedType
{
	1 : required string baseObjectType,
	2 : required binary object,
}

struct AccountStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AccountStatus_list value,
}

struct ActionCardinalityBehavior
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionCardinalityBehavior_list value,
}

struct ActionConditionKind
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionConditionKind_list value,
}

struct ActionGroupingBehavior
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionGroupingBehavior_list value,
}

struct ActionList
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionList_list value,
}

struct ActionParticipantType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionParticipantType_list value,
}

struct ActionPrecheckBehavior
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionPrecheckBehavior_list value,
}

struct ActionRelationshipType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionRelationshipType_list value,
}

struct ActionRequiredBehavior
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionRequiredBehavior_list value,
}

struct ActionSelectionBehavior
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionSelectionBehavior_list value,
}

struct ActivityDefinition_DynamicValue
{
	1 : optional string description,
	2 : optional string expression,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional string language,
	6 : optional list<binary> modifierExtension,
	7 : optional string path,
}

struct AddressType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AddressType_list value,
}

struct AddressUse
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AddressUse_list value,
}

struct AdministrativeGender
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AdministrativeGender_list value,
}

struct AdverseEventCategory
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AdverseEventCategory_list value,
}

struct AdverseEventCausality
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AdverseEventCausality_list value,
}

struct AggregationMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AggregationMode_list value,
}

struct AllergyIntoleranceCategory
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AllergyIntoleranceCategory_list value,
}

struct AllergyIntoleranceClinicalStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AllergyIntoleranceClinicalStatus_list value,
}

struct AllergyIntoleranceCriticality
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AllergyIntoleranceCriticality_list value,
}

struct AllergyIntoleranceSeverity
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AllergyIntoleranceSeverity_list value,
}

struct AllergyIntoleranceType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AllergyIntoleranceType_list value,
}

struct AllergyIntoleranceVerificationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AllergyIntoleranceVerificationStatus_list value,
}

struct AppointmentStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AppointmentStatus_list value,
}

struct AssertionDirectionType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AssertionDirectionType_list value,
}

struct AssertionOperatorType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AssertionOperatorType_list value,
}

struct AssertionResponseTypes
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AssertionResponseTypes_list value,
}

struct AuditEvent_Detail
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string type,
	5 : required binary value,
}

struct AuditEventAction
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AuditEventAction_list value,
}

struct AuditEventAgentNetworkType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AuditEventAgentNetworkType_list value,
}

struct AuditEventOutcome
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AuditEventOutcome_list value,
}

struct BindingStrength
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional BindingStrength_list value,
}

struct Block
{
}

struct BundleType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional BundleType_list value,
}

struct CapabilityStatement_Software
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string name,
	5 : optional i64 releaseDate,
	6 : optional string version,
}

struct CapabilityStatementKind
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CapabilityStatementKind_list value,
}

struct CarePlanActivityStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CarePlanActivityStatus_list value,
}

struct CarePlanIntent
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CarePlanIntent_list value,
}

struct CarePlanStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CarePlanStatus_list value,
}

struct CareTeamStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CareTeamStatus_list value,
}

struct ChargeItemStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ChargeItemStatus_list value,
}

struct ClinicalImpressionStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ClinicalImpressionStatus_list value,
}

struct CodeSystemContentMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CodeSystemContentMode_list value,
}

struct CodeSystemHierarchyMeaning
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CodeSystemHierarchyMeaning_list value,
}

struct CompartmentType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CompartmentType_list value,
}

struct CompositionAttestationMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CompositionAttestationMode_list value,
}

struct CompositionStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CompositionStatus_list value,
}

struct ConceptMapEquivalence
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConceptMapEquivalence_list value,
}

struct ConceptMapGroupUnmappedMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConceptMapGroupUnmappedMode_list value,
}

struct ConditionClinicalStatusCodes
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConditionClinicalStatusCodes_list value,
}

struct ConditionVerificationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConditionVerificationStatus_list value,
}

struct ConditionalDeleteStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConditionalDeleteStatus_list value,
}

struct ConditionalReadStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConditionalReadStatus_list value,
}

struct ConfidentialityClassification
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConfidentialityClassification_list value,
}

struct ConsentDataMeaning
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConsentDataMeaning_list value,
}

struct ConsentExceptType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConsentExceptType_list value,
}

struct ConsentState
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConsentState_list value,
}

struct ConstraintSeverity
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConstraintSeverity_list value,
}

struct ContactPointSystem
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ContactPointSystem_list value,
}

struct ContactPointUse
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ContactPointUse_list value,
}

struct ContentType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ContentType_list value,
}

struct ContractResourceStatusCodes
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ContractResourceStatusCodes_list value,
}

struct ContributorType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ContributorType_list value,
}

struct Coverage_Grouping
{
	1 : optional string _class,
	2 : optional string classDisplay,
	3 : optional list<binary> extension,
	4 : optional string group,
	5 : optional string groupDisplay,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
	8 : optional string plan,
	9 : optional string planDisplay,
	10 : optional string subClass,
	11 : optional string subClassDisplay,
	12 : optional string subGroup,
	13 : optional string subGroupDisplay,
	14 : optional string subPlan,
	15 : optional string subPlanDisplay,
}

struct DataElementStringency
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DataElementStringency_list value,
}

struct DaysOfWeek
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DaysOfWeek_list value,
}

struct DetectedIssueSeverity
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DetectedIssueSeverity_list value,
}

struct DeviceMetricCalibrationState
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DeviceMetricCalibrationState_list value,
}

struct DeviceMetricCalibrationType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DeviceMetricCalibrationType_list value,
}

struct DeviceMetricCategory
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DeviceMetricCategory_list value,
}

struct DeviceMetricColor
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DeviceMetricColor_list value,
}

struct DeviceMetricOperationalStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DeviceMetricOperationalStatus_list value,
}

struct DeviceUseStatementStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DeviceUseStatementStatus_list value,
}

struct DiagnosticReportStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DiagnosticReportStatus_list value,
}

struct DigitalMediaType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DigitalMediaType_list value,
}

struct DiscriminatorType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DiscriminatorType_list value,
}

struct DocumentMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DocumentMode_list value,
}

struct DocumentReferenceStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DocumentReferenceStatus_list value,
}

struct DocumentRelationshipType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DocumentRelationshipType_list value,
}

struct ElementDefinition_Base
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required string max,
	4 : required int32 min,
	5 : required string path,
}

struct ElementDefinition_Discriminator
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required string path,
	4 : required DiscriminatorType type,
}

struct EncounterLocationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional EncounterLocationStatus_list value,
}

struct EncounterStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional EncounterStatus_list value,
}

struct EndpointStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional EndpointStatus_list value,
}

struct EpisodeOfCareStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional EpisodeOfCareStatus_list value,
}

struct EventCapabilityMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional EventCapabilityMode_list value,
}

struct EventStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional EventStatus_list value,
}

struct EventTiming
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional EventTiming_list value,
}

struct ExplanationOfBenefitStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ExplanationOfBenefitStatus_list value,
}

struct ExtensionContext
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ExtensionContext_list value,
}

struct FHIRAllTypes
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FHIRAllTypes_list value,
}

struct FHIRDefinedType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FHIRDefinedType_list value,
}

struct FHIRDeviceStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FHIRDeviceStatus_list value,
}

struct FHIRSubstanceStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FHIRSubstanceStatus_list value,
}

struct FamilyHistoryStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FamilyHistoryStatus_list value,
}

struct FilterOperator
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FilterOperator_list value,
}

struct FinancialResourceStatusCodes
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FinancialResourceStatusCodes_list value,
}

struct FlagStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FlagStatus_list value,
}

struct Flow
{
}

struct GoalStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional GoalStatus_list value,
}

struct GraphCompartmentRule
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional GraphCompartmentRule_list value,
}

struct GraphDefinition_Compartment
{
	1 : required CompartmentType code,
	2 : optional string description,
	3 : optional string expression,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
	7 : required GraphCompartmentRule rule,
}

struct GroupType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional GroupType_list value,
}

struct GuidanceResponseStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional GuidanceResponseStatus_list value,
}

struct GuideDependencyType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional GuideDependencyType_list value,
}

struct GuidePageKind
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional GuidePageKind_list value,
}

struct HTTPVerb
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional HTTPVerb_list value,
}

struct IdentifierUse
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional IdentifierUse_list value,
}

struct IdentityAssuranceLevel
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional IdentityAssuranceLevel_list value,
}

struct ImmunizationStatusCodes
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ImmunizationStatusCodes_list value,
}

struct Inline
{
}

struct InstanceAvailability
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional InstanceAvailability_list value,
}

struct IssueSeverity
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional IssueSeverity_list value,
}

struct IssueType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional IssueType_list value,
}

struct LinkType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional LinkType_list value,
}

struct LinkageType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional LinkageType_list value,
}

struct ListMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ListMode_list value,
}

struct ListStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ListStatus_list value,
}

struct Location_Position
{
	1 : optional double altitude,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required double latitude,
	5 : required double longitude,
	6 : optional list<binary> modifierExtension,
}

struct LocationMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional LocationMode_list value,
}

struct LocationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional LocationStatus_list value,
}

struct MeasmntPrinciple
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MeasmntPrinciple_list value,
}

struct MeasureReportStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MeasureReportStatus_list value,
}

struct MeasureReportType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MeasureReportType_list value,
}

struct Medication_Batch
{
	1 : optional i64 expirationDate,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional string lotNumber,
	5 : optional list<binary> modifierExtension,
}

struct MedicationAdministrationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationAdministrationStatus_list value,
}

struct MedicationDispenseStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationDispenseStatus_list value,
}

struct MedicationRequestIntent
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationRequestIntent_list value,
}

struct MedicationRequestPriority
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationRequestPriority_list value,
}

struct MedicationRequestStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationRequestStatus_list value,
}

struct MedicationStatementStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationStatementStatus_list value,
}

struct MedicationStatementTaken
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationStatementTaken_list value,
}

struct MedicationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationStatus_list value,
}

struct MessageSignificanceCategory
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MessageSignificanceCategory_list value,
}

struct NameUse
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional NameUse_list value,
}

struct NamingSystemIdentifierType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional NamingSystemIdentifierType_list value,
}

struct NamingSystemType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional NamingSystemType_list value,
}

struct NarrativeStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional NarrativeStatus_list value,
}

struct NoteType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional NoteType_list value,
}

struct NutritionOrderStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional NutritionOrderStatus_list value,
}

struct ObservationRelationshipType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ObservationRelationshipType_list value,
}

struct ObservationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ObservationStatus_list value,
}

struct OperationDefinition_Overload
{
	1 : optional string comment,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional list<string> parameterName,
}

struct OperationKind
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional OperationKind_list value,
}

struct OperationParameterUse
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional OperationParameterUse_list value,
}

struct ParticipantRequired
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ParticipantRequired_list value,
}

struct ParticipationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ParticipationStatus_list value,
}

struct Period
{
	1 : optional i64 end,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional i64 start,
}

struct PlanDefinition_Condition
{
	1 : optional string description,
	2 : optional string expression,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : required ActionConditionKind kind,
	6 : optional string language,
	7 : optional list<binary> modifierExtension,
}

struct PlanDefinition_DynamicValue
{
	1 : optional string description,
	2 : optional string expression,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional string language,
	6 : optional list<binary> modifierExtension,
	7 : optional string path,
}

struct PractitionerRole_NotAvailable
{
	1 : required string description,
	2 : optional Period during,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct ProcessRequest_Item
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required i64 sequenceLinkId,
}

struct PropertyRepresentation
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional PropertyRepresentation_list value,
}

struct PropertyType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional PropertyType_list value,
}

struct ProvenanceEntityRole
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ProvenanceEntityRole_list value,
}

struct PublicationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional PublicationStatus_list value,
}

struct QuantityComparator
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional QuantityComparator_list value,
}

struct QuestionnaireItemType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional QuestionnaireItemType_list value,
}

struct QuestionnaireResponseStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional QuestionnaireResponseStatus_list value,
}

struct ReferenceHandlingPolicy
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ReferenceHandlingPolicy_list value,
}

struct ReferenceVersionRules
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ReferenceVersionRules_list value,
}

struct RelatedArtifactType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional RelatedArtifactType_list value,
}

struct RemittanceOutcome
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional RemittanceOutcome_list value,
}

struct RequestGroup_Condition
{
	1 : optional string description,
	2 : optional string expression,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : required ActionConditionKind kind,
	6 : optional string language,
	7 : optional list<binary> modifierExtension,
}

struct RequestIntent
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional RequestIntent_list value,
}

struct RequestPriority
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional RequestPriority_list value,
}

struct RequestStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional RequestStatus_list value,
}

struct ResearchStudyStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ResearchStudyStatus_list value,
}

struct ResearchSubjectStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ResearchSubjectStatus_list value,
}

struct ResourceType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ResourceType_list value,
}

struct ResourceVersionPolicy
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ResourceVersionPolicy_list value,
}

struct ResponseType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ResponseType_list value,
}

struct RestfulCapabilityMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional RestfulCapabilityMode_list value,
}

struct SampledDataDataType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string value,
}

struct SearchComparator
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SearchComparator_list value,
}

struct SearchEntryMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SearchEntryMode_list value,
}

struct SearchModifierCode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SearchModifierCode_list value,
}

struct SearchParamType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SearchParamType_list value,
}

struct SlicingRules
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SlicingRules_list value,
}

struct SlotStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SlotStatus_list value,
}

struct SpecimenStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SpecimenStatus_list value,
}

struct StructureDefinitionKind
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureDefinitionKind_list value,
}

struct StructureMapContextType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureMapContextType_list value,
}

struct StructureMapGroupTypeMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureMapGroupTypeMode_list value,
}

struct StructureMapInputMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureMapInputMode_list value,
}

struct StructureMapModelMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureMapModelMode_list value,
}

struct StructureMapSourceListMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureMapSourceListMode_list value,
}

struct StructureMapTargetListMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureMapTargetListMode_list value,
}

struct StructureMapTransform
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureMapTransform_list value,
}

struct SubscriptionChannelType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SubscriptionChannelType_list value,
}

struct SubscriptionStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SubscriptionStatus_list value,
}

struct SupplyDeliveryStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SupplyDeliveryStatus_list value,
}

struct SupplyRequestStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SupplyRequestStatus_list value,
}

struct SystemRestfulInteraction
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SystemRestfulInteraction_list value,
}

struct SystemVersionProcessingMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SystemVersionProcessingMode_list value,
}

struct TaskStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TaskStatus_list value,
}

struct TestReportActionResult
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TestReportActionResult_list value,
}

struct TestReportParticipantType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TestReportParticipantType_list value,
}

struct TestReportResult
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TestReportResult_list value,
}

struct TestReportStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TestReportStatus_list value,
}

struct TestScript_Param
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string name,
	5 : optional string value,
}

struct TestScript_Param1
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string name,
	5 : optional string value,
}

struct TestScript_Param2
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string name,
	5 : required string value,
}

struct TestScript_Param3
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string name,
	5 : required string value,
}

struct TestScript_RequestHeader
{
	1 : optional list<binary> extension,
	2 : required string field,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required string value,
}

struct TestScriptRequestMethodCode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TestScriptRequestMethodCode_list value,
}

struct TriggerType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TriggerType_list value,
}

struct TypeDerivationRule
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TypeDerivationRule_list value,
}

struct TypeRestfulInteraction
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TypeRestfulInteraction_list value,
}

struct UDIEntryType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional UDIEntryType_list value,
}

struct UnitsOfTime
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional UnitsOfTime_list value,
}

struct UnknownContentCode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional UnknownContentCode_list value,
}

struct Use
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional Use_list value,
}

struct VisionBase
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional VisionBase_list value,
}

struct VisionEyes
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional VisionEyes_list value,
}

struct XPathUsageType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional XPathUsageType_list value,
}

struct a_content
{
}

struct aType
{
	1 : optional string accesskey,
	2 : optional string charset,
	3 : optional list_string_ _class,
	4 : optional string coords,
	5 : optional dirType dir,
	6 : optional UnspecifiedType href,
	7 : optional string hreflang,
	8 : optional string id,
	9 : optional string lang,
	10 : optional string name,
	11 : optional list_string_ rel,
	12 : optional list_string_ rev,
	13 : optional Shape shape,
	14 : optional string style,
	15 : optional i64 tabindex,
	16 : optional string title,
	17 : optional string type,
}

struct abbrType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct acronymType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct addressType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct areaType
{
	1 : optional string accesskey,
	2 : required string alt,
	3 : optional list_string_ _class,
	4 : optional string coords,
	5 : optional dirType dir,
	6 : optional UnspecifiedType href,
	7 : optional string id,
	8 : optional string lang,
	9 : optional nohrefType nohref,
	10 : optional Shape shape,
	11 : optional string style,
	12 : optional i64 tabindex,
	13 : optional string title,
}

struct bType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct _base64Binary
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional binary value,
}

struct bigType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct blockquoteType
{
	1 : optional UnspecifiedType cite,
	2 : optional list_string_ _class,
	3 : optional dirType dir,
	4 : optional string id,
	5 : optional string lang,
	6 : optional string style,
	7 : optional string title,
}

struct _boolean
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional bool value,
}

struct brType
{
	1 : optional list_string_ _class,
	2 : optional string id,
	3 : optional string style,
	4 : optional string title,
}

struct captionType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct citeType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct code
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string value,
}

struct codeType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct colType
{
	1 : optional alignType align,
	2 : optional string char,
	3 : optional string charoff,
	4 : optional list_string_ _class,
	5 : optional dirType dir,
	6 : optional string id,
	7 : optional string lang,
	8 : optional i64 span,
	9 : optional string style,
	10 : optional string title,
	11 : optional valignType valign,
	12 : optional string width,
}

struct colgroupType
{
	1 : optional alignType align,
	2 : optional string char,
	3 : optional string charoff,
	4 : optional list_string_ _class,
	5 : optional list<colType> col,
	6 : optional dirType dir,
	7 : optional string id,
	8 : optional string lang,
	9 : optional i64 span,
	10 : optional string style,
	11 : optional string title,
	12 : optional valignType valign,
	13 : optional string width,
}

struct _date
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional binary value,
}

struct _dateTime
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional binary value,
}

struct ddType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct _decimal
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional double value,
}

struct dfnType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct divType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct dtType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct emType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct h1Type
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct h2Type
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct h3Type
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct h4Type
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct h5Type
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct h6Type
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct hrType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct iType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct id
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string value,
}

struct imgType
{
	1 : required string alt,
	2 : optional list_string_ _class,
	3 : optional dirType dir,
	4 : optional string height,
	5 : optional string id,
	6 : optional ismapType ismap,
	7 : optional string lang,
	8 : optional UnspecifiedType longdesc,
	9 : required UnspecifiedType src,
	10 : optional string style,
	11 : optional string title,
	12 : optional UnspecifiedType usemap,
	13 : optional string width,
}

struct instant
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional i64 value,
}

struct _integer
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional i32 value,
}

struct kbdType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct liType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct mapType
{
	1 : optional list<areaType> area,
	2 : optional UnspecifiedType _class,
	3 : optional dirType dir,
	4 : required string id,
	5 : optional string lang,
	6 : optional string name,
	7 : optional string style,
	8 : optional string title,
}

struct markdown
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string value,
}

struct oid
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional UnspecifiedType value,
}

struct olType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : required list<liType> li,
	6 : optional string style,
	7 : optional string title,
}

struct pType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct positiveInt
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional i64 value,
}

struct pre_content
{
	1 : optional aType a,
}

struct preType
{
	1 : optional aType a,
	2 : optional list_string_ _class,
	3 : optional dirType dir,
	4 : optional string id,
	5 : optional string lang,
	6 : optional spaceType space,
	7 : optional string style,
	8 : optional string title,
}

struct qType
{
	1 : optional UnspecifiedType cite,
	2 : optional list_string_ _class,
	3 : optional dirType dir,
	4 : optional string id,
	5 : optional string lang,
	6 : optional string style,
	7 : optional string title,
}

struct qualityType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional qualityType_list value,
}

struct repositoryType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional repositoryType_list value,
}

struct sampType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct smallType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct spanType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct _string
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string value,
}

struct strongType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct subType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct supType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct tdType
{
	1 : optional string abbr,
	2 : optional alignType align,
	3 : optional UnspecifiedType axis,
	4 : optional string char,
	5 : optional string charoff,
	6 : optional list_string_ _class,
	7 : optional i64 colspan,
	8 : optional dirType dir,
	9 : optional binary headers,
	10 : optional string id,
	11 : optional string lang,
	12 : optional i64 rowspan,
	13 : optional Scope scope,
	14 : optional string style,
	15 : optional string title,
	16 : optional valignType valign,
}

struct thType
{
	1 : optional string abbr,
	2 : optional alignType align,
	3 : optional UnspecifiedType axis,
	4 : optional string char,
	5 : optional string charoff,
	6 : optional list_string_ _class,
	7 : optional i64 colspan,
	8 : optional dirType dir,
	9 : optional binary headers,
	10 : optional string id,
	11 : optional string lang,
	12 : optional i64 rowspan,
	13 : optional Scope scope,
	14 : optional string style,
	15 : optional string title,
	16 : optional valignType valign,
}

struct time
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional UnspecifiedType value,
}

struct trType
{
	1 : optional alignType align,
	2 : optional string char,
	3 : optional string charoff,
	4 : optional list_string_ _class,
	5 : optional dirType dir,
	6 : optional string id,
	7 : optional string lang,
	8 : optional string style,
	9 : optional tdType td,
	10 : optional thType th,
	11 : optional string title,
	12 : optional valignType valign,
}

struct ttType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct ulType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : required list<liType> li,
	6 : optional string style,
	7 : optional string title,
}

struct _unsignedInt
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional i64 value,
}

struct uri
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional UnspecifiedType value,
}

struct uuid
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional UnspecifiedType value,
}

struct varType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct Address
{
	1 : optional string city,
	2 : optional string country,
	3 : optional string district,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<string> line,
	7 : optional Period period,
	8 : optional string postalCode,
	9 : optional string state,
	10 : optional string text,
	11 : optional AddressType type,
	12 : optional AddressUse use,
}

struct Age
{
	1 : optional code _code,
	2 : optional QuantityComparator comparator,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri system,
	6 : optional string unit,
	7 : optional double value,
}

struct Attachment
{
	1 : optional code contentType,
	2 : optional i64 creation,
	3 : optional binary data,
	4 : optional list<binary> extension,
	5 : optional binary hash,
	6 : optional string id,
	7 : optional code language,
	8 : optional int32 size,
	9 : optional string title,
	10 : optional uri url,
}

struct AuditEvent_Network
{
	1 : optional string address,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional AuditEventAgentNetworkType type,
}

struct Bundle_Link
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string relation,
	5 : required uri url,
}

struct Bundle_Request
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string ifMatch,
	4 : optional instant ifModifiedSince,
	5 : optional string ifNoneExist,
	6 : optional string ifNoneMatch,
	7 : required HTTPVerb method,
	8 : optional list<binary> modifierExtension,
	9 : required uri url,
}

struct Bundle_Search
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SearchEntryMode mode,
	4 : optional list<binary> modifierExtension,
	5 : optional double score,
}

struct CapabilityStatement_Certificate
{
	1 : optional binary blob,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional code type,
}

struct CapabilityStatement_Implementation
{
	1 : required string description,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional uri url,
}

struct CapabilityStatement_Interaction
{
	1 : required TypeRestfulInteraction code,
	2 : optional string documentation,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct CapabilityStatement_Interaction1
{
	1 : required SystemRestfulInteraction code,
	2 : optional string documentation,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct CapabilityStatement_SearchParam
{
	1 : optional uri definition,
	2 : optional string documentation,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : required string name,
	7 : required SearchParamType type,
}

struct CodeSystem_Filter
{
	1 : required code _code,
	2 : optional string description,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : required list<FilterOperator> operator,
	7 : required string value,
}

struct CodeSystem_Property
{
	1 : required code _code,
	2 : optional string description,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : required PropertyType type,
	7 : optional uri _uri,
}

struct Coding
{
	1 : optional code _code,
	2 : optional string display,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri system,
	6 : optional bool userSelected,
	7 : optional string version,
}

struct CompartmentDefinition_Resource
{
	1 : required ResourceType code,
	2 : optional string documentation,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional list<string> param,
}

struct ConceptMap_DependsOn
{
	1 : required string code,
	2 : optional string display,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : required uri property,
	7 : optional uri system,
}

struct ConceptMap_Target
{
	1 : optional code _code,
	2 : optional string comment,
	3 : optional list<ConceptMap_DependsOn> dependsOn,
	4 : optional string display,
	5 : optional ConceptMapEquivalence equivalence,
	6 : optional list<binary> extension,
	7 : optional string id,
	8 : optional list<binary> modifierExtension,
	9 : optional list<ConceptMap_DependsOn> product,
}

struct ConceptMap_Unmapped
{
	1 : optional code _code,
	2 : optional string display,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : required ConceptMapGroupUnmappedMode mode,
	6 : optional list<binary> modifierExtension,
	7 : optional uri url,
}

struct Consent_Policy
{
	1 : optional uri authority,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional uri _uri,
}

struct ContactPoint
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional Period period,
	4 : optional positiveInt rank,
	5 : optional ContactPointSystem system,
	6 : optional ContactPointUse use,
	7 : optional string value,
}

struct Count
{
	1 : optional code _code,
	2 : optional QuantityComparator comparator,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri system,
	6 : optional string unit,
	7 : optional double value,
}

struct DataElement_Mapping
{
	1 : optional string comment,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required id identity,
	5 : optional list<binary> modifierExtension,
	6 : optional string name,
	7 : optional uri _uri,
}

struct Device_Udi
{
	1 : optional binary carrierAIDC,
	2 : optional string carrierHRF,
	3 : optional string deviceIdentifier,
	4 : optional UDIEntryType entryType,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional uri issuer,
	8 : optional uri jurisdiction,
	9 : optional list<binary> modifierExtension,
	10 : optional string name,
}

struct DeviceMetric_Calibration
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional DeviceMetricCalibrationState state,
	5 : optional instant time,
	6 : optional DeviceMetricCalibrationType type,
}

struct Distance
{
	1 : optional code _code,
	2 : optional QuantityComparator comparator,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri system,
	6 : optional string unit,
	7 : optional double value,
}

struct DocumentReference_Content
{
	1 : required Attachment attachment,
	2 : optional list<binary> extension,
	3 : optional Coding format,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct Duration
{
	1 : optional code _code,
	2 : optional QuantityComparator comparator,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri system,
	6 : optional string unit,
	7 : optional double value,
}

struct ElementDefinition_Constraint
{
	1 : required string expression,
	2 : optional list<binary> extension,
	3 : required string human,
	4 : optional string id,
	5 : required id key,
	6 : optional string requirements,
	7 : required ConstraintSeverity severity,
	8 : optional uri source,
	9 : optional string xpath,
}

struct ElementDefinition_Mapping
{
	1 : optional string comment,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required id identity,
	5 : optional code language,
	6 : required string map,
}

struct ElementDefinition_Slicing
{
	1 : optional string description,
	2 : optional list<ElementDefinition_Discriminator> discriminator,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional bool ordered,
	6 : required SlicingRules rules,
}

struct ElementDefinition_Type
{
	1 : optional list<AggregationMode> aggregation,
	2 : required uri code,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri profile,
	6 : optional uri targetProfile,
	7 : optional ReferenceVersionRules versioning,
}

struct Encounter_ClassHistory
{
	1 : required Coding _class,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required Period period,
}

struct Encounter_StatusHistory
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required Period period,
	5 : required EncounterStatus status,
}

struct EpisodeOfCare_StatusHistory
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required Period period,
	5 : required EpisodeOfCareStatus status,
}

struct ExpansionProfile_Designation1
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional code language,
	4 : optional list<binary> modifierExtension,
	5 : optional Coding use,
}

struct ExpansionProfile_Designation2
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional code language,
	4 : optional list<binary> modifierExtension,
	5 : optional Coding use,
}

struct ExpansionProfile_Exclude
{
	1 : optional list<ExpansionProfile_Designation2> designation,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct ExpansionProfile_ExcludedSystem
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required uri system,
	5 : optional string version,
}

struct ExpansionProfile_FixedVersion
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required SystemVersionProcessingMode mode,
	4 : optional list<binary> modifierExtension,
	5 : required uri system,
	6 : required string version,
}

struct ExpansionProfile_Include
{
	1 : optional list<ExpansionProfile_Designation1> designation,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct HealthcareService_AvailableTime
{
	1 : optional bool allDay,
	2 : optional time availableEndTime,
	3 : optional time availableStartTime,
	4 : optional list<DaysOfWeek> daysOfWeek,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
}

struct HealthcareService_NotAvailable
{
	1 : required string description,
	2 : optional Period during,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct HumanName
{
	1 : optional list<binary> extension,
	2 : optional string family,
	3 : optional list<string> given,
	4 : optional string id,
	5 : optional Period period,
	6 : optional list<string> prefix,
	7 : optional list<string> suffix,
	8 : optional string text,
	9 : optional NameUse use,
}

struct ImagingManifest_Instance
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required oid sopClass,
	5 : required oid uid,
}

struct ImagingStudy_Instance
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional int32 number,
	5 : required oid sopClass,
	6 : optional string title,
	7 : required oid uid,
}

struct ImplementationGuide_Dependency
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required GuideDependencyType type,
	5 : required uri _uri,
}

struct ImplementationGuide_Page
{
	1 : optional list<binary> extension,
	2 : optional code format,
	3 : optional string id,
	4 : required GuidePageKind kind,
	5 : optional list<binary> modifierExtension,
	6 : optional list<string> package,
	7 : optional list<binary> page,
	8 : required uri source,
	9 : required string title,
	10 : optional list<ResourceType> type,
}

struct MessageHeader_Source
{
	1 : optional ContactPoint contact,
	2 : required uri endpoint,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional string name,
	7 : optional string software,
	8 : optional string version,
}

struct Meta
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional instant lastUpdated,
	4 : optional list<uri> profile,
	5 : optional list<Coding> security,
	6 : optional list<Coding> tag,
	7 : optional id versionId,
}

struct Money
{
	1 : optional code _code,
	2 : optional QuantityComparator comparator,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri system,
	6 : optional string unit,
	7 : optional double value,
}

struct NamingSystem_UniqueId
{
	1 : optional string comment,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Period period,
	6 : optional bool preferred,
	7 : required NamingSystemIdentifierType type,
	8 : required string value,
}

struct Narrative
{
	1 : required www_w3_org_1999_xhtml.divType div,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required NarrativeStatus status,
}

struct PractitionerRole_AvailableTime
{
	1 : optional bool allDay,
	2 : optional time availableEndTime,
	3 : optional time availableStartTime,
	4 : optional list<DaysOfWeek> daysOfWeek,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
}

struct Quantity
{
	1 : optional code _code,
	2 : optional QuantityComparator comparator,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri system,
	6 : optional string unit,
	7 : optional double value,
}

struct Questionnaire_Option
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional Coding valueCoding,
	5 : optional i32 valueDate,
	6 : optional i64 valueInteger,
	7 : optional string valueString,
	8 : optional time valueTime,
}

struct Range
{
	1 : optional list<binary> extension,
	2 : optional Quantity high,
	3 : optional string id,
	4 : optional Quantity low,
}

struct Ratio
{
	1 : optional Quantity denominator,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional Quantity numerator,
}

struct RequestGroup_RelatedAction
{
	1 : required id actionId,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Duration offsetDuration,
	6 : optional Range offsetRange,
	7 : required ActionRelationshipType relationship,
}

struct SampledData
{
	1 : required SampledDataDataType data,
	2 : required positiveInt dimensions,
	3 : optional list<binary> extension,
	4 : optional double factor,
	5 : optional string id,
	6 : optional double lowerLimit,
	7 : required Quantity origin,
	8 : required double period,
	9 : optional double upperLimit,
}

struct Sequence_Repository
{
	1 : optional string datasetId,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional string name,
	6 : optional string readsetId,
	7 : required repositoryType type,
	8 : optional uri url,
	9 : optional string variantsetId,
}

struct StructureDefinition_Mapping
{
	1 : optional string comment,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required id identity,
	5 : optional list<binary> modifierExtension,
	6 : optional string name,
	7 : optional uri _uri,
}

struct StructureMap_Dependent
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required id name,
	5 : required list<string> variable,
}

struct StructureMap_Input
{
	1 : optional string documentation,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required StructureMapInputMode mode,
	5 : optional list<binary> modifierExtension,
	6 : required id name,
	7 : optional string type,
}

struct StructureMap_Parameter
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional bool valueBoolean,
	5 : optional double valueDecimal,
	6 : optional id valueId,
	7 : optional i64 valueInteger,
	8 : optional string valueString,
}

struct StructureMap_Structure
{
	1 : optional string alias,
	2 : optional string documentation,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : required StructureMapModelMode mode,
	6 : optional list<binary> modifierExtension,
	7 : required uri url,
}

struct StructureMap_Target
{
	1 : optional id context,
	2 : optional StructureMapContextType contextType,
	3 : optional string element,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<StructureMapTargetListMode> listMode,
	7 : optional id listRuleId,
	8 : optional list<binary> modifierExtension,
	9 : optional list<StructureMap_Parameter> parameter,
	10 : optional StructureMapTransform transform,
	11 : optional id variable,
}

struct Subscription_Channel
{
	1 : optional uri endpoint,
	2 : optional list<binary> extension,
	3 : optional list<string> header,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional string payload,
	7 : required SubscriptionChannelType type,
}

struct TestReport_Assert
{
	1 : optional string detail,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional markdown message,
	5 : optional list<binary> modifierExtension,
	6 : required TestReportActionResult result,
}

struct TestReport_Operation
{
	1 : optional uri detail,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional markdown message,
	5 : optional list<binary> modifierExtension,
	6 : required TestReportActionResult result,
}

struct TestReport_Participant
{
	1 : optional string display,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required TestReportParticipantType type,
	6 : required uri _uri,
}

struct TestScript_Destination
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required i64 index,
	4 : optional list<binary> modifierExtension,
	5 : required Coding profile,
}

struct TestScript_Link
{
	1 : optional string description,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required uri url,
}

struct TestScript_Operation
{
	1 : optional string accept,
	2 : optional string contentType,
	3 : optional string description,
	4 : optional i64 destination,
	5 : optional bool encodeRequestUrl,
	6 : optional list<binary> extension,
	7 : optional string id,
	8 : optional string label,
	9 : optional list<binary> modifierExtension,
	10 : optional i64 origin,
	11 : optional string params,
	12 : optional list<TestScript_RequestHeader> requestHeader,
	13 : optional id requestId,
	14 : optional FHIRDefinedType resource,
	15 : optional id responseId,
	16 : optional id sourceId,
	17 : optional id targetId,
	18 : optional Coding type,
	19 : optional string url,
}

struct TestScript_Origin
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required i64 index,
	4 : optional list<binary> modifierExtension,
	5 : required Coding profile,
}

struct TestScript_Rule1
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional list<TestScript_Param1> param,
	5 : required id ruleId,
}

struct TestScript_Rule2
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional list<TestScript_Param2> param,
	5 : required id ruleId,
}

struct TestScript_Rule3
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional list<TestScript_Param3> param,
	5 : required id ruleId,
}

struct TestScript_Ruleset1
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional list<TestScript_Rule3> rule,
	5 : required id rulesetId,
}

struct TestScript_Variable
{
	1 : optional string defaultValue,
	2 : optional string description,
	3 : optional string expression,
	4 : optional list<binary> extension,
	5 : optional string headerField,
	6 : optional string hint,
	7 : optional string id,
	8 : optional list<binary> modifierExtension,
	9 : required string name,
	10 : optional string path,
	11 : optional id sourceId,
}

struct Timing_Repeat
{
	1 : optional Duration boundsDuration,
	2 : optional Period boundsPeriod,
	3 : optional Range boundsRange,
	4 : optional i64 count,
	5 : optional i64 countMax,
	6 : optional list<code> dayOfWeek,
	7 : optional double duration,
	8 : optional double durationMax,
	9 : optional UnitsOfTime durationUnit,
	10 : optional list<binary> extension,
	11 : optional i64 frequency,
	12 : optional i64 frequencyMax,
	13 : optional string id,
	14 : optional int32 offset,
	15 : optional double period,
	16 : optional double periodMax,
	17 : optional UnitsOfTime periodUnit,
	18 : optional list<time> timeOfDay,
	19 : optional list<EventTiming> when,
}

struct ValueSet_Designation
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional code language,
	4 : optional list<binary> modifierExtension,
	5 : optional Coding use,
	6 : required string value,
}

struct ValueSet_Filter
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required FilterOperator op,
	5 : required code property,
	6 : required code value,
}

struct ValueSet_Parameter
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string name,
	5 : optional bool valueBoolean,
	6 : optional code valueCode,
	7 : optional double valueDecimal,
	8 : optional i64 valueInteger,
	9 : optional string valueString,
	10 : optional uri valueUri,
}

struct dlType
{
	1 : optional list_string_ _class,
	2 : optional ddType dd,
	3 : optional dirType dir,
	4 : optional dtType dt,
	5 : optional string id,
	6 : optional string lang,
	7 : optional string style,
	8 : optional string title,
}

struct tbodyType
{
	1 : optional alignType align,
	2 : optional string char,
	3 : optional string charoff,
	4 : optional list_string_ _class,
	5 : optional dirType dir,
	6 : optional string id,
	7 : optional string lang,
	8 : optional string style,
	9 : optional string title,
	10 : required list<trType> tr,
	11 : optional valignType valign,
}

struct tfootType
{
	1 : optional alignType align,
	2 : optional string char,
	3 : optional string charoff,
	4 : optional list_string_ _class,
	5 : optional dirType dir,
	6 : optional string id,
	7 : optional string lang,
	8 : optional string style,
	9 : optional string title,
	10 : required list<trType> tr,
	11 : optional valignType valign,
}

struct theadType
{
	1 : optional alignType align,
	2 : optional string char,
	3 : optional string charoff,
	4 : optional list_string_ _class,
	5 : optional dirType dir,
	6 : optional string id,
	7 : optional string lang,
	8 : optional string style,
	9 : optional string title,
	10 : required list<trType> tr,
	11 : optional valignType valign,
}

struct CapabilityStatement_Endpoint
{
	1 : required uri address,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required Coding protocol,
}

struct CodeSystem_Designation
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional code language,
	4 : optional list<binary> modifierExtension,
	5 : optional Coding use,
	6 : required string value,
}

struct CodeSystem_Property1
{
	1 : required code _code,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional bool valueBoolean,
	6 : optional code valueCode,
	7 : optional Coding valueCoding,
	8 : optional i64 valueDateTime,
	9 : optional i64 valueInteger,
	10 : optional string valueString,
}

struct CodeableConcept
{
	1 : optional list<Coding> coding,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional string text,
}

struct ConceptMap_Element
{
	1 : optional code _code,
	2 : optional string display,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional list<ConceptMap_Target> target,
}

struct ConceptMap_Group
{
	1 : required list<ConceptMap_Element> element,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional uri source,
	6 : optional string sourceVersion,
	7 : optional uri target,
	8 : optional string targetVersion,
	9 : optional ConceptMap_Unmapped unmapped,
}

struct ContactDetail
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string name,
	4 : optional list<ContactPoint> telecom,
}

struct Contributor
{
	1 : optional list<ContactDetail> contact,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required string name,
	5 : required ContributorType type,
}

struct DataRequirement_DateFilter
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required string path,
	4 : optional i64 valueDateTime,
	5 : optional Duration valueDuration,
	6 : optional Period valuePeriod,
}

struct EligibilityResponse_Error
{
	1 : required CodeableConcept code,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct EligibilityResponse_Financial
{
	1 : optional Money allowedMoney,
	2 : optional string allowedString,
	3 : optional int32 allowedUnsignedInt,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
	7 : required CodeableConcept type,
	8 : optional Money usedMoney,
	9 : optional int32 usedUnsignedInt,
}

struct ExpansionProfile_Designation
{
	1 : optional ExpansionProfile_Exclude exclude,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional ExpansionProfile_Include include,
	5 : optional list<binary> modifierExtension,
}

struct ExplanationOfBenefit_Adjudication
{
	1 : optional Money amount,
	2 : required CodeableConcept category,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional CodeableConcept reason,
	7 : optional double value,
}

struct ExplanationOfBenefit_Detail1
{
	1 : optional list<ExplanationOfBenefit_Adjudication> adjudication,
	2 : optional CodeableConcept category,
	3 : optional list<binary> extension,
	4 : optional Money fee,
	5 : optional string id,
	6 : optional list<CodeableConcept> modifier,
	7 : optional list<binary> modifierExtension,
	8 : optional list<positiveInt> noteNumber,
	9 : optional CodeableConcept revenue,
	10 : optional CodeableConcept _service,
}

struct ExplanationOfBenefit_Financial
{
	1 : optional Money allowedMoney,
	2 : optional string allowedString,
	3 : optional int32 allowedUnsignedInt,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
	7 : required CodeableConcept type,
	8 : optional Money usedMoney,
	9 : optional int32 usedUnsignedInt,
}

struct ExplanationOfBenefit_ProcessNote
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CodeableConcept language,
	4 : optional list<binary> modifierExtension,
	5 : optional positiveInt number,
	6 : optional string text,
	7 : optional CodeableConcept type,
}

struct Goal_Target
{
	1 : optional CodeableConcept detailCodeableConcept,
	2 : optional Quantity detailQuantity,
	3 : optional Range detailRange,
	4 : optional i32 dueDate,
	5 : optional Duration dueDuration,
	6 : optional list<binary> extension,
	7 : optional string id,
	8 : optional CodeableConcept measure,
	9 : optional list<binary> modifierExtension,
}

struct Group_Characteristic
{
	1 : required CodeableConcept code,
	2 : required bool exclude,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional Period period,
	7 : optional bool valueBoolean,
	8 : optional CodeableConcept valueCodeableConcept,
	9 : optional Quantity valueQuantity,
	10 : optional Range valueRange,
}

struct Immunization_Explanation
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional list<CodeableConcept> reason,
	5 : optional list<CodeableConcept> reasonNotGiven,
}

struct ImmunizationRecommendation_DateCriterion
{
	1 : required CodeableConcept code,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required i64 value,
}

struct MedicationAdministration_Dosage
{
	1 : optional Quantity dose,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional CodeableConcept method,
	5 : optional list<binary> modifierExtension,
	6 : optional Quantity rateQuantity,
	7 : optional Ratio rateRatio,
	8 : optional CodeableConcept route,
	9 : optional CodeableConcept site,
	10 : optional string text,
}

struct MedicationRequest_Substitution
{
	1 : required bool allowed,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional CodeableConcept reason,
}

struct NutritionOrder_Nutrient
{
	1 : optional Quantity amount,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional CodeableConcept modifier,
	5 : optional list<binary> modifierExtension,
}

struct NutritionOrder_Texture
{
	1 : optional list<binary> extension,
	2 : optional CodeableConcept foodType,
	3 : optional string id,
	4 : optional CodeableConcept modifier,
	5 : optional list<binary> modifierExtension,
}

struct Observation_ReferenceRange
{
	1 : optional Range age,
	2 : optional list<CodeableConcept> appliesTo,
	3 : optional list<binary> extension,
	4 : optional Quantity high,
	5 : optional string id,
	6 : optional Quantity low,
	7 : optional list<binary> modifierExtension,
	8 : optional string text,
	9 : optional CodeableConcept type,
}

struct OperationOutcome_Issue
{
	1 : required IssueType code,
	2 : optional CodeableConcept details,
	3 : optional string diagnostics,
	4 : optional list<string> expression,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional list<string> location,
	8 : optional list<binary> modifierExtension,
	9 : required IssueSeverity severity,
}

struct Organization_Contact
{
	1 : optional Address address,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional HumanName name,
	6 : optional CodeableConcept purpose,
	7 : optional list<ContactPoint> telecom,
}

struct Patient_Animal
{
	1 : optional CodeableConcept breed,
	2 : optional list<binary> extension,
	3 : optional CodeableConcept genderStatus,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : required CodeableConcept species,
}

struct Patient_Communication
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required CodeableConcept language,
	4 : optional list<binary> modifierExtension,
	5 : optional bool preferred,
}

struct PaymentReconciliation_ProcessNote
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional string text,
	5 : optional CodeableConcept type,
}

struct PlanDefinition_Participant
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional CodeableConcept role,
	5 : required ActionParticipantType type,
}

struct PlanDefinition_RelatedAction
{
	1 : required id actionId,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Duration offsetDuration,
	6 : optional Range offsetRange,
	7 : required ActionRelationshipType relationship,
}

struct PlanDefinition_Target
{
	1 : optional CodeableConcept detailCodeableConcept,
	2 : optional Quantity detailQuantity,
	3 : optional Range detailRange,
	4 : optional Duration due,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional CodeableConcept measure,
	8 : optional list<binary> modifierExtension,
}

struct ProcessResponse_ProcessNote
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional string text,
	5 : optional CodeableConcept type,
}

struct ResearchStudy_Arm
{
	1 : optional CodeableConcept code,
	2 : optional string description,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : required string name,
}

struct RiskAssessment_Prediction
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required CodeableConcept outcome,
	5 : optional double probabilityDecimal,
	6 : optional Range probabilityRange,
	7 : optional CodeableConcept qualitativeRisk,
	8 : optional string rationale,
	9 : optional double relativeRisk,
	10 : optional Period whenPeriod,
	11 : optional Range whenRange,
}

struct Sequence_Quality
{
	1 : optional i64 end,
	2 : optional list<binary> extension,
	3 : optional double fScore,
	4 : optional double gtFP,
	5 : optional string id,
	6 : optional CodeableConcept method,
	7 : optional list<binary> modifierExtension,
	8 : optional double precision,
	9 : optional double queryFP,
	10 : optional double queryTP,
	11 : optional double recall,
	12 : optional Quantity score,
	13 : optional CodeableConcept standardSequence,
	14 : optional i64 start,
	15 : optional double truthFN,
	16 : optional double truthTP,
	17 : required qualityType type,
}

struct TestReport_Action
{
	1 : optional TestReport_Assert assert,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional TestReport_Operation operation,
}

struct TestReport_Action1
{
	1 : optional TestReport_Assert assert,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional TestReport_Operation operation,
}

struct TestReport_Action2
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required TestReport_Operation operation,
}

struct TestReport_Setup
{
	1 : required list<TestReport_Action> action,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct TestReport_Teardown
{
	1 : required list<TestReport_Action2> action,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct TestReport_Test
{
	1 : required list<TestReport_Action1> action,
	2 : optional string description,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional string name,
}

struct TestScript_Action2
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required TestScript_Operation operation,
}

struct TestScript_Assert
{
	1 : optional string compareToSourceExpression,
	2 : optional string compareToSourceId,
	3 : optional string compareToSourcePath,
	4 : optional string contentType,
	5 : optional string description,
	6 : optional AssertionDirectionType direction,
	7 : optional string expression,
	8 : optional list<binary> extension,
	9 : optional string headerField,
	10 : optional string id,
	11 : optional string label,
	12 : optional string minimumId,
	13 : optional list<binary> modifierExtension,
	14 : optional bool navigationLinks,
	15 : optional AssertionOperatorType operator,
	16 : optional string path,
	17 : optional TestScriptRequestMethodCode requestMethod,
	18 : optional string requestURL,
	19 : optional FHIRDefinedType resource,
	20 : optional AssertionResponseTypes response,
	21 : optional string responseCode,
	22 : optional TestScript_Rule2 rule,
	23 : optional TestScript_Ruleset1 ruleset,
	24 : optional id sourceId,
	25 : optional id validateProfileId,
	26 : optional string value,
	27 : optional bool warningOnly,
}

struct TestScript_Teardown
{
	1 : required list<TestScript_Action2> action,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct Timing
{
	1 : optional CodeableConcept code,
	2 : optional list<i64> event,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional Timing_Repeat repeat,
}

struct UsageContext
{
	1 : required Coding code,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional CodeableConcept valueCodeableConcept,
	5 : optional Quantity valueQuantity,
	6 : optional Range valueRange,
}

struct ValueSet_Concept
{
	1 : required code _code,
	2 : optional list<ValueSet_Designation> designation,
	3 : optional string display,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
}

struct ValueSet_Contains
{
	1 : optional bool _abstract,
	2 : optional code _code,
	3 : optional list<binary> contains,
	4 : optional list<ValueSet_Designation> designation,
	5 : optional string display,
	6 : optional list<binary> extension,
	7 : optional string id,
	8 : optional bool inactive,
	9 : optional list<binary> modifierExtension,
	10 : optional uri system,
	11 : optional string version,
}

struct ValueSet_Expansion
{
	1 : optional list<ValueSet_Contains> contains,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required uri identifier,
	5 : optional list<binary> modifierExtension,
	6 : optional i64 offset,
	7 : optional list<ValueSet_Parameter> parameter,
	8 : required i64 timestamp,
	9 : optional i64 total,
}

struct ValueSet_Include
{
	1 : optional list<ValueSet_Concept> concept,
	2 : optional list<binary> extension,
	3 : optional list<ValueSet_Filter> filter,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional uri system,
	7 : optional list<uri> valueSet,
	8 : optional string version,
}

struct tableType
{
	1 : optional i64 border,
	2 : optional captionType caption,
	3 : optional string cellpadding,
	4 : optional string cellspacing,
	5 : optional list_string_ _class,
	6 : optional list<colType> col,
	7 : optional list<colgroupType> colgroup,
	8 : optional dirType dir,
	9 : optional TFrame frame,
	10 : optional string id,
	11 : optional string lang,
	12 : optional TRules rules,
	13 : optional string style,
	14 : optional string summary,
	15 : optional list<tbodyType> tbody,
	16 : optional tfootType tfoot,
	17 : optional theadType thead,
	18 : optional string title,
	19 : optional list<trType> tr,
	20 : optional string width,
}

struct ActivityDefinition_Participant
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional CodeableConcept role,
	5 : required ActionParticipantType type,
}

struct CapabilityStatement_Security
{
	1 : optional list<CapabilityStatement_Certificate> certificate,
	2 : optional bool cors,
	3 : optional string description,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
	7 : optional list<CodeableConcept> _service,
}

struct ClaimResponse_Adjudication
{
	1 : optional Money amount,
	2 : required CodeableConcept category,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional CodeableConcept reason,
	7 : optional double value,
}

struct ClaimResponse_Detail1
{
	1 : optional list<ClaimResponse_Adjudication> adjudication,
	2 : optional CodeableConcept category,
	3 : optional list<binary> extension,
	4 : optional Money fee,
	5 : optional string id,
	6 : optional list<CodeableConcept> modifier,
	7 : optional list<binary> modifierExtension,
	8 : optional list<positiveInt> noteNumber,
	9 : optional CodeableConcept revenue,
	10 : optional CodeableConcept _service,
}

struct ClaimResponse_Error
{
	1 : required CodeableConcept code,
	2 : optional positiveInt detailSequenceLinkId,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional positiveInt sequenceLinkId,
	7 : optional positiveInt subdetailSequenceLinkId,
}

struct ClaimResponse_ProcessNote
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CodeableConcept language,
	4 : optional list<binary> modifierExtension,
	5 : optional positiveInt number,
	6 : optional string text,
	7 : optional CodeableConcept type,
}

struct ClaimResponse_SubDetail
{
	1 : optional list<ClaimResponse_Adjudication> adjudication,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional list<positiveInt> noteNumber,
	6 : required positiveInt sequenceLinkId,
}

struct CodeSystem_Concept
{
	1 : required code _code,
	2 : optional list<binary> concept,
	3 : optional string definition,
	4 : optional list<CodeSystem_Designation> designation,
	5 : optional string display,
	6 : optional list<binary> extension,
	7 : optional string id,
	8 : optional list<binary> modifierExtension,
	9 : optional list<CodeSystem_Property1> property,
}

struct Dosage
{
	1 : optional list<CodeableConcept> additionalInstruction,
	2 : optional bool asNeededBoolean,
	3 : optional CodeableConcept asNeededCodeableConcept,
	4 : optional Quantity doseQuantity,
	5 : optional Range doseRange,
	6 : optional list<binary> extension,
	7 : optional string id,
	8 : optional Quantity maxDosePerAdministration,
	9 : optional Quantity maxDosePerLifetime,
	10 : optional Ratio maxDosePerPeriod,
	11 : optional CodeableConcept method,
	12 : optional string patientInstruction,
	13 : optional Quantity rateQuantity,
	14 : optional Range rateRange,
	15 : optional Ratio rateRatio,
	16 : optional CodeableConcept route,
	17 : optional i64 sequence,
	18 : optional CodeableConcept site,
	19 : optional string text,
	20 : optional Timing timing,
}

struct EligibilityResponse_BenefitBalance
{
	1 : required CodeableConcept category,
	2 : optional string description,
	3 : optional bool excluded,
	4 : optional list<binary> extension,
	5 : optional list<EligibilityResponse_Financial> financial,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
	8 : optional string name,
	9 : optional CodeableConcept network,
	10 : optional CodeableConcept subCategory,
	11 : optional CodeableConcept term,
	12 : optional CodeableConcept unit,
}

struct ExplanationOfBenefit_AddItem
{
	1 : optional list<ExplanationOfBenefit_Adjudication> adjudication,
	2 : optional CodeableConcept category,
	3 : optional list<ExplanationOfBenefit_Detail1> detail,
	4 : optional list<binary> extension,
	5 : optional Money fee,
	6 : optional string id,
	7 : optional list<CodeableConcept> modifier,
	8 : optional list<binary> modifierExtension,
	9 : optional list<positiveInt> noteNumber,
	10 : optional CodeableConcept revenue,
	11 : optional list<positiveInt> sequenceLinkId,
	12 : optional CodeableConcept _service,
}

struct ExplanationOfBenefit_BenefitBalance
{
	1 : required CodeableConcept category,
	2 : optional string description,
	3 : optional bool excluded,
	4 : optional list<binary> extension,
	5 : optional list<ExplanationOfBenefit_Financial> financial,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
	8 : optional string name,
	9 : optional CodeableConcept network,
	10 : optional CodeableConcept subCategory,
	11 : optional CodeableConcept term,
	12 : optional CodeableConcept unit,
}

struct NutritionOrder_Administration
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional Quantity quantity,
	5 : optional Quantity rateQuantity,
	6 : optional Ratio rateRatio,
	7 : optional Timing schedule,
}

struct NutritionOrder_EnteralFormula
{
	1 : optional string additiveProductName,
	2 : optional CodeableConcept additiveType,
	3 : optional list<NutritionOrder_Administration> administration,
	4 : optional string administrationInstruction,
	5 : optional string baseFormulaProductName,
	6 : optional CodeableConcept baseFormulaType,
	7 : optional Quantity caloricDensity,
	8 : optional list<binary> extension,
	9 : optional string id,
	10 : optional Quantity maxVolumeToDeliver,
	11 : optional list<binary> modifierExtension,
	12 : optional CodeableConcept routeofAdministration,
}

struct NutritionOrder_OralDiet
{
	1 : optional list<binary> extension,
	2 : optional list<CodeableConcept> fluidConsistencyType,
	3 : optional string id,
	4 : optional string instruction,
	5 : optional list<binary> modifierExtension,
	6 : optional list<NutritionOrder_Nutrient> nutrient,
	7 : optional list<Timing> schedule,
	8 : optional list<NutritionOrder_Texture> texture,
	9 : optional list<CodeableConcept> type,
}

struct NutritionOrder_Supplement
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string instruction,
	4 : optional list<binary> modifierExtension,
	5 : optional string productName,
	6 : optional Quantity quantity,
	7 : optional list<Timing> schedule,
	8 : optional CodeableConcept type,
}

struct Observation_Component
{
	1 : required CodeableConcept code,
	2 : optional CodeableConcept dataAbsentReason,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional CodeableConcept interpretation,
	6 : optional list<binary> modifierExtension,
	7 : optional list<Observation_ReferenceRange> referenceRange,
	8 : optional Attachment valueAttachment,
	9 : optional CodeableConcept valueCodeableConcept,
	10 : optional i64 valueDateTime,
	11 : optional Period valuePeriod,
	12 : optional Quantity valueQuantity,
	13 : optional Range valueRange,
	14 : optional Ratio valueRatio,
	15 : optional SampledData valueSampledData,
	16 : optional string valueString,
	17 : optional time valueTime,
}

struct TestScript_Action
{
	1 : optional TestScript_Assert assert,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional TestScript_Operation operation,
}

struct TestScript_Action1
{
	1 : optional TestScript_Assert assert,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional TestScript_Operation operation,
}

struct TestScript_Setup
{
	1 : required list<TestScript_Action> action,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct TestScript_Test
{
	1 : required list<TestScript_Action1> action,
	2 : optional string description,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional string name,
}

struct ValueSet_Compose
{
	1 : optional list<ValueSet_Include> exclude,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional bool inactive,
	5 : required list<ValueSet_Include> include,
	6 : optional i32 lockedDate,
	7 : optional list<binary> modifierExtension,
}

struct ClaimResponse_AddItem
{
	1 : optional list<ClaimResponse_Adjudication> adjudication,
	2 : optional CodeableConcept category,
	3 : optional list<ClaimResponse_Detail1> detail,
	4 : optional list<binary> extension,
	5 : optional Money fee,
	6 : optional string id,
	7 : optional list<CodeableConcept> modifier,
	8 : optional list<binary> modifierExtension,
	9 : optional list<positiveInt> noteNumber,
	10 : optional CodeableConcept revenue,
	11 : optional list<positiveInt> sequenceLinkId,
	12 : optional CodeableConcept _service,
}

struct ClaimResponse_Detail
{
	1 : optional list<ClaimResponse_Adjudication> adjudication,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional list<positiveInt> noteNumber,
	6 : required positiveInt sequenceLinkId,
	7 : optional list<ClaimResponse_SubDetail> subDetail,
}

struct ClaimResponse_Item
{
	1 : optional list<ClaimResponse_Adjudication> adjudication,
	2 : optional list<ClaimResponse_Detail> detail,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional list<positiveInt> noteNumber,
	7 : required positiveInt sequenceLinkId,
}

struct Account
{
	1 : optional Period active,
	2 : optional Money balance,
	3 : optional list<ResourceContainer> contained,
	4 : optional list<Account_Coverage> coverage,
	5 : optional string description,
	6 : optional list<binary> extension,
	7 : optional list<Account_Guarantor> guarantor,
	8 : optional id _id,
	9 : optional list<Identifier> identifier,
	10 : optional uri implicitRules,
	11 : optional code language,
	12 : optional Meta meta,
	13 : optional list<binary> modifierExtension,
	14 : optional string name,
	15 : optional Reference owner,
	16 : optional Period period,
	17 : optional AccountStatus status,
	18 : optional Reference subject,
	19 : optional Narrative text,
	20 : optional CodeableConcept type,
}

struct Account_Coverage
{
	1 : required Reference coverage,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional positiveInt priority,
}

struct Account_Guarantor
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional bool onHold,
	5 : required Reference party,
	6 : optional Period period,
}

struct ActivityDefinition
{
	1 : optional i32 approvalDate,
	2 : optional list<CodeableConcept> bodySite,
	3 : optional CodeableConcept code,
	4 : optional list<ContactDetail> contact,
	5 : optional list<ResourceContainer> contained,
	6 : optional list<Contributor> contributor,
	7 : optional markdown copyright,
	8 : optional i64 _date,
	9 : optional markdown description,
	10 : optional list<Dosage> dosage,
	11 : optional list<ActivityDefinition_DynamicValue> dynamicValue,
	12 : optional Period effectivePeriod,
	13 : optional bool experimental,
	14 : optional list<binary> extension,
	15 : optional id _id,
	16 : optional list<Identifier> identifier,
	17 : optional uri implicitRules,
	18 : optional list<CodeableConcept> jurisdiction,
	19 : optional ResourceType kind,
	20 : optional code language,
	21 : optional i32 lastReviewDate,
	22 : optional list<Reference> library,
	23 : optional Reference location,
	24 : optional Meta meta,
	25 : optional list<binary> modifierExtension,
	26 : optional string name,
	27 : optional list<ActivityDefinition_Participant> participant,
	28 : optional CodeableConcept productCodeableConcept,
	29 : optional Reference productReference,
	30 : optional string publisher,
	31 : optional markdown purpose,
	32 : optional Quantity quantity,
	33 : optional list<RelatedArtifact> relatedArtifact,
	34 : required PublicationStatus status,
	35 : optional Narrative text,
	36 : optional i64 timingDateTime,
	37 : optional Period timingPeriod,
	38 : optional Range timingRange,
	39 : optional Timing timingTiming,
	40 : optional string title,
	41 : optional list<CodeableConcept> topic,
	42 : optional Reference transform,
	43 : optional uri url,
	44 : optional string usage,
	45 : optional list<UsageContext> useContext,
	46 : optional string version,
}

struct AdverseEvent
{
	1 : optional AdverseEventCategory category,
	2 : optional list<ResourceContainer> contained,
	3 : optional i64 _date,
	4 : optional string description,
	5 : optional Reference eventParticipant,
	6 : optional list<binary> extension,
	7 : optional id _id,
	8 : optional Identifier identifier,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional Reference location,
	12 : optional Meta meta,
	13 : optional list<binary> modifierExtension,
	14 : optional CodeableConcept outcome,
	15 : optional list<Reference> reaction,
	16 : optional Reference recorder,
	17 : optional list<Reference> referenceDocument,
	18 : optional CodeableConcept seriousness,
	19 : optional list<Reference> study,
	20 : optional Reference subject,
	21 : optional list<Reference> subjectMedicalHistory,
	22 : optional list<AdverseEvent_SuspectEntity> suspectEntity,
	23 : optional Narrative text,
	24 : optional CodeableConcept type,
}

struct AdverseEvent_SuspectEntity
{
	1 : optional AdverseEventCausality causality,
	2 : optional CodeableConcept causalityAssessment,
	3 : optional Reference causalityAuthor,
	4 : optional CodeableConcept causalityMethod,
	5 : optional string causalityProductRelatedness,
	6 : optional CodeableConcept causalityResult,
	7 : optional list<binary> extension,
	8 : optional string id,
	9 : required Reference instance,
	10 : optional list<binary> modifierExtension,
}

struct AllergyIntolerance
{
	1 : optional i64 assertedDate,
	2 : optional Reference asserter,
	3 : optional list<AllergyIntoleranceCategory> category,
	4 : optional AllergyIntoleranceClinicalStatus clinicalStatus,
	5 : optional CodeableConcept code,
	6 : optional list<ResourceContainer> contained,
	7 : optional AllergyIntoleranceCriticality criticality,
	8 : optional list<binary> extension,
	9 : optional id _id,
	10 : optional list<Identifier> identifier,
	11 : optional uri implicitRules,
	12 : optional code language,
	13 : optional i64 lastOccurrence,
	14 : optional Meta meta,
	15 : optional list<binary> modifierExtension,
	16 : optional list<Annotation> note,
	17 : optional Age onsetAge,
	18 : optional i64 onsetDateTime,
	19 : optional Period onsetPeriod,
	20 : optional Range onsetRange,
	21 : optional string onsetString,
	22 : required Reference patient,
	23 : optional list<AllergyIntolerance_Reaction> reaction,
	24 : optional Reference recorder,
	25 : optional Narrative text,
	26 : optional AllergyIntoleranceType type,
	27 : required AllergyIntoleranceVerificationStatus verificationStatus,
}

struct AllergyIntolerance_Reaction
{
	1 : optional string description,
	2 : optional CodeableConcept exposureRoute,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : required list<CodeableConcept> manifestation,
	6 : optional list<binary> modifierExtension,
	7 : optional list<Annotation> note,
	8 : optional i64 onset,
	9 : optional AllergyIntoleranceSeverity severity,
	10 : optional CodeableConcept substance,
}

struct Annotation
{
	1 : optional Reference authorReference,
	2 : optional string authorString,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : required string text,
	6 : optional i64 time,
}

struct Appointment
{
	1 : optional CodeableConcept appointmentType,
	2 : optional string comment,
	3 : optional list<ResourceContainer> contained,
	4 : optional i64 created,
	5 : optional string description,
	6 : optional instant end,
	7 : optional list<binary> extension,
	8 : optional id _id,
	9 : optional list<Identifier> identifier,
	10 : optional uri implicitRules,
	11 : optional list<Reference> incomingReferral,
	12 : optional list<Reference> indication,
	13 : optional code language,
	14 : optional Meta meta,
	15 : optional positiveInt minutesDuration,
	16 : optional list<binary> modifierExtension,
	17 : required list<Appointment_Participant> participant,
	18 : optional int32 priority,
	19 : optional list<CodeableConcept> reason,
	20 : optional list<Period> requestedPeriod,
	21 : optional CodeableConcept serviceCategory,
	22 : optional list<CodeableConcept> serviceType,
	23 : optional list<Reference> slot,
	24 : optional list<CodeableConcept> specialty,
	25 : optional instant start,
	26 : required AppointmentStatus status,
	27 : optional list<Reference> supportingInformation,
	28 : optional Narrative text,
}

struct Appointment_Participant
{
	1 : optional Reference actor,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional ParticipantRequired _required,
	6 : required ParticipationStatus status,
	7 : optional list<CodeableConcept> type,
}

struct AppointmentResponse
{
	1 : optional Reference actor,
	2 : required Reference appointment,
	3 : optional string comment,
	4 : optional list<ResourceContainer> contained,
	5 : optional instant end,
	6 : optional list<binary> extension,
	7 : optional id _id,
	8 : optional list<Identifier> identifier,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : required ParticipationStatus participantStatus,
	14 : optional list<CodeableConcept> participantType,
	15 : optional instant start,
	16 : optional Narrative text,
}

struct AuditEvent
{
	1 : optional AuditEventAction action,
	2 : required list<AuditEvent_Agent> agent,
	3 : optional list<ResourceContainer> contained,
	4 : optional list<AuditEvent_Entity> entity,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional uri implicitRules,
	8 : optional code language,
	9 : optional Meta meta,
	10 : optional list<binary> modifierExtension,
	11 : optional AuditEventOutcome outcome,
	12 : optional string outcomeDesc,
	13 : optional list<CodeableConcept> purposeOfEvent,
	14 : required instant recorded,
	15 : required AuditEvent_Source source,
	16 : optional list<Coding> subtype,
	17 : optional Narrative text,
	18 : required Coding type,
}

struct AuditEvent_Agent
{
	1 : optional string altId,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional Reference location,
	5 : optional Coding media,
	6 : optional list<binary> modifierExtension,
	7 : optional string name,
	8 : optional AuditEvent_Network network,
	9 : optional list<uri> policy,
	10 : optional list<CodeableConcept> purposeOfUse,
	11 : optional Reference reference,
	12 : required bool requestor,
	13 : optional list<CodeableConcept> role,
	14 : optional Identifier userId,
}

struct AuditEvent_Entity
{
	1 : optional string description,
	2 : optional list<AuditEvent_Detail> detail,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional Identifier identifier,
	6 : optional Coding lifecycle,
	7 : optional list<binary> modifierExtension,
	8 : optional string name,
	9 : optional binary query,
	10 : optional Reference reference,
	11 : optional Coding role,
	12 : optional list<Coding> securityLabel,
	13 : optional Coding type,
}

struct AuditEvent_Source
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required Identifier identifier,
	4 : optional list<binary> modifierExtension,
	5 : optional string site,
	6 : optional list<Coding> type,
}

struct BackboneElement
{
	1 : optional bool _abstract,
	2 : optional string accept,
	3 : optional string acronym,
	4 : optional list<CodeableConcept> action,
	5 : optional id actionId,
	6 : optional list<CodeableConcept> actionReason,
	7 : optional Reference actor,
	8 : optional double add,
	9 : optional list<Reference> additive,
	10 : optional CodeableConcept additiveCodeableConcept,
	11 : optional string additiveProductName,
	12 : optional Reference additiveReference,
	13 : optional CodeableConcept additiveType,
	14 : optional string address,
	15 : optional list<CodeableConcept> addresses,
	16 : optional list<ClaimResponse_Adjudication> adjudication,
	17 : optional Money adjustment,
	18 : optional CodeableConcept adjustmentReason,
	19 : optional list<NutritionOrder_Administration> administration,
	20 : optional string administrationInstruction,
	21 : optional CodeableConcept admitSource,
	22 : optional Range age,
	23 : optional Reference agent,
	24 : optional string alias,
	25 : optional bool allDay,
	26 : optional bool allowed,
	27 : optional Money allowedMoney,
	28 : optional string allowedString,
	29 : optional int32 allowedUnsignedInt,
	30 : optional string altId,
	31 : optional double altitude,
	32 : optional Money amount,
	33 : optional list<QuestionnaireResponse_Answer> answer,
	34 : optional Attachment answerAttachment,
	35 : optional bool answerBoolean,
	36 : optional Coding answerCoding,
	37 : optional i32 answerDate,
	38 : optional i64 answerDateTime,
	39 : optional double answerDecimal,
	40 : optional i64 answerInteger,
	41 : optional Quantity answerQuantity,
	42 : optional Reference answerReference,
	43 : optional string answerString,
	44 : optional time answerTime,
	45 : optional uri answerUri,
	46 : optional Period applies,
	47 : optional list<CodeableConcept> appliesTo,
	48 : optional TestReport_Assert assert,
	49 : optional list<Reference> assessment,
	50 : optional IdentityAssuranceLevel assurance,
	51 : optional Attachment attachment,
	52 : optional Reference author,
	53 : optional uri authority,
	54 : optional bool autocreate,
	55 : optional bool autodelete,
	56 : optional InstanceAvailability availability,
	57 : optional time availableEndTime,
	58 : optional time availableStartTime,
	59 : optional i64 axis,
	60 : optional double backCurve,
	61 : optional VisionBase base,
	62 : optional string baseFormulaProductName,
	63 : optional CodeableConcept baseFormulaType,
	64 : optional string basis,
	65 : optional list<Medication_Batch> batch,
	66 : optional list<EligibilityResponse_BenefitBalance> benefitBalance,
	67 : optional OperationDefinition_Binding binding,
	68 : optional binary blob,
	69 : optional CodeableConcept bodySite,
	70 : optional string brand,
	71 : optional CodeableConcept breed,
	72 : optional string businessArrangement,
	73 : optional Quantity caloricDensity,
	74 : optional Reference capabilities,
	75 : optional list<TestScript_Capability> capability,
	76 : optional Quantity capacity,
	77 : optional ActionCardinalityBehavior cardinalityBehavior,
	78 : optional list<positiveInt> careTeamLinkId,
	79 : optional binary carrierAIDC,
	80 : optional string carrierHRF,
	81 : optional MessageSignificanceCategory category,
	82 : optional AdverseEventCausality causality,
	83 : optional CodeableConcept causalityAssessment,
	84 : optional Reference causalityAuthor,
	85 : optional CodeableConcept causalityMethod,
	86 : optional string causalityProductRelatedness,
	87 : optional CodeableConcept causalityResult,
	88 : optional list<CapabilityStatement_Certificate> certificate,
	89 : optional string check,
	90 : optional CodeableConcept chromosome,
	91 : optional string cigar,
	92 : optional Reference claim,
	93 : optional Reference claimResponse,
	94 : optional list<Coding> _class,
	95 : optional string classDisplay,
	96 : optional TypeRestfulInteraction code,
	97 : optional i64 collectedDateTime,
	98 : optional Period collectedPeriod,
	99 : optional Reference collector,
	100 : optional string color,
	101 : optional string comment,
	102 : optional string compareToSourceExpression,
	103 : optional string compareToSourceId,
	104 : optional string compareToSourcePath,
	105 : optional list<uri> compartment,
	106 : optional Identifier componentId,
	107 : optional list<CodeSystem_Concept> concept,
	108 : optional Reference condition,
	109 : optional bool conditionalCreate,
	110 : optional ConditionalDeleteStatus conditionalDelete,
	111 : optional ConditionalReadStatus conditionalRead,
	112 : optional bool conditionalUpdate,
	113 : optional ContactPoint contact,
	114 : optional CodeableConcept container,
	115 : optional list<ValueSet_Contains> contains,
	116 : optional list<Medication_Content> content,
	117 : optional Attachment contentAttachment,
	118 : optional Reference contentReference,
	119 : optional string contentString,
	120 : optional string contentType,
	121 : optional id context,
	122 : optional StructureMapContextType contextType,
	123 : optional Reference contract,
	124 : optional bool cors,
	125 : optional i64 count,
	126 : optional Reference coverage,
	127 : optional string criteria,
	128 : optional double cylinder,
	129 : optional Quantity dailyAmount,
	130 : optional list<Consent_Data1> data,
	131 : optional CodeableConcept dataAbsentReason,
	132 : optional Period dataPeriod,
	133 : optional string datasetId,
	134 : optional i64 _date,
	135 : optional list<ImmunizationRecommendation_DateCriterion> dateCriterion,
	136 : optional list<DaysOfWeek> daysOfWeek,
	137 : optional string defaultValue,
	138 : optional Address defaultValueAddress,
	139 : optional Age defaultValueAge,
	140 : optional Annotation defaultValueAnnotation,
	141 : optional Attachment defaultValueAttachment,
	142 : optional binary defaultValueBase64Binary,
	143 : optional bool defaultValueBoolean,
	144 : optional code defaultValueCode,
	145 : optional CodeableConcept defaultValueCodeableConcept,
	146 : optional Coding defaultValueCoding,
	147 : optional ContactPoint defaultValueContactPoint,
	148 : optional Count defaultValueCount,
	149 : optional i32 defaultValueDate,
	150 : optional i64 defaultValueDateTime,
	151 : optional double defaultValueDecimal,
	152 : optional Distance defaultValueDistance,
	153 : optional Duration defaultValueDuration,
	154 : optional HumanName defaultValueHumanName,
	155 : optional id defaultValueId,
	156 : optional Identifier defaultValueIdentifier,
	157 : optional instant defaultValueInstant,
	158 : optional i64 defaultValueInteger,
	159 : optional markdown defaultValueMarkdown,
	160 : optional Meta defaultValueMeta,
	161 : optional Money defaultValueMoney,
	162 : optional oid defaultValueOid,
	163 : optional Period defaultValuePeriod,
	164 : optional positiveInt defaultValuePositiveInt,
	165 : optional Quantity defaultValueQuantity,
	166 : optional Range defaultValueRange,
	167 : optional Ratio defaultValueRatio,
	168 : optional Reference defaultValueReference,
	169 : optional SampledData defaultValueSampledData,
	170 : optional Signature defaultValueSignature,
	171 : optional string defaultValueString,
	172 : optional time defaultValueTime,
	173 : optional Timing defaultValueTiming,
	174 : optional int32 defaultValueUnsignedInt,
	175 : optional uri defaultValueUri,
	176 : optional uri definition,
	177 : optional bool deleted,
	178 : optional list<StructureMap_Dependent> dependent,
	179 : optional list<ConceptMap_DependsOn> dependsOn,
	180 : optional string description,
	181 : optional list<CodeSystem_Designation> designation,
	182 : optional Reference destination,
	183 : optional list<AuditEvent_Detail> detail,
	184 : optional CodeableConcept detailCodeableConcept,
	185 : optional Quantity detailQuantity,
	186 : optional Range detailRange,
	187 : optional positiveInt detailSequenceLinkId,
	188 : optional Reference details,
	189 : optional string deviceIdentifier,
	190 : optional CodeableConcept diagnosisCodeableConcept,
	191 : optional list<positiveInt> diagnosisLinkId,
	192 : optional Reference diagnosisReference,
	193 : optional string diagnostics,
	194 : optional double diameter,
	195 : optional list<CodeableConcept> dietPreference,
	196 : optional AssertionDirectionType direction,
	197 : optional CodeableConcept dischargeDisposition,
	198 : optional string display,
	199 : optional string documentation,
	200 : optional Quantity dose,
	201 : optional positiveInt doseNumber,
	202 : optional positiveInt doseSequence,
	203 : optional CodeableConcept doseStatus,
	204 : optional CodeableConcept doseStatusReason,
	205 : optional Duration due,
	206 : optional i32 dueDate,
	207 : optional Duration dueDuration,
	208 : optional Quantity duration,
	209 : optional Period during,
	210 : optional list<PlanDefinition_DynamicValue> dynamicValue,
	211 : optional i64 effectiveTime,
	212 : optional list<ConceptMap_Element> element,
	213 : optional CodeableConcept emptyReason,
	214 : optional list<Questionnaire_EnableWhen> enableWhen,
	215 : optional bool encodeRequestUrl,
	216 : optional list<Reference> encounter,
	217 : optional i64 end,
	218 : optional list<CapabilityStatement_Endpoint> endpoint,
	219 : optional Reference entity,
	220 : optional CodeableConcept entityCodeableConcept,
	221 : optional Reference entityReference,
	222 : optional list<Reference> entry,
	223 : optional UDIEntryType entryType,
	224 : optional ConceptMapEquivalence equivalence,
	225 : optional string etag,
	226 : optional list<CapabilityStatement_Event> event,
	227 : optional bool example,
	228 : optional Reference exampleFor,
	229 : optional ExpansionProfile_Exclude exclude,
	230 : optional bool excluded,
	231 : optional Duration expectedSupplyDuration,
	232 : optional i64 expirationDate,
	233 : optional i64 expiry,
	234 : optional CodeableConcept exposureRoute,
	235 : optional string expression,
	236 : optional id extends,
	237 : optional list<binary> extension,
	238 : optional VisionEyes eye,
	239 : optional double fScore,
	240 : optional CodeableConcept facilityType,
	241 : optional double factor,
	242 : optional Money fee,
	243 : optional string field,
	244 : optional list<ValueSet_Filter> filter,
	245 : optional list<EligibilityResponse_Financial> financial,
	246 : optional CodeableConcept flag,
	247 : optional list<CodeableConcept> fluidConsistencyType,
	248 : optional bool focal,
	249 : optional ResourceType focus,
	250 : optional CodeableConcept foodType,
	251 : optional CodeableConcept forecastStatus,
	252 : optional Coding format,
	253 : optional uri fullUrl,
	254 : optional AdministrativeGender gender,
	255 : optional CodeableConcept genderStatus,
	256 : optional string genomeBuild,
	257 : optional list<Reference> goal,
	258 : optional list<id> goalId,
	259 : optional list<Contract_Term> group,
	260 : optional string groupDisplay,
	261 : optional ActionGroupingBehavior groupingBehavior,
	262 : optional double gtFP,
	263 : optional bool hasAnswer,
	264 : optional list<string> header,
	265 : optional string headerField,
	266 : optional Quantity high,
	267 : optional string hint,
	268 : optional string id,
	269 : optional Identifier identifier,
	270 : optional id identity,
	271 : optional string ifMatch,
	272 : optional instant ifModifiedSince,
	273 : optional string ifNoneExist,
	274 : optional string ifNoneMatch,
	275 : optional Reference imagingStudy,
	276 : optional bool inactive,
	277 : optional ExpansionProfile_Include include,
	278 : optional i64 index,
	279 : optional Reference individual,
	280 : optional list<positiveInt> informationLinkId,
	281 : optional Attachment initialAttachment,
	282 : optional bool initialBoolean,
	283 : optional Coding initialCoding,
	284 : optional i32 initialDate,
	285 : optional i64 initialDateTime,
	286 : optional double initialDecimal,
	287 : optional i64 initialInteger,
	288 : optional Quantity initialQuantity,
	289 : optional Reference initialReference,
	290 : optional string initialString,
	291 : optional time initialTime,
	292 : optional uri initialUri,
	293 : optional list<DataRequirement> input,
	294 : optional Reference instance,
	295 : optional string instruction,
	296 : optional list<CapabilityStatement_Interaction1> interaction,
	297 : optional CodeableConcept interpretation,
	298 : optional bool isActive,
	299 : optional i64 issued,
	300 : optional uri issuer,
	301 : optional list<Reference> item,
	302 : optional CodeableConcept itemCodeableConcept,
	303 : optional Reference itemReference,
	304 : optional uri jurisdiction,
	305 : optional GuidePageKind kind,
	306 : optional string label,
	307 : optional string language,
	308 : optional instant lastModified,
	309 : optional Coding laterality,
	310 : optional double latitude,
	311 : optional Coding lifecycle,
	312 : optional list<Bundle_Link> link,
	313 : optional string linkId,
	314 : optional StructureMapSourceListMode listMode,
	315 : optional id listRuleId,
	316 : optional Reference location,
	317 : optional Address locationAddress,
	318 : optional CodeableConcept locationCodeableConcept,
	319 : optional Reference locationReference,
	320 : optional i32 lockedDate,
	321 : optional double longitude,
	322 : optional string lotNumber,
	323 : optional Quantity low,
	324 : optional list<CodeableConcept> manifestation,
	325 : optional Reference manipulated,
	326 : optional string max,
	327 : optional i64 maxLength,
	328 : optional Quantity maxVolumeToDeliver,
	329 : optional ConsentDataMeaning meaning,
	330 : optional CodeableConcept measure,
	331 : optional double measureScore,
	332 : optional Coding media,
	333 : optional Reference member,
	334 : optional Reference message,
	335 : optional HTTPVerb method,
	336 : optional i64 min,
	337 : optional string minimumId,
	338 : optional Coding modality,
	339 : optional SearchEntryMode mode,
	340 : optional list<CodeableConcept> modifier,
	341 : optional list<binary> modifierExtension,
	342 : optional string name,
	343 : optional bool navigationLinks,
	344 : optional Money net,
	345 : optional AuditEvent_Network network,
	346 : optional list<Annotation> note,
	347 : optional list<positiveInt> noteNumber,
	348 : optional positiveInt number,
	349 : optional int32 numberOfInstances,
	350 : optional positiveInt numberOfRepeatsAllowed,
	351 : optional list<NutritionOrder_Nutrient> nutrient,
	352 : optional string observedAllele,
	353 : optional i64 offset,
	354 : optional Duration offsetDuration,
	355 : optional Range offsetRange,
	356 : optional Reference onBehalfOf,
	357 : optional Reference onBehalfOfReference,
	358 : optional uri onBehalfOfUri,
	359 : optional bool onHold,
	360 : optional i64 onset,
	361 : optional Age onsetAge,
	362 : optional Period onsetPeriod,
	363 : optional Range onsetRange,
	364 : optional string onsetString,
	365 : optional FilterOperator op,
	366 : optional list<CapabilityStatement_Operation> operation,
	367 : optional list<FilterOperator> operator,
	368 : optional list<Questionnaire_Option> option,
	369 : optional Reference options,
	370 : optional CodeableConcept orderedBy,
	371 : optional Reference organization,
	372 : optional Reference origin,
	373 : optional Reference other,
	374 : optional ResourceContainer outcome,
	375 : optional list<CodeableConcept> outcomeCodeableConcept,
	376 : optional list<Reference> outcomeReference,
	377 : optional list<DataRequirement> output,
	378 : optional Attachment pAttachment,
	379 : optional Reference pReference,
	380 : optional list<string> package,
	381 : optional CodeableConcept packageCode,
	382 : optional list<ImplementationGuide_Page> page,
	383 : optional list<string> param,
	384 : optional list<StructureMap_Parameter> parameter,
	385 : optional list<string> parameterName,
	386 : optional string params,
	387 : optional list<OperationDefinition_Parameter> part,
	388 : optional list<PlanDefinition_Participant> participant,
	389 : optional Reference party,
	390 : optional string path,
	391 : optional Reference patients,
	392 : optional Reference payee,
	393 : optional string payload,
	394 : optional list<Reference> performer,
	395 : optional Period period,
	396 : optional string plan,
	397 : optional string planDisplay,
	398 : optional double points,
	399 : optional list<uri> policy,
	400 : optional list<Measure_Population> population,
	401 : optional double power,
	402 : optional CodeableConcept practiceSetting,
	403 : optional Identifier preAdmissionIdentifier,
	404 : optional list<string> preAuthRef,
	405 : optional ActionPrecheckBehavior precheckBehavior,
	406 : optional double precision,
	407 : optional bool preferred,
	408 : optional string prefix,
	409 : optional positiveInt priority,
	410 : optional double prism,
	411 : optional double probabilityDecimal,
	412 : optional Range probabilityRange,
	413 : optional CodeableConcept procedure,
	414 : optional CodeableConcept procedureCodeableConcept,
	415 : optional list<positiveInt> procedureLinkId,
	416 : optional Reference procedureReference,
	417 : optional list<ConceptMap_DependsOn> product,
	418 : optional CodeableConcept productCodeableConcept,
	419 : optional string productName,
	420 : optional Reference productReference,
	421 : optional string productionSpec,
	422 : optional Reference profile,
	423 : optional list<CodeableConcept> programCode,
	424 : optional list<Annotation> progress,
	425 : optional bool prohibited,
	426 : optional list<CodeSystem_Property1> property,
	427 : optional Coding protocol,
	428 : optional Reference provider,
	429 : optional list<Coding> purpose,
	430 : optional list<CodeableConcept> purposeOfUse,
	431 : optional CodeableConcept qualification,
	432 : optional CodeableConcept qualitativeRisk,
	433 : optional Quantity quantity,
	434 : optional binary query,
	435 : optional double queryFP,
	436 : optional double queryTP,
	437 : optional string question,
	438 : optional positiveInt rank,
	439 : optional Quantity rateQuantity,
	440 : optional Ratio rateRatio,
	441 : optional string rationale,
	442 : optional CodeableConcept reAdmission,
	443 : optional bool readHistory,
	444 : optional bool readOnly,
	445 : optional string readsetId,
	446 : optional CodeableConcept reason,
	447 : optional list<CodeableConcept> reasonCode,
	448 : optional list<CodeableConcept> reasonNotGiven,
	449 : optional list<Reference> reasonReference,
	450 : optional double recall,
	451 : optional list<Reference> recipient,
	452 : optional Reference ref,
	453 : optional Reference reference,
	454 : optional string referenceAllele,
	455 : optional list<ReferenceHandlingPolicy> referencePolicy,
	456 : optional list<Observation_ReferenceRange> referenceRange,
	457 : optional CodeableConcept referenceSeqId,
	458 : optional Reference referenceSeqPointer,
	459 : optional string referenceSeqString,
	460 : optional list<DocumentReference_Related> related,
	461 : optional list<PlanDefinition_RelatedAction> relatedAction,
	462 : optional CodeableConcept relatedAgentType,
	463 : optional string relation,
	464 : optional CodeableConcept relationship,
	465 : optional double relativeRisk,
	466 : optional i64 releaseDate,
	467 : optional int32 reliableCache,
	468 : optional bool repeats,
	469 : optional positiveInt repetitions,
	470 : optional bool reported,
	471 : optional Bundle_Request request,
	472 : optional list<TestScript_RequestHeader> requestHeader,
	473 : optional id requestId,
	474 : optional TestScriptRequestMethodCode requestMethod,
	475 : optional string requestURL,
	476 : optional bool requestor,
	477 : optional ParticipantRequired _required,
	478 : optional ActionRequiredBehavior requiredBehavior,
	479 : optional ResourceContainer resource,
	480 : optional Coding resourceType,
	481 : optional Bundle_Response response,
	482 : optional string responseCode,
	483 : optional id responseId,
	484 : optional bool responsible,
	485 : optional list<Reference> responsibleParty,
	486 : optional TestReportActionResult result,
	487 : optional CodeableConcept revenue,
	488 : optional CodeableConcept role,
	489 : optional CodeableConcept route,
	490 : optional CodeableConcept routeofAdministration,
	491 : optional GraphCompartmentRule rule,
	492 : optional id ruleId,
	493 : optional TestScript_Ruleset1 ruleset,
	494 : optional id rulesetId,
	495 : optional list<Timing> schedule,
	496 : optional Period scheduledPeriod,
	497 : optional string scheduledString,
	498 : optional Timing scheduledTiming,
	499 : optional double score,
	500 : optional Bundle_Search search,
	501 : optional list<string> searchInclude,
	502 : optional list<CapabilityStatement_SearchParam> searchParam,
	503 : optional list<string> searchRevInclude,
	504 : optional SearchParamType searchType,
	505 : optional list<Composition_Section> section,
	506 : optional CapabilityStatement_Security security,
	507 : optional list<Coding> securityLabel,
	508 : optional ActionSelectionBehavior selectionBehavior,
	509 : optional positiveInt sequence,
	510 : optional positiveInt sequenceLinkId,
	511 : optional list<ImagingManifest_Series> series,
	512 : optional positiveInt seriesDoses,
	513 : optional list<CodeableConcept> _service,
	514 : optional i32 servicedDate,
	515 : optional Period servicedPeriod,
	516 : optional AllergyIntoleranceSeverity severity,
	517 : optional list<Signature> signature,
	518 : optional string site,
	519 : optional markdown situation,
	520 : optional string sliceName,
	521 : optional string software,
	522 : optional oid sopClass,
	523 : optional uri source,
	524 : optional id sourceId,
	525 : optional Reference sourcePatientInfo,
	526 : optional Reference sourceReference,
	527 : optional uri sourceUri,
	528 : optional string sourceVersion,
	529 : optional CodeableConcept specType,
	530 : optional list<CodeableConcept> specialArrangement,
	531 : optional list<CodeableConcept> specialCourtesy,
	532 : optional CodeableConcept species,
	533 : optional Quantity specimenQuantity,
	534 : optional double sphere,
	535 : optional CodeableConcept standardSequence,
	536 : optional CodeableConcept start,
	537 : optional i64 started,
	538 : optional DeviceMetricCalibrationState state,
	539 : optional ParticipationStatus status,
	540 : optional string statusReason,
	541 : optional i64 strand,
	542 : optional list<Measure_Stratifier> stratifier,
	543 : optional list<MeasureReport_Stratum> stratum,
	544 : optional BindingStrength strength,
	545 : optional CodeableConcept subCategory,
	546 : optional string subClass,
	547 : optional string subClassDisplay,
	548 : optional list<Claim_SubDetail> subDetail,
	549 : optional string subGroup,
	550 : optional string subGroupDisplay,
	551 : optional string subPlan,
	552 : optional string subPlanDisplay,
	553 : optional list<CodeableConcept> subSite,
	554 : optional CodeableConcept subType,
	555 : optional positiveInt subdetailSequenceLinkId,
	556 : optional Reference subject,
	557 : optional Reference submitter,
	558 : optional CodeableConcept substance,
	559 : optional CodeableConcept substanceCodeableConcept,
	560 : optional Reference substanceReference,
	561 : optional CodeableConcept summary,
	562 : optional list<CapabilityStatement_SupportedMessage> supportedMessage,
	563 : optional list<Reference> supportingImmunization,
	564 : optional list<Reference> supportingPatientInformation,
	565 : optional uri system,
	566 : optional uri target,
	567 : optional list<CodeableConcept> targetDisease,
	568 : optional id targetId,
	569 : optional Identifier targetIdentifier,
	570 : optional Reference targetReference,
	571 : optional string targetVersion,
	572 : optional list<ContactPoint> telecom,
	573 : optional CodeableConcept term,
	574 : optional string text,
	575 : optional string textEquivalent,
	576 : optional list<NutritionOrder_Texture> texture,
	577 : optional i64 time,
	578 : optional i64 timeDateTime,
	579 : optional Period timePeriod,
	580 : optional i64 timestamp,
	581 : optional i32 timingDate,
	582 : optional i64 timingDateTime,
	583 : optional Duration timingDuration,
	584 : optional Period timingPeriod,
	585 : optional Range timingRange,
	586 : optional Timing timingTiming,
	587 : optional string title,
	588 : optional list<Reference> topic,
	589 : optional i64 total,
	590 : optional Reference transform,
	591 : optional list<TriggerDefinition> triggerDefinition,
	592 : optional double truthFN,
	593 : optional double truthTP,
	594 : optional ActionParticipantType type,
	595 : optional StructureMapGroupTypeMode typeMode,
	596 : optional list<Reference> udi,
	597 : optional oid uid,
	598 : optional CodeableConcept unit,
	599 : optional Money unitPrice,
	600 : optional ConceptMap_Unmapped unmapped,
	601 : optional bool updateCreate,
	602 : optional uri _uri,
	603 : optional uri url,
	604 : optional list<CodeableConcept> usage,
	605 : optional Coding use,
	606 : optional Money usedMoney,
	607 : optional int32 usedUnsignedInt,
	608 : optional Identifier userId,
	609 : optional CodeableConcept vaccineCode,
	610 : optional id validateProfileId,
	611 : optional bool validated,
	612 : optional Period validityPeriod,
	613 : optional binary value,
	614 : optional Address valueAddress,
	615 : optional Age valueAge,
	616 : optional Annotation valueAnnotation,
	617 : optional Attachment valueAttachment,
	618 : optional binary valueBase64Binary,
	619 : optional bool valueBoolean,
	620 : optional code valueCode,
	621 : optional CodeableConcept valueCodeableConcept,
	622 : optional Coding valueCoding,
	623 : optional ContactPoint valueContactPoint,
	624 : optional Count valueCount,
	625 : optional i32 valueDate,
	626 : optional i64 valueDateTime,
	627 : optional double valueDecimal,
	628 : optional Distance valueDistance,
	629 : optional Duration valueDuration,
	630 : optional HumanName valueHumanName,
	631 : optional id valueId,
	632 : optional Identifier valueIdentifier,
	633 : optional instant valueInstant,
	634 : optional i64 valueInteger,
	635 : optional markdown valueMarkdown,
	636 : optional Meta valueMeta,
	637 : optional Money valueMoney,
	638 : optional oid valueOid,
	639 : optional Period valuePeriod,
	640 : optional positiveInt valuePositiveInt,
	641 : optional Quantity valueQuantity,
	642 : optional Range valueRange,
	643 : optional Ratio valueRatio,
	644 : optional Reference valueReference,
	645 : optional SampledData valueSampledData,
	646 : optional list<uri> valueSet,
	647 : optional Reference valueSetReference,
	648 : optional uri valueSetUri,
	649 : optional Signature valueSignature,
	650 : optional string valueString,
	651 : optional time valueTime,
	652 : optional Timing valueTiming,
	653 : optional int32 valueUnsignedInt,
	654 : optional uri valueUri,
	655 : optional list<Contract_ValuedItem1> valuedItem,
	656 : optional id variable,
	657 : optional Reference variantPointer,
	658 : optional string variantsetId,
	659 : optional string version,
	660 : optional ResourceVersionPolicy versioning,
	661 : optional bool warningOnly,
	662 : optional bool wasSubstituted,
	663 : optional Identifier whatIdentifier,
	664 : optional Reference whatReference,
	665 : optional uri whatUri,
	666 : optional Period whenPeriod,
	667 : optional Range whenRange,
	668 : optional Reference whoReference,
	669 : optional uri whoUri,
	670 : optional i64 windowEnd,
	671 : optional i64 windowStart,
}

struct Basic
{
	1 : optional Reference author,
	2 : required CodeableConcept code,
	3 : optional list<ResourceContainer> contained,
	4 : optional i32 created,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional list<Identifier> identifier,
	8 : optional uri implicitRules,
	9 : optional code language,
	10 : optional Meta meta,
	11 : optional list<binary> modifierExtension,
	12 : optional Reference subject,
	13 : optional Narrative text,
}

struct Binary
{
	1 : required binary content,
	2 : required code contentType,
	3 : optional id _id,
	4 : optional uri implicitRules,
	5 : optional code language,
	6 : optional Meta meta,
	7 : optional Reference securityContext,
}

struct BodySite
{
	1 : optional bool active,
	2 : optional CodeableConcept code,
	3 : optional list<ResourceContainer> contained,
	4 : optional string description,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional list<Identifier> identifier,
	8 : optional list<Attachment> image,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : required Reference patient,
	14 : optional list<CodeableConcept> qualifier,
	15 : optional Narrative text,
}

struct Bundle
{
	1 : optional list<Bundle_Entry> entry,
	2 : optional id _id,
	3 : optional Identifier identifier,
	4 : optional uri implicitRules,
	5 : optional code language,
	6 : optional list<Bundle_Link> link,
	7 : optional Meta meta,
	8 : optional Signature signature,
	9 : optional int32 total,
	10 : required BundleType type,
}

struct Bundle_Entry
{
	1 : optional list<binary> extension,
	2 : optional uri fullUrl,
	3 : optional string id,
	4 : optional list<Bundle_Link> link,
	5 : optional list<binary> modifierExtension,
	6 : optional Bundle_Request request,
	7 : optional ResourceContainer resource,
	8 : optional Bundle_Response response,
	9 : optional Bundle_Search search,
}

struct Bundle_Response
{
	1 : optional string etag,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional instant lastModified,
	5 : optional uri location,
	6 : optional list<binary> modifierExtension,
	7 : optional ResourceContainer outcome,
	8 : required string status,
}

struct CapabilityStatement
{
	1 : required UnknownContentCode acceptUnknown,
	2 : optional list<ContactDetail> contact,
	3 : optional list<ResourceContainer> contained,
	4 : optional markdown copyright,
	5 : required i64 _date,
	6 : optional markdown description,
	7 : optional list<CapabilityStatement_Document> document,
	8 : optional bool experimental,
	9 : optional list<binary> extension,
	10 : required id fhirVersion,
	11 : required list<code> format,
	12 : optional id _id,
	13 : optional CapabilityStatement_Implementation implementation,
	14 : optional list<uri> implementationGuide,
	15 : optional uri implicitRules,
	16 : optional list<uri> instantiates,
	17 : optional list<CodeableConcept> jurisdiction,
	18 : required CapabilityStatementKind kind,
	19 : optional code language,
	20 : optional list<CapabilityStatement_Messaging> messaging,
	21 : optional Meta meta,
	22 : optional list<binary> modifierExtension,
	23 : optional string name,
	24 : optional list<code> patchFormat,
	25 : optional list<Reference> profile,
	26 : optional string publisher,
	27 : optional markdown purpose,
	28 : optional list<CapabilityStatement_Rest> rest,
	29 : optional CapabilityStatement_Software software,
	30 : required PublicationStatus status,
	31 : optional Narrative text,
	32 : optional string title,
	33 : optional uri url,
	34 : optional list<UsageContext> useContext,
	35 : optional string version,
}

struct CapabilityStatement_Document
{
	1 : optional string documentation,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required DocumentMode mode,
	5 : optional list<binary> modifierExtension,
	6 : required Reference profile,
}

struct CapabilityStatement_Event
{
	1 : optional MessageSignificanceCategory category,
	2 : required Coding code,
	3 : optional string documentation,
	4 : optional list<binary> extension,
	5 : required ResourceType focus,
	6 : optional string id,
	7 : required EventCapabilityMode mode,
	8 : optional list<binary> modifierExtension,
	9 : required Reference request,
	10 : required Reference response,
}

struct CapabilityStatement_Messaging
{
	1 : optional string documentation,
	2 : optional list<CapabilityStatement_Endpoint> endpoint,
	3 : optional list<CapabilityStatement_Event> event,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
	7 : optional int32 reliableCache,
	8 : optional list<CapabilityStatement_SupportedMessage> supportedMessage,
}

struct CapabilityStatement_Operation
{
	1 : required Reference definition,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required string name,
}

struct CapabilityStatement_Resource
{
	1 : optional bool conditionalCreate,
	2 : optional ConditionalDeleteStatus conditionalDelete,
	3 : optional ConditionalReadStatus conditionalRead,
	4 : optional bool conditionalUpdate,
	5 : optional markdown documentation,
	6 : optional list<binary> extension,
	7 : optional string id,
	8 : required list<CapabilityStatement_Interaction> interaction,
	9 : optional list<binary> modifierExtension,
	10 : optional Reference profile,
	11 : optional bool readHistory,
	12 : optional list<ReferenceHandlingPolicy> referencePolicy,
	13 : optional list<string> searchInclude,
	14 : optional list<CapabilityStatement_SearchParam> searchParam,
	15 : optional list<string> searchRevInclude,
	16 : required ResourceType type,
	17 : optional bool updateCreate,
	18 : optional ResourceVersionPolicy versioning,
}

struct CapabilityStatement_Rest
{
	1 : optional list<uri> compartment,
	2 : optional string documentation,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<CapabilityStatement_Interaction1> interaction,
	6 : required RestfulCapabilityMode mode,
	7 : optional list<binary> modifierExtension,
	8 : optional list<CapabilityStatement_Operation> operation,
	9 : optional list<CapabilityStatement_Resource> resource,
	10 : optional list<CapabilityStatement_SearchParam> searchParam,
	11 : optional CapabilityStatement_Security security,
}

struct CapabilityStatement_SupportedMessage
{
	1 : required Reference definition,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required EventCapabilityMode mode,
	5 : optional list<binary> modifierExtension,
}

struct CarePlan
{
	1 : optional list<CarePlan_Activity> activity,
	2 : optional list<Reference> addresses,
	3 : optional list<Reference> author,
	4 : optional list<Reference> basedOn,
	5 : optional list<Reference> careTeam,
	6 : optional list<CodeableConcept> category,
	7 : optional list<ResourceContainer> contained,
	8 : optional Reference context,
	9 : optional list<Reference> definition,
	10 : optional string description,
	11 : optional list<binary> extension,
	12 : optional list<Reference> goal,
	13 : optional id _id,
	14 : optional list<Identifier> identifier,
	15 : optional uri implicitRules,
	16 : required CarePlanIntent intent,
	17 : optional code language,
	18 : optional Meta meta,
	19 : optional list<binary> modifierExtension,
	20 : optional list<Annotation> note,
	21 : optional list<Reference> partOf,
	22 : optional Period period,
	23 : optional list<Reference> replaces,
	24 : required CarePlanStatus status,
	25 : required Reference subject,
	26 : optional list<Reference> supportingInfo,
	27 : optional Narrative text,
	28 : optional string title,
}

struct CarePlan_Activity
{
	1 : optional CarePlan_Detail detail,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional list<CodeableConcept> outcomeCodeableConcept,
	6 : optional list<Reference> outcomeReference,
	7 : optional list<Annotation> progress,
	8 : optional Reference reference,
}

struct CarePlan_Detail
{
	1 : optional CodeableConcept category,
	2 : optional CodeableConcept code,
	3 : optional Quantity dailyAmount,
	4 : optional Reference definition,
	5 : optional string description,
	6 : optional list<binary> extension,
	7 : optional list<Reference> goal,
	8 : optional string id,
	9 : optional Reference location,
	10 : optional list<binary> modifierExtension,
	11 : optional list<Reference> performer,
	12 : optional CodeableConcept productCodeableConcept,
	13 : optional Reference productReference,
	14 : optional bool prohibited,
	15 : optional Quantity quantity,
	16 : optional list<CodeableConcept> reasonCode,
	17 : optional list<Reference> reasonReference,
	18 : optional Period scheduledPeriod,
	19 : optional string scheduledString,
	20 : optional Timing scheduledTiming,
	21 : required CarePlanActivityStatus status,
	22 : optional string statusReason,
}

struct CareTeam
{
	1 : optional list<CodeableConcept> category,
	2 : optional list<ResourceContainer> contained,
	3 : optional Reference context,
	4 : optional list<binary> extension,
	5 : optional id _id,
	6 : optional list<Identifier> identifier,
	7 : optional uri implicitRules,
	8 : optional code language,
	9 : optional list<Reference> managingOrganization,
	10 : optional Meta meta,
	11 : optional list<binary> modifierExtension,
	12 : optional string name,
	13 : optional list<Annotation> note,
	14 : optional list<CareTeam_Participant> participant,
	15 : optional Period period,
	16 : optional list<CodeableConcept> reasonCode,
	17 : optional list<Reference> reasonReference,
	18 : optional CareTeamStatus status,
	19 : optional Reference subject,
	20 : optional Narrative text,
}

struct CareTeam_Participant
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional Reference member,
	4 : optional list<binary> modifierExtension,
	5 : optional Reference onBehalfOf,
	6 : optional Period period,
	7 : optional CodeableConcept role,
}

struct ChargeItem
{
	1 : optional list<Reference> account,
	2 : optional list<CodeableConcept> bodysite,
	3 : required CodeableConcept code,
	4 : optional list<ResourceContainer> contained,
	5 : optional Reference context,
	6 : optional list<uri> definition,
	7 : optional i64 enteredDate,
	8 : optional Reference enterer,
	9 : optional list<binary> extension,
	10 : optional double factorOverride,
	11 : optional id _id,
	12 : optional Identifier identifier,
	13 : optional uri implicitRules,
	14 : optional code language,
	15 : optional Meta meta,
	16 : optional list<binary> modifierExtension,
	17 : optional list<Annotation> note,
	18 : optional i64 occurrenceDateTime,
	19 : optional Period occurrencePeriod,
	20 : optional Timing occurrenceTiming,
	21 : optional string overrideReason,
	22 : optional list<Reference> partOf,
	23 : optional list<ChargeItem_Participant> participant,
	24 : optional Reference performingOrganization,
	25 : optional Money priceOverride,
	26 : optional Quantity quantity,
	27 : optional list<CodeableConcept> reason,
	28 : optional Reference requestingOrganization,
	29 : optional list<Reference> _service,
	30 : required ChargeItemStatus status,
	31 : required Reference subject,
	32 : optional list<Reference> supportingInformation,
	33 : optional Narrative text,
}

struct ChargeItem_Participant
{
	1 : required Reference actor,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional CodeableConcept role,
}

struct Claim
{
	1 : optional Claim_Accident accident,
	2 : optional Period billablePeriod,
	3 : optional list<Claim_CareTeam> careTeam,
	4 : optional list<ResourceContainer> contained,
	5 : optional i64 created,
	6 : optional list<Claim_Diagnosis> diagnosis,
	7 : optional Period employmentImpacted,
	8 : optional Reference enterer,
	9 : optional list<binary> extension,
	10 : optional Reference facility,
	11 : optional CodeableConcept fundsReserve,
	12 : optional Period hospitalization,
	13 : optional id _id,
	14 : optional list<Identifier> identifier,
	15 : optional uri implicitRules,
	16 : optional list<Claim_Information> information,
	17 : optional list<Claim_Insurance> insurance,
	18 : optional Reference insurer,
	19 : optional list<Claim_Item> item,
	20 : optional code language,
	21 : optional Meta meta,
	22 : optional list<binary> modifierExtension,
	23 : optional Reference organization,
	24 : optional Reference originalPrescription,
	25 : optional Reference patient,
	26 : optional Claim_Payee payee,
	27 : optional Reference prescription,
	28 : optional CodeableConcept priority,
	29 : optional list<Claim_Procedure> procedure,
	30 : optional Reference provider,
	31 : optional Reference referral,
	32 : optional list<Claim_Related> related,
	33 : optional FinancialResourceStatusCodes status,
	34 : optional list<CodeableConcept> subType,
	35 : optional Narrative text,
	36 : optional Money total,
	37 : optional CodeableConcept type,
	38 : optional Use use,
}

struct Claim_Accident
{
	1 : required i32 _date,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional Address locationAddress,
	5 : optional Reference locationReference,
	6 : optional list<binary> modifierExtension,
	7 : optional CodeableConcept type,
}

struct Claim_CareTeam
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required Reference provider,
	5 : optional CodeableConcept qualification,
	6 : optional bool responsible,
	7 : optional CodeableConcept role,
	8 : required positiveInt sequence,
}

struct Claim_Detail
{
	1 : optional CodeableConcept category,
	2 : optional list<binary> extension,
	3 : optional double factor,
	4 : optional string id,
	5 : optional list<CodeableConcept> modifier,
	6 : optional list<binary> modifierExtension,
	7 : optional Money net,
	8 : optional list<CodeableConcept> programCode,
	9 : optional Quantity quantity,
	10 : optional CodeableConcept revenue,
	11 : required positiveInt sequence,
	12 : optional CodeableConcept _service,
	13 : optional list<Claim_SubDetail> subDetail,
	14 : optional list<Reference> udi,
	15 : optional Money unitPrice,
}

struct Claim_Diagnosis
{
	1 : optional CodeableConcept diagnosisCodeableConcept,
	2 : optional Reference diagnosisReference,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional CodeableConcept packageCode,
	7 : required positiveInt sequence,
	8 : optional list<CodeableConcept> type,
}

struct Claim_Information
{
	1 : required CodeableConcept category,
	2 : optional CodeableConcept code,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional CodeableConcept reason,
	7 : required positiveInt sequence,
	8 : optional i32 timingDate,
	9 : optional Period timingPeriod,
	10 : optional Attachment valueAttachment,
	11 : optional Quantity valueQuantity,
	12 : optional Reference valueReference,
	13 : optional string valueString,
}

struct Claim_Insurance
{
	1 : optional string businessArrangement,
	2 : optional Reference claimResponse,
	3 : required Reference coverage,
	4 : optional list<binary> extension,
	5 : required bool focal,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
	8 : optional list<string> preAuthRef,
	9 : required positiveInt sequence,
}

struct Claim_Item
{
	1 : optional CodeableConcept bodySite,
	2 : optional list<positiveInt> careTeamLinkId,
	3 : optional CodeableConcept category,
	4 : optional list<Claim_Detail> detail,
	5 : optional list<positiveInt> diagnosisLinkId,
	6 : optional list<Reference> encounter,
	7 : optional list<binary> extension,
	8 : optional double factor,
	9 : optional string id,
	10 : optional list<positiveInt> informationLinkId,
	11 : optional Address locationAddress,
	12 : optional CodeableConcept locationCodeableConcept,
	13 : optional Reference locationReference,
	14 : optional list<CodeableConcept> modifier,
	15 : optional list<binary> modifierExtension,
	16 : optional Money net,
	17 : optional list<positiveInt> procedureLinkId,
	18 : optional list<CodeableConcept> programCode,
	19 : optional Quantity quantity,
	20 : optional CodeableConcept revenue,
	21 : required positiveInt sequence,
	22 : optional CodeableConcept _service,
	23 : optional i32 servicedDate,
	24 : optional Period servicedPeriod,
	25 : optional list<CodeableConcept> subSite,
	26 : optional list<Reference> udi,
	27 : optional Money unitPrice,
}

struct Claim_Payee
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional Reference party,
	5 : optional Coding resourceType,
	6 : required CodeableConcept type,
}

struct Claim_Procedure
{
	1 : optional i64 _date,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional CodeableConcept procedureCodeableConcept,
	6 : optional Reference procedureReference,
	7 : required positiveInt sequence,
}

struct Claim_Related
{
	1 : optional Reference claim,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Identifier reference,
	6 : optional CodeableConcept relationship,
}

struct Claim_SubDetail
{
	1 : optional CodeableConcept category,
	2 : optional list<binary> extension,
	3 : optional double factor,
	4 : optional string id,
	5 : optional list<CodeableConcept> modifier,
	6 : optional list<binary> modifierExtension,
	7 : optional Money net,
	8 : optional list<CodeableConcept> programCode,
	9 : optional Quantity quantity,
	10 : optional CodeableConcept revenue,
	11 : required positiveInt sequence,
	12 : optional CodeableConcept _service,
	13 : optional list<Reference> udi,
	14 : optional Money unitPrice,
}

struct ClaimResponse
{
	1 : optional list<ClaimResponse_AddItem> addItem,
	2 : optional list<Reference> communicationRequest,
	3 : optional list<ResourceContainer> contained,
	4 : optional i64 created,
	5 : optional string disposition,
	6 : optional list<ClaimResponse_Error> error,
	7 : optional list<binary> extension,
	8 : optional CodeableConcept form,
	9 : optional id _id,
	10 : optional list<Identifier> identifier,
	11 : optional uri implicitRules,
	12 : optional list<ClaimResponse_Insurance> insurance,
	13 : optional Reference insurer,
	14 : optional list<ClaimResponse_Item> item,
	15 : optional code language,
	16 : optional Meta meta,
	17 : optional list<binary> modifierExtension,
	18 : optional CodeableConcept outcome,
	19 : optional Reference patient,
	20 : optional CodeableConcept payeeType,
	21 : optional ClaimResponse_Payment payment,
	22 : optional list<ClaimResponse_ProcessNote> processNote,
	23 : optional Reference request,
	24 : optional Reference requestOrganization,
	25 : optional Reference requestProvider,
	26 : optional Coding reserved,
	27 : optional FinancialResourceStatusCodes status,
	28 : optional Narrative text,
	29 : optional Money totalBenefit,
	30 : optional Money totalCost,
	31 : optional Money unallocDeductable,
}

struct ClaimResponse_Insurance
{
	1 : optional string businessArrangement,
	2 : optional Reference claimResponse,
	3 : required Reference coverage,
	4 : optional list<binary> extension,
	5 : required bool focal,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
	8 : optional list<string> preAuthRef,
	9 : required positiveInt sequence,
}

struct ClaimResponse_Payment
{
	1 : optional Money adjustment,
	2 : optional CodeableConcept adjustmentReason,
	3 : optional Money amount,
	4 : optional i32 _date,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional Identifier identifier,
	8 : optional list<binary> modifierExtension,
	9 : optional CodeableConcept type,
}

struct ClinicalImpression
{
	1 : optional list<Reference> action,
	2 : optional Reference assessor,
	3 : optional CodeableConcept code,
	4 : optional list<ResourceContainer> contained,
	5 : optional Reference context,
	6 : optional i64 _date,
	7 : optional string description,
	8 : optional i64 effectiveDateTime,
	9 : optional Period effectivePeriod,
	10 : optional list<binary> extension,
	11 : optional list<ClinicalImpression_Finding> finding,
	12 : optional id _id,
	13 : optional list<Identifier> identifier,
	14 : optional uri implicitRules,
	15 : optional list<ClinicalImpression_Investigation> investigation,
	16 : optional code language,
	17 : optional Meta meta,
	18 : optional list<binary> modifierExtension,
	19 : optional list<Annotation> note,
	20 : optional Reference previous,
	21 : optional list<Reference> problem,
	22 : optional list<CodeableConcept> prognosisCodeableConcept,
	23 : optional list<Reference> prognosisReference,
	24 : optional list<uri> protocol,
	25 : required ClinicalImpressionStatus status,
	26 : required Reference subject,
	27 : optional string summary,
	28 : optional Narrative text,
}

struct ClinicalImpression_Finding
{
	1 : optional string basis,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional CodeableConcept itemCodeableConcept,
	5 : optional Reference itemReference,
	6 : optional list<binary> modifierExtension,
}

struct ClinicalImpression_Investigation
{
	1 : required CodeableConcept code,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<Reference> item,
	5 : optional list<binary> modifierExtension,
}

struct CodeSystem
{
	1 : optional bool caseSensitive,
	2 : optional bool compositional,
	3 : optional list<CodeSystem_Concept> concept,
	4 : optional list<ContactDetail> contact,
	5 : optional list<ResourceContainer> contained,
	6 : required CodeSystemContentMode content,
	7 : optional markdown copyright,
	8 : optional int32 count,
	9 : optional i64 _date,
	10 : optional markdown description,
	11 : optional bool experimental,
	12 : optional list<binary> extension,
	13 : optional list<CodeSystem_Filter> filter,
	14 : optional CodeSystemHierarchyMeaning hierarchyMeaning,
	15 : optional id _id,
	16 : optional Identifier identifier,
	17 : optional uri implicitRules,
	18 : optional list<CodeableConcept> jurisdiction,
	19 : optional code language,
	20 : optional Meta meta,
	21 : optional list<binary> modifierExtension,
	22 : optional string name,
	23 : optional list<CodeSystem_Property> property,
	24 : optional string publisher,
	25 : optional markdown purpose,
	26 : required PublicationStatus status,
	27 : optional Narrative text,
	28 : optional string title,
	29 : optional uri url,
	30 : optional list<UsageContext> useContext,
	31 : optional uri valueSet,
	32 : optional string version,
	33 : optional bool versionNeeded,
}

struct Communication
{
	1 : optional list<Reference> basedOn,
	2 : optional list<CodeableConcept> category,
	3 : optional list<ResourceContainer> contained,
	4 : optional Reference context,
	5 : optional list<Reference> definition,
	6 : optional list<binary> extension,
	7 : optional id _id,
	8 : optional list<Identifier> identifier,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional list<CodeableConcept> medium,
	12 : optional Meta meta,
	13 : optional list<binary> modifierExtension,
	14 : optional bool notDone,
	15 : optional CodeableConcept notDoneReason,
	16 : optional list<Annotation> note,
	17 : optional list<Reference> partOf,
	18 : optional list<Communication_Payload> payload,
	19 : optional list<CodeableConcept> reasonCode,
	20 : optional list<Reference> reasonReference,
	21 : optional i64 received,
	22 : optional list<Reference> recipient,
	23 : optional Reference sender,
	24 : optional i64 sent,
	25 : required EventStatus status,
	26 : optional Reference subject,
	27 : optional Narrative text,
	28 : optional list<Reference> topic,
}

struct Communication_Payload
{
	1 : optional Attachment contentAttachment,
	2 : optional Reference contentReference,
	3 : optional string contentString,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
}

struct CommunicationRequest
{
	1 : optional i64 authoredOn,
	2 : optional list<Reference> basedOn,
	3 : optional list<CodeableConcept> category,
	4 : optional list<ResourceContainer> contained,
	5 : optional Reference context,
	6 : optional list<binary> extension,
	7 : optional Identifier groupIdentifier,
	8 : optional id _id,
	9 : optional list<Identifier> identifier,
	10 : optional uri implicitRules,
	11 : optional code language,
	12 : optional list<CodeableConcept> medium,
	13 : optional Meta meta,
	14 : optional list<binary> modifierExtension,
	15 : optional list<Annotation> note,
	16 : optional i64 occurrenceDateTime,
	17 : optional Period occurrencePeriod,
	18 : optional list<CommunicationRequest_Payload> payload,
	19 : optional RequestPriority priority,
	20 : optional list<CodeableConcept> reasonCode,
	21 : optional list<Reference> reasonReference,
	22 : optional list<Reference> recipient,
	23 : optional list<Reference> replaces,
	24 : optional CommunicationRequest_Requester requester,
	25 : optional Reference sender,
	26 : required RequestStatus status,
	27 : optional Reference subject,
	28 : optional Narrative text,
	29 : optional list<Reference> topic,
}

struct CommunicationRequest_Payload
{
	1 : optional Attachment contentAttachment,
	2 : optional Reference contentReference,
	3 : optional string contentString,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
}

struct CommunicationRequest_Requester
{
	1 : required Reference agent,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Reference onBehalfOf,
}

struct CompartmentDefinition
{
	1 : required CompartmentType code,
	2 : optional list<ContactDetail> contact,
	3 : optional list<ResourceContainer> contained,
	4 : optional i64 _date,
	5 : optional markdown description,
	6 : optional bool experimental,
	7 : optional list<binary> extension,
	8 : optional id _id,
	9 : optional uri implicitRules,
	10 : optional list<CodeableConcept> jurisdiction,
	11 : optional code language,
	12 : optional Meta meta,
	13 : optional list<binary> modifierExtension,
	14 : required string name,
	15 : optional string publisher,
	16 : optional markdown purpose,
	17 : optional list<CompartmentDefinition_Resource> resource,
	18 : required bool search,
	19 : required PublicationStatus status,
	20 : optional Narrative text,
	21 : optional string title,
	22 : required uri url,
	23 : optional list<UsageContext> useContext,
}

struct Composition
{
	1 : optional list<Composition_Attester> attester,
	2 : required list<Reference> author,
	3 : optional CodeableConcept _class,
	4 : optional ConfidentialityClassification confidentiality,
	5 : optional list<ResourceContainer> contained,
	6 : optional Reference custodian,
	7 : required i64 _date,
	8 : optional Reference encounter,
	9 : optional list<Composition_Event> event,
	10 : optional list<binary> extension,
	11 : optional id _id,
	12 : optional Identifier identifier,
	13 : optional uri implicitRules,
	14 : optional code language,
	15 : optional Meta meta,
	16 : optional list<binary> modifierExtension,
	17 : optional list<Composition_RelatesTo> relatesTo,
	18 : optional list<Composition_Section> section,
	19 : required CompositionStatus status,
	20 : required Reference subject,
	21 : optional Narrative text,
	22 : required string title,
	23 : required CodeableConcept type,
}

struct Composition_Attester
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required list<CompositionAttestationMode> mode,
	4 : optional list<binary> modifierExtension,
	5 : optional Reference party,
	6 : optional i64 time,
}

struct Composition_Event
{
	1 : optional list<CodeableConcept> code,
	2 : optional list<Reference> detail,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional Period period,
}

struct Composition_RelatesTo
{
	1 : required DocumentRelationshipType code,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Identifier targetIdentifier,
	6 : optional Reference targetReference,
}

struct Composition_Section
{
	1 : optional CodeableConcept code,
	2 : optional CodeableConcept emptyReason,
	3 : optional list<Reference> entry,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional ListMode mode,
	7 : optional list<binary> modifierExtension,
	8 : optional CodeableConcept orderedBy,
	9 : optional list<binary> section,
	10 : optional Narrative text,
	11 : optional string title,
}

struct ConceptMap
{
	1 : optional list<ContactDetail> contact,
	2 : optional list<ResourceContainer> contained,
	3 : optional markdown copyright,
	4 : optional i64 _date,
	5 : optional markdown description,
	6 : optional bool experimental,
	7 : optional list<binary> extension,
	8 : optional list<ConceptMap_Group> group,
	9 : optional id _id,
	10 : optional Identifier identifier,
	11 : optional uri implicitRules,
	12 : optional list<CodeableConcept> jurisdiction,
	13 : optional code language,
	14 : optional Meta meta,
	15 : optional list<binary> modifierExtension,
	16 : optional string name,
	17 : optional string publisher,
	18 : optional markdown purpose,
	19 : optional Reference sourceReference,
	20 : optional uri sourceUri,
	21 : required PublicationStatus status,
	22 : optional Reference targetReference,
	23 : optional uri targetUri,
	24 : optional Narrative text,
	25 : optional string title,
	26 : optional uri url,
	27 : optional list<UsageContext> useContext,
	28 : optional string version,
}

struct Condition
{
	1 : optional Age abatementAge,
	2 : optional bool abatementBoolean,
	3 : optional i64 abatementDateTime,
	4 : optional Period abatementPeriod,
	5 : optional Range abatementRange,
	6 : optional string abatementString,
	7 : optional i64 assertedDate,
	8 : optional Reference asserter,
	9 : optional list<CodeableConcept> bodySite,
	10 : optional list<CodeableConcept> category,
	11 : optional ConditionClinicalStatusCodes clinicalStatus,
	12 : optional CodeableConcept code,
	13 : optional list<ResourceContainer> contained,
	14 : optional Reference context,
	15 : optional list<Condition_Evidence> evidence,
	16 : optional list<binary> extension,
	17 : optional id _id,
	18 : optional list<Identifier> identifier,
	19 : optional uri implicitRules,
	20 : optional code language,
	21 : optional Meta meta,
	22 : optional list<binary> modifierExtension,
	23 : optional list<Annotation> note,
	24 : optional Age onsetAge,
	25 : optional i64 onsetDateTime,
	26 : optional Period onsetPeriod,
	27 : optional Range onsetRange,
	28 : optional string onsetString,
	29 : optional CodeableConcept severity,
	30 : optional Condition_Stage stage,
	31 : required Reference subject,
	32 : optional Narrative text,
	33 : optional ConditionVerificationStatus verificationStatus,
}

struct Condition_Evidence
{
	1 : optional list<CodeableConcept> code,
	2 : optional list<Reference> detail,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct Condition_Stage
{
	1 : optional list<Reference> assessment,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional CodeableConcept summary,
}

struct Consent
{
	1 : optional list<CodeableConcept> action,
	2 : optional list<Consent_Actor> actor,
	3 : optional list<CodeableConcept> category,
	4 : optional list<Reference> consentingParty,
	5 : optional list<ResourceContainer> contained,
	6 : optional list<Consent_Data> data,
	7 : optional Period dataPeriod,
	8 : optional i64 _dateTime,
	9 : optional list<Consent_Except> except,
	10 : optional list<binary> extension,
	11 : optional id _id,
	12 : optional Identifier identifier,
	13 : optional uri implicitRules,
	14 : optional code language,
	15 : optional Meta meta,
	16 : optional list<binary> modifierExtension,
	17 : optional list<Reference> organization,
	18 : required Reference patient,
	19 : optional Period period,
	20 : optional list<Consent_Policy> policy,
	21 : optional uri policyRule,
	22 : optional list<Coding> purpose,
	23 : optional list<Coding> securityLabel,
	24 : optional Attachment sourceAttachment,
	25 : optional Identifier sourceIdentifier,
	26 : optional Reference sourceReference,
	27 : required ConsentState status,
	28 : optional Narrative text,
}

struct Consent_Actor
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required Reference reference,
	5 : required CodeableConcept role,
}

struct Consent_Actor1
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required Reference reference,
	5 : required CodeableConcept role,
}

struct Consent_Data
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required ConsentDataMeaning meaning,
	4 : optional list<binary> modifierExtension,
	5 : required Reference reference,
}

struct Consent_Data1
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required ConsentDataMeaning meaning,
	4 : optional list<binary> modifierExtension,
	5 : required Reference reference,
}

struct Consent_Except
{
	1 : optional list<CodeableConcept> action,
	2 : optional list<Consent_Actor1> actor,
	3 : optional list<Coding> _class,
	4 : optional list<Coding> code,
	5 : optional list<Consent_Data1> data,
	6 : optional Period dataPeriod,
	7 : optional list<binary> extension,
	8 : optional string id,
	9 : optional list<binary> modifierExtension,
	10 : optional Period period,
	11 : optional list<Coding> purpose,
	12 : optional list<Coding> securityLabel,
	13 : required ConsentExceptType type,
}

struct Contract
{
	1 : optional list<CodeableConcept> action,
	2 : optional list<CodeableConcept> actionReason,
	3 : optional list<Contract_Agent> agent,
	4 : optional Period applies,
	5 : optional list<Reference> authority,
	6 : optional Attachment bindingAttachment,
	7 : optional Reference bindingReference,
	8 : optional list<ResourceContainer> contained,
	9 : optional CodeableConcept contentDerivative,
	10 : optional CodeableConcept decisionType,
	11 : optional list<Reference> domain,
	12 : optional list<binary> extension,
	13 : optional list<Contract_Friendly> friendly,
	14 : optional id _id,
	15 : optional Identifier identifier,
	16 : optional uri implicitRules,
	17 : optional i64 issued,
	18 : optional code language,
	19 : optional list<Contract_Legal> legal,
	20 : optional Meta meta,
	21 : optional list<binary> modifierExtension,
	22 : optional list<Contract_Rule> rule,
	23 : optional list<Coding> securityLabel,
	24 : optional list<Contract_Signer> signer,
	25 : optional ContractResourceStatusCodes status,
	26 : optional list<CodeableConcept> subType,
	27 : optional list<Reference> subject,
	28 : optional list<Contract_Term> term,
	29 : optional Narrative text,
	30 : optional list<Reference> topic,
	31 : optional CodeableConcept type,
	32 : optional list<Contract_ValuedItem> valuedItem,
}

struct Contract_Agent
{
	1 : required Reference actor,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional list<CodeableConcept> role,
}

struct Contract_Agent1
{
	1 : required Reference actor,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional list<CodeableConcept> role,
}

struct Contract_Friendly
{
	1 : optional Attachment contentAttachment,
	2 : optional Reference contentReference,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct Contract_Legal
{
	1 : optional Attachment contentAttachment,
	2 : optional Reference contentReference,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct Contract_Rule
{
	1 : optional Attachment contentAttachment,
	2 : optional Reference contentReference,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct Contract_Signer
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required Reference party,
	5 : required list<Signature> signature,
	6 : required Coding type,
}

struct Contract_Term
{
	1 : optional list<CodeableConcept> action,
	2 : optional list<CodeableConcept> actionReason,
	3 : optional list<Contract_Agent1> agent,
	4 : optional Period applies,
	5 : optional list<binary> extension,
	6 : optional list<binary> group,
	7 : optional string id,
	8 : optional Identifier identifier,
	9 : optional i64 issued,
	10 : optional list<binary> modifierExtension,
	11 : optional list<Coding> securityLabel,
	12 : optional CodeableConcept subType,
	13 : optional string text,
	14 : optional list<Reference> topic,
	15 : optional CodeableConcept type,
	16 : optional list<Contract_ValuedItem1> valuedItem,
}

struct Contract_ValuedItem
{
	1 : optional i64 effectiveTime,
	2 : optional CodeableConcept entityCodeableConcept,
	3 : optional Reference entityReference,
	4 : optional list<binary> extension,
	5 : optional double factor,
	6 : optional string id,
	7 : optional Identifier identifier,
	8 : optional list<binary> modifierExtension,
	9 : optional Money net,
	10 : optional double points,
	11 : optional Quantity quantity,
	12 : optional Money unitPrice,
}

struct Contract_ValuedItem1
{
	1 : optional i64 effectiveTime,
	2 : optional CodeableConcept entityCodeableConcept,
	3 : optional Reference entityReference,
	4 : optional list<binary> extension,
	5 : optional double factor,
	6 : optional string id,
	7 : optional Identifier identifier,
	8 : optional list<binary> modifierExtension,
	9 : optional Money net,
	10 : optional double points,
	11 : optional Quantity quantity,
	12 : optional Money unitPrice,
}

struct Coverage
{
	1 : optional Reference beneficiary,
	2 : optional list<ResourceContainer> contained,
	3 : optional list<Reference> contract,
	4 : optional string dependent,
	5 : optional list<binary> extension,
	6 : optional Coverage_Grouping grouping,
	7 : optional id _id,
	8 : optional list<Identifier> identifier,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : optional string network,
	14 : optional positiveInt order,
	15 : optional list<Reference> payor,
	16 : optional Period period,
	17 : optional Reference policyHolder,
	18 : optional CodeableConcept relationship,
	19 : optional string sequence,
	20 : optional FinancialResourceStatusCodes status,
	21 : optional Reference subscriber,
	22 : optional string subscriberId,
	23 : optional Narrative text,
	24 : optional CodeableConcept type,
}

struct DataElement
{
	1 : optional list<ContactDetail> contact,
	2 : optional list<ResourceContainer> contained,
	3 : optional markdown copyright,
	4 : optional i64 _date,
	5 : required list<ElementDefinition> element,
	6 : optional bool experimental,
	7 : optional list<binary> extension,
	8 : optional id _id,
	9 : optional list<Identifier> identifier,
	10 : optional uri implicitRules,
	11 : optional list<CodeableConcept> jurisdiction,
	12 : optional code language,
	13 : optional list<DataElement_Mapping> mapping,
	14 : optional Meta meta,
	15 : optional list<binary> modifierExtension,
	16 : optional string name,
	17 : optional string publisher,
	18 : required PublicationStatus status,
	19 : optional DataElementStringency stringency,
	20 : optional Narrative text,
	21 : optional string title,
	22 : optional uri url,
	23 : optional list<UsageContext> useContext,
	24 : optional string version,
}

struct DataRequirement
{
	1 : optional list<DataRequirement_CodeFilter> codeFilter,
	2 : optional list<DataRequirement_DateFilter> dateFilter,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<string> mustSupport,
	6 : optional list<uri> profile,
	7 : required code type,
}

struct DataRequirement_CodeFilter
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required string path,
	4 : optional list<code> valueCode,
	5 : optional list<CodeableConcept> valueCodeableConcept,
	6 : optional list<Coding> valueCoding,
	7 : optional Reference valueSetReference,
	8 : optional string valueSetString,
}

struct DetectedIssue
{
	1 : optional Reference author,
	2 : optional CodeableConcept category,
	3 : optional list<ResourceContainer> contained,
	4 : optional i64 _date,
	5 : optional string detail,
	6 : optional list<binary> extension,
	7 : optional id _id,
	8 : optional Identifier identifier,
	9 : optional list<Reference> implicated,
	10 : optional uri implicitRules,
	11 : optional code language,
	12 : optional Meta meta,
	13 : optional list<DetectedIssue_Mitigation> mitigation,
	14 : optional list<binary> modifierExtension,
	15 : optional Reference patient,
	16 : optional uri reference,
	17 : optional DetectedIssueSeverity severity,
	18 : required ObservationStatus status,
	19 : optional Narrative text,
}

struct DetectedIssue_Mitigation
{
	1 : required CodeableConcept action,
	2 : optional Reference author,
	3 : optional i64 _date,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
}

struct Device
{
	1 : optional list<ContactPoint> contact,
	2 : optional list<ResourceContainer> contained,
	3 : optional i64 expirationDate,
	4 : optional list<binary> extension,
	5 : optional id _id,
	6 : optional list<Identifier> identifier,
	7 : optional uri implicitRules,
	8 : optional code language,
	9 : optional Reference location,
	10 : optional string lotNumber,
	11 : optional i64 manufactureDate,
	12 : optional string manufacturer,
	13 : optional Meta meta,
	14 : optional string model,
	15 : optional list<binary> modifierExtension,
	16 : optional list<Annotation> note,
	17 : optional Reference owner,
	18 : optional Reference patient,
	19 : optional list<CodeableConcept> safety,
	20 : optional FHIRDeviceStatus status,
	21 : optional Narrative text,
	22 : optional CodeableConcept type,
	23 : optional Device_Udi udi,
	24 : optional uri url,
	25 : optional string version,
}

struct DeviceComponent
{
	1 : optional list<ResourceContainer> contained,
	2 : optional list<binary> extension,
	3 : optional id _id,
	4 : required Identifier identifier,
	5 : optional uri implicitRules,
	6 : optional code language,
	7 : optional CodeableConcept languageCode,
	8 : optional instant lastSystemChange,
	9 : optional MeasmntPrinciple measurementPrinciple,
	10 : optional Meta meta,
	11 : optional list<binary> modifierExtension,
	12 : optional list<CodeableConcept> operationalStatus,
	13 : optional CodeableConcept parameterGroup,
	14 : optional Reference parent,
	15 : optional list<DeviceComponent_ProductionSpecification> productionSpecification,
	16 : optional Reference source,
	17 : optional Narrative text,
	18 : required CodeableConcept type,
}

struct DeviceComponent_ProductionSpecification
{
	1 : optional Identifier componentId,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional string productionSpec,
	6 : optional CodeableConcept specType,
}

struct DeviceMetric
{
	1 : optional list<DeviceMetric_Calibration> calibration,
	2 : required DeviceMetricCategory category,
	3 : optional DeviceMetricColor color,
	4 : optional list<ResourceContainer> contained,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : required Identifier identifier,
	8 : optional uri implicitRules,
	9 : optional code language,
	10 : optional Timing measurementPeriod,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : optional DeviceMetricOperationalStatus operationalStatus,
	14 : optional Reference parent,
	15 : optional Reference source,
	16 : optional Narrative text,
	17 : required CodeableConcept type,
	18 : optional CodeableConcept unit,
}

struct DeviceRequest
{
	1 : optional i64 authoredOn,
	2 : optional list<Reference> basedOn,
	3 : optional CodeableConcept codeCodeableConcept,
	4 : optional Reference codeReference,
	5 : optional list<ResourceContainer> contained,
	6 : optional Reference context,
	7 : optional list<Reference> definition,
	8 : optional list<binary> extension,
	9 : optional Identifier groupIdentifier,
	10 : optional id _id,
	11 : optional list<Identifier> identifier,
	12 : optional uri implicitRules,
	13 : required CodeableConcept intent,
	14 : optional code language,
	15 : optional Meta meta,
	16 : optional list<binary> modifierExtension,
	17 : optional list<Annotation> note,
	18 : optional i64 occurrenceDateTime,
	19 : optional Period occurrencePeriod,
	20 : optional Timing occurrenceTiming,
	21 : optional Reference performer,
	22 : optional CodeableConcept performerType,
	23 : optional list<Reference> priorRequest,
	24 : optional RequestPriority priority,
	25 : optional list<CodeableConcept> reasonCode,
	26 : optional list<Reference> reasonReference,
	27 : optional list<Reference> relevantHistory,
	28 : optional DeviceRequest_Requester requester,
	29 : optional RequestStatus status,
	30 : required Reference subject,
	31 : optional list<Reference> supportingInfo,
	32 : optional Narrative text,
}

struct DeviceRequest_Requester
{
	1 : required Reference agent,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Reference onBehalfOf,
}

struct DeviceUseStatement
{
	1 : optional CodeableConcept bodySite,
	2 : optional list<ResourceContainer> contained,
	3 : required Reference device,
	4 : optional list<binary> extension,
	5 : optional id _id,
	6 : optional list<Identifier> identifier,
	7 : optional uri implicitRules,
	8 : optional list<CodeableConcept> indication,
	9 : optional code language,
	10 : optional Meta meta,
	11 : optional list<binary> modifierExtension,
	12 : optional list<Annotation> note,
	13 : optional i64 recordedOn,
	14 : optional Reference source,
	15 : required DeviceUseStatementStatus status,
	16 : required Reference subject,
	17 : optional Narrative text,
	18 : optional i64 timingDateTime,
	19 : optional Period timingPeriod,
	20 : optional Timing timingTiming,
	21 : optional Period whenUsed,
}

struct DiagnosticReport
{
	1 : optional list<Reference> basedOn,
	2 : optional CodeableConcept category,
	3 : required CodeableConcept code,
	4 : optional list<CodeableConcept> codedDiagnosis,
	5 : optional string conclusion,
	6 : optional list<ResourceContainer> contained,
	7 : optional Reference context,
	8 : optional i64 effectiveDateTime,
	9 : optional Period effectivePeriod,
	10 : optional list<binary> extension,
	11 : optional id _id,
	12 : optional list<Identifier> identifier,
	13 : optional list<DiagnosticReport_Image> image,
	14 : optional list<Reference> imagingStudy,
	15 : optional uri implicitRules,
	16 : optional instant issued,
	17 : optional code language,
	18 : optional Meta meta,
	19 : optional list<binary> modifierExtension,
	20 : optional list<DiagnosticReport_Performer> performer,
	21 : optional list<Attachment> presentedForm,
	22 : optional list<Reference> result,
	23 : optional list<Reference> specimen,
	24 : required DiagnosticReportStatus status,
	25 : optional Reference subject,
	26 : optional Narrative text,
}

struct DiagnosticReport_Image
{
	1 : optional string comment,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required Reference link,
	5 : optional list<binary> modifierExtension,
}

struct DiagnosticReport_Performer
{
	1 : required Reference actor,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional CodeableConcept role,
}

struct DocumentManifest
{
	1 : optional list<Reference> author,
	2 : optional list<ResourceContainer> contained,
	3 : required list<DocumentManifest_Content> content,
	4 : optional i64 created,
	5 : optional string description,
	6 : optional list<binary> extension,
	7 : optional id _id,
	8 : optional list<Identifier> identifier,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional Identifier masterIdentifier,
	12 : optional Meta meta,
	13 : optional list<binary> modifierExtension,
	14 : optional list<Reference> recipient,
	15 : optional list<DocumentManifest_Related> related,
	16 : optional uri source,
	17 : required DocumentReferenceStatus status,
	18 : optional Reference subject,
	19 : optional Narrative text,
	20 : optional CodeableConcept type,
}

struct DocumentManifest_Content
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional Attachment pAttachment,
	5 : optional Reference pReference,
}

struct DocumentManifest_Related
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional Identifier identifier,
	4 : optional list<binary> modifierExtension,
	5 : optional Reference ref,
}

struct DocumentReference
{
	1 : optional Reference authenticator,
	2 : optional list<Reference> author,
	3 : optional CodeableConcept _class,
	4 : optional list<ResourceContainer> contained,
	5 : required list<DocumentReference_Content> content,
	6 : optional DocumentReference_Context context,
	7 : optional i64 created,
	8 : optional Reference custodian,
	9 : optional string description,
	10 : optional CompositionStatus docStatus,
	11 : optional list<binary> extension,
	12 : optional id _id,
	13 : optional list<Identifier> identifier,
	14 : optional uri implicitRules,
	15 : required instant indexed,
	16 : optional code language,
	17 : optional Identifier masterIdentifier,
	18 : optional Meta meta,
	19 : optional list<binary> modifierExtension,
	20 : optional list<DocumentReference_RelatesTo> relatesTo,
	21 : optional list<CodeableConcept> securityLabel,
	22 : required DocumentReferenceStatus status,
	23 : optional Reference subject,
	24 : optional Narrative text,
	25 : required CodeableConcept type,
}

struct DocumentReference_Context
{
	1 : optional Reference encounter,
	2 : optional list<CodeableConcept> event,
	3 : optional list<binary> extension,
	4 : optional CodeableConcept facilityType,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
	7 : optional Period period,
	8 : optional CodeableConcept practiceSetting,
	9 : optional list<DocumentReference_Related> related,
	10 : optional Reference sourcePatientInfo,
}

struct DocumentReference_Related
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional Identifier identifier,
	4 : optional list<binary> modifierExtension,
	5 : optional Reference ref,
}

struct DocumentReference_RelatesTo
{
	1 : required DocumentRelationshipType code,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required Reference target,
}

struct DomainResource
{
	1 : optional Age abatementAge,
	2 : optional bool abatementBoolean,
	3 : optional i64 abatementDateTime,
	4 : optional Period abatementPeriod,
	5 : optional Range abatementRange,
	6 : optional string abatementString,
	7 : optional bool _abstract,
	8 : optional UnknownContentCode acceptUnknown,
	9 : optional Identifier accession,
	10 : optional Identifier accessionIdentifier,
	11 : optional Claim_Accident accident,
	12 : optional list<Reference> account,
	13 : optional AuditEventAction action,
	14 : optional list<CodeableConcept> actionReason,
	15 : optional Period active,
	16 : optional bool activeOnly,
	17 : optional list<CarePlan_Activity> activity,
	18 : optional Reference actor,
	19 : optional bool actual,
	20 : optional string actualArm,
	21 : optional list<ClaimResponse_AddItem> addItem,
	22 : optional uri address,
	23 : optional list<Reference> addresses,
	24 : optional Age ageAge,
	25 : optional Range ageRange,
	26 : optional string ageString,
	27 : optional list<AuditEvent_Agent> agent,
	28 : optional list<string> alias,
	29 : optional list<Reference> allergyIntolerance,
	30 : optional list<MessageDefinition_AllowedResponse> allowedResponse,
	31 : optional Patient_Animal animal,
	32 : optional Period applies,
	33 : optional Reference appointment,
	34 : optional bool appointmentRequired,
	35 : optional CodeableConcept appointmentType,
	36 : optional i32 approvalDate,
	37 : optional list<ResearchStudy_Arm> arm,
	38 : optional bool asNeededBoolean,
	39 : optional CodeableConcept asNeededCodeableConcept,
	40 : optional i64 assertedDate,
	41 : optional Reference asserter,
	42 : optional Reference assessor,
	43 : optional string assignedArm,
	44 : optional list<Composition_Attester> attester,
	45 : optional Reference authenticator,
	46 : optional Reference author,
	47 : optional i64 authored,
	48 : optional i64 authoredOn,
	49 : optional i64 authoringTime,
	50 : optional list<Reference> authority,
	51 : optional list<Reference> authorizingPrescription,
	52 : optional InstanceAvailability availability,
	53 : optional string availabilityExceptions,
	54 : optional list<HealthcareService_AvailableTime> availableTime,
	55 : optional Money balance,
	56 : optional Reference base,
	57 : optional uri baseDefinition,
	58 : optional list<Reference> basedOn,
	59 : optional list<Reference> basis,
	60 : optional Reference beneficiary,
	61 : optional list<ExplanationOfBenefit_BenefitBalance> benefitBalance,
	62 : optional CodeableConcept benefitCategory,
	63 : optional CodeableConcept benefitSubCategory,
	64 : optional Period billablePeriod,
	65 : optional list<uri> _binary,
	66 : optional Attachment bindingAttachment,
	67 : optional Reference bindingReference,
	68 : optional i32 birthDate,
	69 : optional list<CodeableConcept> bodySite,
	70 : optional list<CodeableConcept> bodysite,
	71 : optional i32 bornDate,
	72 : optional Period bornPeriod,
	73 : optional string bornString,
	74 : optional string businessArrangement,
	75 : optional CodeableConcept businessStatus,
	76 : optional list<DeviceMetric_Calibration> calibration,
	77 : optional Reference careManager,
	78 : optional list<Reference> careTeam,
	79 : optional bool caseSensitive,
	80 : optional AdverseEventCategory category,
	81 : optional list<string> chain,
	82 : optional Subscription_Channel channel,
	83 : optional list<Group_Characteristic> characteristic,
	84 : optional Reference claim,
	85 : optional Reference claimResponse,
	86 : optional CodeableConcept _class,
	87 : optional list<Encounter_ClassHistory> classHistory,
	88 : optional markdown clinicalRecommendationStatement,
	89 : optional AllergyIntoleranceClinicalStatus clinicalStatus,
	90 : optional CodeableConcept code,
	91 : optional CodeableConcept codeCodeableConcept,
	92 : optional Reference codeReference,
	93 : optional list<CodeableConcept> codedDiagnosis,
	94 : optional Specimen_Collection collection,
	95 : optional DeviceMetricColor color,
	96 : optional string comment,
	97 : optional list<Patient_Communication> communication,
	98 : optional list<Reference> communicationRequest,
	99 : optional list<SearchComparator> comparator,
	100 : optional list<CodeableConcept> complication,
	101 : optional list<Reference> complicationDetail,
	102 : optional list<Observation_Component> component,
	103 : optional ValueSet_Compose compose,
	104 : optional CodeableConcept compositeScoring,
	105 : optional bool compositional,
	106 : optional list<CodeSystem_Concept> concept,
	107 : optional string conclusion,
	108 : optional list<FamilyMemberHistory_Condition> condition,
	109 : optional ConfidentialityClassification confidentiality,
	110 : optional Coding connectionType,
	111 : optional Reference consent,
	112 : optional list<Reference> consentingParty,
	113 : optional list<ContactDetail> contact,
	114 : optional list<ResourceContainer> contained,
	115 : optional list<Specimen_Container> container,
	116 : optional CodeSystemContentMode content,
	117 : optional CodeableConcept contentDerivative,
	118 : optional Reference context,
	119 : optional list<string> contextInvariant,
	120 : optional ExtensionContext contextType,
	121 : optional list<Reference> contract,
	122 : optional list<Contributor> contributor,
	123 : optional i64 coordinateSystem,
	124 : optional markdown copyright,
	125 : optional int32 count,
	126 : optional list<Account_Coverage> coverage,
	127 : optional list<Reference> coverageArea,
	128 : optional i64 created,
	129 : optional string criteria,
	130 : optional AllergyIntoleranceCriticality criticality,
	131 : optional Reference custodian,
	132 : optional list<Consent_Data> data,
	133 : optional CodeableConcept dataAbsentReason,
	134 : optional Period dataPeriod,
	135 : optional list<DataRequirement> dataRequirement,
	136 : optional i64 _date,
	137 : optional i64 dateAsserted,
	138 : optional i64 _dateTime,
	139 : optional i64 dateWritten,
	140 : optional Quantity daysSupply,
	141 : optional Age deceasedAge,
	142 : optional bool deceasedBoolean,
	143 : optional i32 deceasedDate,
	144 : optional i64 deceasedDateTime,
	145 : optional Range deceasedRange,
	146 : optional string deceasedString,
	147 : optional CodeableConcept decisionType,
	148 : optional list<Reference> definition,
	149 : optional Reference definitionReference,
	150 : optional uri definitionUri,
	151 : optional Reference deliverFrom,
	152 : optional Reference deliverTo,
	153 : optional list<ImplementationGuide_Dependency> dependency,
	154 : optional string dependent,
	155 : optional TypeDerivationRule derivation,
	156 : optional list<Reference> derivedFrom,
	157 : optional string description,
	158 : optional ExpansionProfile_Designation designation,
	159 : optional Reference destination,
	160 : optional string detail,
	161 : optional list<Reference> detectedIssue,
	162 : optional Reference device,
	163 : optional list<Claim_Diagnosis> diagnosis,
	164 : optional StructureDefinition_Differential differential,
	165 : optional markdown disclaimer,
	166 : optional list<VisionPrescription_Dispense> dispense,
	167 : optional MedicationRequest_DispenseRequest dispenseRequest,
	168 : optional code displayLanguage,
	169 : optional string disposition,
	170 : optional bool doNotPerform,
	171 : optional CompositionStatus docStatus,
	172 : optional list<CapabilityStatement_Document> document,
	173 : optional list<Reference> domain,
	174 : optional list<Dosage> dosage,
	175 : optional list<Dosage> dosageInstruction,
	176 : optional Quantity doseQuantity,
	177 : optional int32 duration,
	178 : optional list<ActivityDefinition_DynamicValue> dynamicValue,
	179 : optional i64 effectiveDateTime,
	180 : optional Period effectivePeriod,
	181 : optional list<ElementDefinition> element,
	182 : optional CodeableConcept eligibility,
	183 : optional string eligibilityNote,
	184 : optional Period employmentImpacted,
	185 : optional CodeableConcept emptyReason,
	186 : optional Reference encounter,
	187 : optional instant end,
	188 : optional list<Reference> endpoint,
	189 : optional list<Reference> enrollment,
	190 : optional NutritionOrder_EnteralFormula enteralFormula,
	191 : optional i64 enteredDate,
	192 : optional Reference enterer,
	193 : optional list<AuditEvent_Entity> entity,
	194 : optional list<List_Entry> entry,
	195 : optional list<Reference> episodeOfCare,
	196 : optional list<ClaimResponse_Error> error,
	197 : optional bool estimatedAge,
	198 : optional Reference evaluatedResources,
	199 : optional list<Reference> evaluationMessage,
	200 : optional list<Composition_Event> event,
	201 : optional list<Reference> eventHistory,
	202 : optional Reference eventParticipant,
	203 : optional list<Condition_Evidence> evidence,
	204 : optional list<Consent_Except> except,
	205 : optional list<string> exclude,
	206 : optional list<CodeableConcept> excludeFoodModifier,
	207 : optional bool excludeNested,
	208 : optional bool excludeNotForUI,
	209 : optional bool excludePostCoordinated,
	210 : optional ExpansionProfile_ExcludedSystem excludedSystem,
	211 : optional Period executionPeriod,
	212 : optional ValueSet_Expansion expansion,
	213 : optional bool experimental,
	214 : optional i64 expirationDate,
	215 : optional Immunization_Explanation explanation,
	216 : optional Reference expressedBy,
	217 : optional string expression,
	218 : optional bool extensible,
	219 : optional list<binary> extension,
	220 : optional string extraDetails,
	221 : optional Reference facility,
	222 : optional double factorOverride,
	223 : optional id fhirVersion,
	224 : optional list<CodeSystem_Filter> filter,
	225 : optional list<ClinicalImpression_Finding> finding,
	226 : optional list<ExpansionProfile_FixedVersion> fixedVersion,
	227 : optional list<TestScript_Fixture> fixture,
	228 : optional list<Procedure_FocalDevice> focalDevice,
	229 : optional list<MessageDefinition_Focus> focus,
	230 : optional list<CodeableConcept> followUp,
	231 : optional list<CodeableConcept> foodPreferenceModifier,
	232 : optional Reference for,
	233 : optional CodeableConcept form,
	234 : optional list<code> format,
	235 : optional positiveInt frames,
	236 : optional list<Contract_Friendly> friendly,
	237 : optional CodeableConcept fundsReserve,
	238 : optional AdministrativeGender gender,
	239 : optional list<Reference> generalPractitioner,
	240 : optional list<ImplementationGuide_Global> global,
	241 : optional list<Reference> goal,
	242 : optional list<ConceptMap_Group> group,
	243 : optional Identifier groupIdentifier,
	244 : optional Coverage_Grouping grouping,
	245 : optional list<Account_Guarantor> guarantor,
	246 : optional markdown guidance,
	247 : optional list<string> header,
	248 : optional list<Reference> healthcareService,
	249 : optional positiveInt height,
	250 : optional CodeSystemHierarchyMeaning hierarchyMeaning,
	251 : optional Period hospitalization,
	252 : optional id _id,
	253 : optional bool idempotent,
	254 : optional list<Identifier> identifier,
	255 : optional list<Attachment> image,
	256 : optional list<Reference> imagingStudy,
	257 : optional bool immutable,
	258 : optional CapabilityStatement_Implementation implementation,
	259 : optional list<uri> implementationGuide,
	260 : optional list<Reference> implicated,
	261 : optional uri implicitRules,
	262 : optional list<uri> import,
	263 : optional string improvementNotation,
	264 : optional list<string> include,
	265 : optional bool includeDefinition,
	266 : optional bool includeDesignations,
	267 : optional list<Reference> incomingReferral,
	268 : optional instant indexed,
	269 : optional list<Reference> indication,
	270 : optional Reference individual,
	271 : optional bool inforce,
	272 : optional list<Claim_Information> information,
	273 : optional Reference informationSource,
	274 : optional list<Medication_Ingredient> ingredient,
	275 : optional list<Task_Input> input,
	276 : optional bool instance,
	277 : optional list<uri> instantiates,
	278 : optional list<Claim_Insurance> insurance,
	279 : optional Reference insurer,
	280 : optional CarePlanIntent intent,
	281 : optional CodeableConcept interpretation,
	282 : optional list<Reference> interpreter,
	283 : optional list<ClinicalImpression_Investigation> investigation,
	284 : optional bool isBrand,
	285 : optional bool isOverTheCounter,
	286 : optional list<OperationOutcome_Issue> issue,
	287 : optional i64 issued,
	288 : optional list<Claim_Item> item,
	289 : optional list<CodeableConcept> jurisdiction,
	290 : optional list<CodeableConcept> keyword,
	291 : optional ResourceType kind,
	292 : optional code language,
	293 : optional CodeableConcept languageCode,
	294 : optional i64 lastModified,
	295 : optional i64 lastOccurrence,
	296 : optional i32 lastReviewDate,
	297 : optional instant lastSystemChange,
	298 : optional list<Contract_Legal> legal,
	299 : optional Duration length,
	300 : optional list<Reference> library,
	301 : optional bool limitedExpansion,
	302 : optional list<GraphDefinition_Link> link,
	303 : optional Reference location,
	304 : optional string lotNumber,
	305 : optional list<Reference> managingOrganization,
	306 : optional i64 manufactureDate,
	307 : optional string manufacturer,
	308 : optional list<DataElement_Mapping> mapping,
	309 : optional CodeableConcept maritalStatus,
	310 : optional Identifier masterIdentifier,
	311 : optional Reference measure,
	312 : optional Timing measurementPeriod,
	313 : optional MeasmntPrinciple measurementPrinciple,
	314 : optional CodeableConcept medicationCodeableConcept,
	315 : optional Reference medicationReference,
	316 : optional list<CodeableConcept> medium,
	317 : optional list<Group_Member> member,
	318 : optional list<CapabilityStatement_Messaging> messaging,
	319 : optional Meta meta,
	320 : optional TestScript_Metadata metadata,
	321 : optional CodeableConcept method,
	322 : optional positiveInt minutesDuration,
	323 : optional list<DetectedIssue_Mitigation> mitigation,
	324 : optional list<Coding> modalityList,
	325 : optional ListMode mode,
	326 : optional string model,
	327 : optional list<SearchModifierCode> modifier,
	328 : optional list<binary> modifierExtension,
	329 : optional Reference module,
	330 : optional bool multipleBirthBoolean,
	331 : optional i64 multipleBirthInteger,
	332 : optional string name,
	333 : optional string network,
	334 : optional list<HealthcareService_NotAvailable> notAvailable,
	335 : optional bool notDone,
	336 : optional CodeableConcept notDoneReason,
	337 : optional CodeableConcept notDoneReasonCodeableConcept,
	338 : optional Reference notDoneReasonReference,
	339 : optional bool notGiven,
	340 : optional list<Annotation> note,
	341 : optional bool nullify,
	342 : optional int32 numberOfInstances,
	343 : optional int32 numberOfSeries,
	344 : optional string observedSeq,
	345 : optional i64 occurrenceDateTime,
	346 : optional Period occurrencePeriod,
	347 : optional Timing occurrenceTiming,
	348 : optional Age onsetAge,
	349 : optional i64 onsetDateTime,
	350 : optional Period onsetPeriod,
	351 : optional Range onsetRange,
	352 : optional string onsetString,
	353 : optional Reference operationDefinition,
	354 : optional list<CodeableConcept> operationalStatus,
	355 : optional Reference operator,
	356 : optional NutritionOrder_OralDiet oralDiet,
	357 : optional positiveInt order,
	358 : optional CodeableConcept orderedBy,
	359 : optional SupplyRequest_OrderedItem orderedItem,
	360 : optional Reference orderer,
	361 : optional Reference organization,
	362 : optional list<TestScript_Origin> origin,
	363 : optional Reference originalPrescription,
	364 : optional CodeableConcept outcome,
	365 : optional list<CodeableConcept> outcomeCode,
	366 : optional string outcomeDesc,
	367 : optional list<Reference> outcomeReference,
	368 : optional list<Task_Output> output,
	369 : optional Reference outputParameters,
	370 : optional bool overbooked,
	371 : optional list<OperationDefinition_Overload> overload,
	372 : optional string overrideReason,
	373 : optional Reference owner,
	374 : optional list<ImplementationGuide_Package> package,
	375 : optional ImplementationGuide_Page page,
	376 : optional list<ParameterDefinition> parameter,
	377 : optional CodeableConcept parameterGroup,
	378 : optional Reference parent,
	379 : optional list<Reference> partOf,
	380 : optional list<ActivityDefinition_Participant> participant,
	381 : optional ParticipationStatus participantStatus,
	382 : optional list<CodeableConcept> participantType,
	383 : optional list<code> patchFormat,
	384 : optional Reference patient,
	385 : optional Claim_Payee payee,
	386 : optional CodeableConcept payeeType,
	387 : optional list<Communication_Payload> payload,
	388 : optional list<code> payloadMimeType,
	389 : optional list<CodeableConcept> payloadType,
	390 : optional ClaimResponse_Payment payment,
	391 : optional CodeableConcept paymentStatus,
	392 : optional list<Reference> payor,
	393 : optional i64 performedDateTime,
	394 : optional Period performedPeriod,
	395 : optional Reference performer,
	396 : optional CodeableConcept performerType,
	397 : optional Reference performingOrganization,
	398 : optional Period period,
	399 : optional Attachment photo,
	400 : optional CodeableConcept physicalType,
	401 : optional Period planningHorizon,
	402 : optional list<Reference> pointer,
	403 : optional list<Consent_Policy> policy,
	404 : optional Reference policyHolder,
	405 : optional uri policyRule,
	406 : optional Location_Position position,
	407 : optional list<Immunization_Practitioner> practitioner,
	408 : optional positiveInt precedence,
	409 : optional list<RiskAssessment_Prediction> prediction,
	410 : optional Reference prescriber,
	411 : optional Reference prescription,
	412 : optional list<Attachment> presentedForm,
	413 : optional Reference previous,
	414 : optional Money priceOverride,
	415 : optional bool primarySource,
	416 : optional Reference principalInvestigator,
	417 : optional Reference priorPrescription,
	418 : optional list<Reference> priorRequest,
	419 : optional int32 priority,
	420 : optional list<Reference> problem,
	421 : optional list<Claim_Procedure> procedure,
	422 : optional list<CodeableConcept> procedureCode,
	423 : optional list<Reference> procedureReference,
	424 : optional list<ClaimResponse_ProcessNote> processNote,
	425 : optional list<Specimen_Processing> processing,
	426 : optional CodeableConcept productCodeableConcept,
	427 : optional Reference productReference,
	428 : optional list<DeviceComponent_ProductionSpecification> productionSpecification,
	429 : optional list<Reference> profile,
	430 : optional list<CodeableConcept> prognosisCodeableConcept,
	431 : optional list<Reference> prognosisReference,
	432 : optional list<string> programName,
	433 : optional list<CodeSystem_Property> property,
	434 : optional list<uri> protocol,
	435 : optional Reference providedBy,
	436 : optional Reference provider,
	437 : optional string publisher,
	438 : optional markdown purpose,
	439 : optional list<CodeableConcept> purposeOfEvent,
	440 : optional list<Practitioner_Qualification> qualification,
	441 : optional list<CodeableConcept> qualifier,
	442 : optional list<Sequence_Quality> quality,
	443 : optional Quantity quantity,
	444 : optional Reference questionnaire,
	445 : optional string rateAggregation,
	446 : optional markdown rationale,
	447 : optional list<Reference> reaction,
	448 : optional i64 readCoverage,
	449 : optional list<CodeableConcept> reason,
	450 : optional list<CodeableConcept> reasonCode,
	451 : optional CodeableConcept reasonCodeableConcept,
	452 : optional list<CodeableConcept> reasonNotGiven,
	453 : optional list<CodeableConcept> reasonNotTaken,
	454 : optional list<Reference> reasonReference,
	455 : optional CodeableConcept reasonStopped,
	456 : optional i64 received,
	457 : optional i64 receivedTime,
	458 : optional list<Reference> receiver,
	459 : optional list<Reference> recipient,
	460 : optional list<ImmunizationRecommendation_Recommendation> recommendation,
	461 : optional instant recorded,
	462 : optional i64 recordedOn,
	463 : optional Reference recorder,
	464 : optional uri reference,
	465 : optional list<Reference> referenceDocument,
	466 : optional list<Observation_ReferenceRange> referenceRange,
	467 : optional Sequence_ReferenceSeq referenceSeq,
	468 : optional Reference referral,
	469 : optional list<CodeableConcept> referralMethod,
	470 : optional list<Reference> referralRequest,
	471 : optional Reference referrer,
	472 : optional list<Claim_Related> related,
	473 : optional list<RelatedArtifact> relatedArtifact,
	474 : optional list<Composition_RelatesTo> relatesTo,
	475 : optional CodeableConcept relationship,
	476 : optional list<Reference> relevantHistory,
	477 : optional Reference replacedBy,
	478 : optional list<Reference> replaces,
	479 : optional list<Reference> report,
	480 : optional CodeableConcept reportOrigin,
	481 : optional Reference reportingOrganization,
	482 : optional list<Sequence_Repository> repository,
	483 : optional Reference request,
	484 : optional id requestId,
	485 : optional Reference requestOrganization,
	486 : optional Reference requestProvider,
	487 : optional list<Period> requestedPeriod,
	488 : optional CommunicationRequest_Requester requester,
	489 : optional Reference requestingOrganization,
	490 : optional Identifier requisition,
	491 : optional Coding reserved,
	492 : optional list<CompartmentDefinition_Resource> resource,
	493 : optional MessageHeader_Response response,
	494 : optional bool responseRequired,
	495 : optional Reference responsible,
	496 : optional list<CapabilityStatement_Rest> rest,
	497 : optional Task_Restriction restriction,
	498 : optional list<Reference> result,
	499 : optional string riskAdjustment,
	500 : optional CodeableConcept route,
	501 : optional list<Contract_Rule> rule,
	502 : optional list<TestScript_Ruleset> ruleset,
	503 : optional list<CodeableConcept> safety,
	504 : optional Reference schedule,
	505 : optional double score,
	506 : optional CodeableConcept scoring,
	507 : optional bool search,
	508 : optional list<Composition_Section> section,
	509 : optional list<Coding> securityLabel,
	510 : optional Reference sender,
	511 : optional i64 sent,
	512 : optional string sequence,
	513 : optional list<ImagingStudy_Series> series,
	514 : optional CodeableConcept seriousness,
	515 : optional list<Reference> _service,
	516 : optional CodeableConcept serviceCategory,
	517 : optional Reference serviceProvider,
	518 : optional list<CodeableConcept> serviceProvisionCode,
	519 : optional list<CodeableConcept> serviceRequested,
	520 : optional list<CodeableConcept> serviceType,
	521 : optional i32 servicedDate,
	522 : optional Period servicedPeriod,
	523 : optional string set,
	524 : optional TestReport_Setup setup,
	525 : optional CodeableConcept severity,
	526 : optional list<Signature> signature,
	527 : optional list<Contract_Signer> signer,
	528 : optional CodeableConcept site,
	529 : optional list<Reference> slot,
	530 : optional StructureDefinition_Snapshot snapshot,
	531 : optional CapabilityStatement_Software software,
	532 : optional AuditEvent_Source source,
	533 : optional Attachment sourceAttachment,
	534 : optional Identifier sourceIdentifier,
	535 : optional Reference sourceReference,
	536 : optional uri sourceUri,
	537 : optional list<CodeableConcept> specialty,
	538 : optional list<Reference> specimen,
	539 : optional Reference sponsor,
	540 : optional Condition_Stage stage,
	541 : optional instant start,
	542 : optional CodeableConcept startCodeableConcept,
	543 : optional i32 startDate,
	544 : optional i64 started,
	545 : optional AccountStatus status,
	546 : optional i32 statusDate,
	547 : optional list<Encounter_StatusHistory> statusHistory,
	548 : optional string statusReason,
	549 : optional DataElementStringency stringency,
	550 : optional list<StructureMap_Structure> structure,
	551 : optional list<Reference> study,
	552 : optional list<CodeableConcept> subType,
	553 : optional Reference subject,
	554 : optional list<Reference> subjectMedicalHistory,
	555 : optional list<ResourceType> subjectType,
	556 : optional Reference subscriber,
	557 : optional string subscriberId,
	558 : optional MedicationDispense_Substitution substitution,
	559 : optional list<Coding> subtype,
	560 : optional string summary,
	561 : optional list<NutritionOrder_Supplement> supplement,
	562 : optional list<Measure_SupplementalData> supplementalData,
	563 : optional SupplyDelivery_SuppliedItem suppliedItem,
	564 : optional Reference supplier,
	565 : optional list<Reference> supportingInfo,
	566 : optional list<Reference> supportingInformation,
	567 : optional list<AdverseEvent_SuspectEntity> suspectEntity,
	568 : optional bool system,
	569 : optional list<Coding> tag,
	570 : optional MedicationStatementTaken taken,
	571 : optional Goal_Target target,
	572 : optional Reference targetReference,
	573 : optional uri targetUri,
	574 : optional list<Reference> team,
	575 : optional TestReport_Teardown teardown,
	576 : optional list<ContactPoint> telecom,
	577 : optional list<Contract_Term> term,
	578 : optional list<TestReport_Test> test,
	579 : optional Reference testScript,
	580 : optional string tester,
	581 : optional Narrative text,
	582 : optional instant timestamp,
	583 : optional i64 timingDateTime,
	584 : optional Period timingPeriod,
	585 : optional Range timingRange,
	586 : optional Timing timingTiming,
	587 : optional string title,
	588 : optional list<CodeableConcept> topic,
	589 : optional Money total,
	590 : optional Money totalBenefit,
	591 : optional Money totalCost,
	592 : optional Reference transform,
	593 : optional list<TriggerDefinition> trigger,
	594 : optional CodeableConcept type,
	595 : optional Device_Udi udi,
	596 : optional oid uid,
	597 : optional Money unallocDeductable,
	598 : optional list<NamingSystem_UniqueId> uniqueId,
	599 : optional CodeableConcept unit,
	600 : optional uri url,
	601 : optional string usage,
	602 : optional Use use,
	603 : optional list<UsageContext> useContext,
	604 : optional list<CodeableConcept> usedCode,
	605 : optional list<Reference> usedReference,
	606 : optional list<Immunization_VaccinationProtocol> vaccinationProtocol,
	607 : optional CodeableConcept vaccineCode,
	608 : optional Attachment valueAttachment,
	609 : optional bool valueBoolean,
	610 : optional CodeableConcept valueCodeableConcept,
	611 : optional i64 valueDateTime,
	612 : optional Period valuePeriod,
	613 : optional Quantity valueQuantity,
	614 : optional Range valueRange,
	615 : optional Ratio valueRatio,
	616 : optional SampledData valueSampledData,
	617 : optional uri valueSet,
	618 : optional string valueString,
	619 : optional time valueTime,
	620 : optional list<Contract_ValuedItem> valuedItem,
	621 : optional list<TestScript_Variable> variable,
	622 : optional list<Sequence_Variant> variant,
	623 : optional AllergyIntoleranceVerificationStatus verificationStatus,
	624 : optional string version,
	625 : optional bool versionNeeded,
	626 : optional CodeableConcept view,
	627 : optional i64 whenHandedOver,
	628 : optional i64 whenPrepared,
	629 : optional Period whenUsed,
	630 : optional positiveInt width,
	631 : optional string xpath,
	632 : optional XPathUsageType xpathUsage,
}

struct Element
{
	1 : optional bool _abstract,
	2 : optional string accept,
	3 : optional string acronym,
	4 : optional list<CodeableConcept> action,
	5 : optional id actionId,
	6 : optional list<CodeableConcept> actionReason,
	7 : optional Reference actor,
	8 : optional double add,
	9 : optional list<CodeableConcept> additionalInstruction,
	10 : optional list<Reference> additive,
	11 : optional CodeableConcept additiveCodeableConcept,
	12 : optional string additiveProductName,
	13 : optional Reference additiveReference,
	14 : optional CodeableConcept additiveType,
	15 : optional string address,
	16 : optional list<CodeableConcept> addresses,
	17 : optional list<ClaimResponse_Adjudication> adjudication,
	18 : optional Money adjustment,
	19 : optional CodeableConcept adjustmentReason,
	20 : optional list<NutritionOrder_Administration> administration,
	21 : optional string administrationInstruction,
	22 : optional CodeableConcept admitSource,
	23 : optional Range age,
	24 : optional Reference agent,
	25 : optional list<AggregationMode> aggregation,
	26 : optional string alias,
	27 : optional bool allDay,
	28 : optional bool allowed,
	29 : optional Money allowedMoney,
	30 : optional string allowedString,
	31 : optional int32 allowedUnsignedInt,
	32 : optional string altId,
	33 : optional double altitude,
	34 : optional Money amount,
	35 : optional list<QuestionnaireResponse_Answer> answer,
	36 : optional Attachment answerAttachment,
	37 : optional bool answerBoolean,
	38 : optional Coding answerCoding,
	39 : optional i32 answerDate,
	40 : optional i64 answerDateTime,
	41 : optional double answerDecimal,
	42 : optional i64 answerInteger,
	43 : optional Quantity answerQuantity,
	44 : optional Reference answerReference,
	45 : optional string answerString,
	46 : optional time answerTime,
	47 : optional uri answerUri,
	48 : optional Period applies,
	49 : optional list<CodeableConcept> appliesTo,
	50 : optional bool asNeededBoolean,
	51 : optional CodeableConcept asNeededCodeableConcept,
	52 : optional TestReport_Assert assert,
	53 : optional list<Reference> assessment,
	54 : optional Reference assigner,
	55 : optional IdentityAssuranceLevel assurance,
	56 : optional Attachment attachment,
	57 : optional Reference author,
	58 : optional Reference authorReference,
	59 : optional string authorString,
	60 : optional uri authority,
	61 : optional bool autocreate,
	62 : optional bool autodelete,
	63 : optional InstanceAvailability availability,
	64 : optional time availableEndTime,
	65 : optional time availableStartTime,
	66 : optional i64 axis,
	67 : optional double backCurve,
	68 : optional VisionBase base,
	69 : optional string baseFormulaProductName,
	70 : optional CodeableConcept baseFormulaType,
	71 : optional string basis,
	72 : optional list<Medication_Batch> batch,
	73 : optional list<EligibilityResponse_BenefitBalance> benefitBalance,
	74 : optional OperationDefinition_Binding binding,
	75 : optional binary blob,
	76 : optional CodeableConcept bodySite,
	77 : optional Duration boundsDuration,
	78 : optional Period boundsPeriod,
	79 : optional Range boundsRange,
	80 : optional string brand,
	81 : optional CodeableConcept breed,
	82 : optional string businessArrangement,
	83 : optional Quantity caloricDensity,
	84 : optional Reference capabilities,
	85 : optional list<TestScript_Capability> capability,
	86 : optional Quantity capacity,
	87 : optional ActionCardinalityBehavior cardinalityBehavior,
	88 : optional list<positiveInt> careTeamLinkId,
	89 : optional binary carrierAIDC,
	90 : optional string carrierHRF,
	91 : optional MessageSignificanceCategory category,
	92 : optional AdverseEventCausality causality,
	93 : optional CodeableConcept causalityAssessment,
	94 : optional Reference causalityAuthor,
	95 : optional CodeableConcept causalityMethod,
	96 : optional string causalityProductRelatedness,
	97 : optional CodeableConcept causalityResult,
	98 : optional list<CapabilityStatement_Certificate> certificate,
	99 : optional string check,
	100 : optional CodeableConcept chromosome,
	101 : optional string cigar,
	102 : optional string citation,
	103 : optional string city,
	104 : optional Reference claim,
	105 : optional Reference claimResponse,
	106 : optional list<Coding> _class,
	107 : optional string classDisplay,
	108 : optional TypeRestfulInteraction code,
	109 : optional list<DataRequirement_CodeFilter> codeFilter,
	110 : optional list<Coding> coding,
	111 : optional i64 collectedDateTime,
	112 : optional Period collectedPeriod,
	113 : optional Reference collector,
	114 : optional string color,
	115 : optional string comment,
	116 : optional QuantityComparator comparator,
	117 : optional string compareToSourceExpression,
	118 : optional string compareToSourceId,
	119 : optional string compareToSourcePath,
	120 : optional list<uri> compartment,
	121 : optional Identifier componentId,
	122 : optional list<CodeSystem_Concept> concept,
	123 : optional Reference condition,
	124 : optional bool conditionalCreate,
	125 : optional ConditionalDeleteStatus conditionalDelete,
	126 : optional ConditionalReadStatus conditionalRead,
	127 : optional bool conditionalUpdate,
	128 : optional list<ElementDefinition_Constraint> constraint,
	129 : optional ContactPoint contact,
	130 : optional CodeableConcept container,
	131 : optional list<ValueSet_Contains> contains,
	132 : optional list<Medication_Content> content,
	133 : optional Attachment contentAttachment,
	134 : optional Reference contentReference,
	135 : optional string contentString,
	136 : optional string contentType,
	137 : optional id context,
	138 : optional StructureMapContextType contextType,
	139 : optional Reference contract,
	140 : optional bool cors,
	141 : optional i64 count,
	142 : optional i64 countMax,
	143 : optional string country,
	144 : optional Reference coverage,
	145 : optional i64 creation,
	146 : optional string criteria,
	147 : optional double cylinder,
	148 : optional Quantity dailyAmount,
	149 : optional list<Consent_Data1> data,
	150 : optional CodeableConcept dataAbsentReason,
	151 : optional Period dataPeriod,
	152 : optional string datasetId,
	153 : optional i64 _date,
	154 : optional list<ImmunizationRecommendation_DateCriterion> dateCriterion,
	155 : optional list<DataRequirement_DateFilter> dateFilter,
	156 : optional list<code> dayOfWeek,
	157 : optional list<DaysOfWeek> daysOfWeek,
	158 : optional string defaultValue,
	159 : optional Address defaultValueAddress,
	160 : optional Age defaultValueAge,
	161 : optional Annotation defaultValueAnnotation,
	162 : optional Attachment defaultValueAttachment,
	163 : optional binary defaultValueBase64Binary,
	164 : optional bool defaultValueBoolean,
	165 : optional code defaultValueCode,
	166 : optional CodeableConcept defaultValueCodeableConcept,
	167 : optional Coding defaultValueCoding,
	168 : optional ContactPoint defaultValueContactPoint,
	169 : optional Count defaultValueCount,
	170 : optional i32 defaultValueDate,
	171 : optional i64 defaultValueDateTime,
	172 : optional double defaultValueDecimal,
	173 : optional Distance defaultValueDistance,
	174 : optional Duration defaultValueDuration,
	175 : optional HumanName defaultValueHumanName,
	176 : optional id defaultValueId,
	177 : optional Identifier defaultValueIdentifier,
	178 : optional instant defaultValueInstant,
	179 : optional i64 defaultValueInteger,
	180 : optional markdown defaultValueMarkdown,
	181 : optional Meta defaultValueMeta,
	182 : optional Money defaultValueMoney,
	183 : optional oid defaultValueOid,
	184 : optional Period defaultValuePeriod,
	185 : optional positiveInt defaultValuePositiveInt,
	186 : optional Quantity defaultValueQuantity,
	187 : optional Range defaultValueRange,
	188 : optional Ratio defaultValueRatio,
	189 : optional Reference defaultValueReference,
	190 : optional SampledData defaultValueSampledData,
	191 : optional Signature defaultValueSignature,
	192 : optional string defaultValueString,
	193 : optional time defaultValueTime,
	194 : optional Timing defaultValueTiming,
	195 : optional int32 defaultValueUnsignedInt,
	196 : optional uri defaultValueUri,
	197 : optional uri definition,
	198 : optional bool deleted,
	199 : optional Quantity denominator,
	200 : optional list<StructureMap_Dependent> dependent,
	201 : optional list<ConceptMap_DependsOn> dependsOn,
	202 : optional string description,
	203 : optional list<CodeSystem_Designation> designation,
	204 : optional Reference destination,
	205 : optional list<AuditEvent_Detail> detail,
	206 : optional CodeableConcept detailCodeableConcept,
	207 : optional Quantity detailQuantity,
	208 : optional Range detailRange,
	209 : optional positiveInt detailSequenceLinkId,
	210 : optional Reference details,
	211 : optional string deviceIdentifier,
	212 : optional CodeableConcept diagnosisCodeableConcept,
	213 : optional list<positiveInt> diagnosisLinkId,
	214 : optional Reference diagnosisReference,
	215 : optional string diagnostics,
	216 : optional double diameter,
	217 : optional list<CodeableConcept> dietPreference,
	218 : optional positiveInt dimensions,
	219 : optional AssertionDirectionType direction,
	220 : optional CodeableConcept dischargeDisposition,
	221 : optional list<ElementDefinition_Discriminator> discriminator,
	222 : optional string display,
	223 : optional string district,
	224 : optional www_w3_org_1999_xhtml.divType div,
	225 : optional Attachment document,
	226 : optional string documentation,
	227 : optional Quantity dose,
	228 : optional positiveInt doseNumber,
	229 : optional Quantity doseQuantity,
	230 : optional Range doseRange,
	231 : optional positiveInt doseSequence,
	232 : optional CodeableConcept doseStatus,
	233 : optional CodeableConcept doseStatusReason,
	234 : optional Duration due,
	235 : optional i32 dueDate,
	236 : optional Duration dueDuration,
	237 : optional Quantity duration,
	238 : optional double durationMax,
	239 : optional UnitsOfTime durationUnit,
	240 : optional Period during,
	241 : optional list<PlanDefinition_DynamicValue> dynamicValue,
	242 : optional i64 effectiveTime,
	243 : optional list<ConceptMap_Element> element,
	244 : optional CodeableConcept emptyReason,
	245 : optional list<Questionnaire_EnableWhen> enableWhen,
	246 : optional bool encodeRequestUrl,
	247 : optional list<Reference> encounter,
	248 : optional i64 end,
	249 : optional list<CapabilityStatement_Endpoint> endpoint,
	250 : optional Reference entity,
	251 : optional CodeableConcept entityCodeableConcept,
	252 : optional Reference entityReference,
	253 : optional list<Reference> entry,
	254 : optional UDIEntryType entryType,
	255 : optional ConceptMapEquivalence equivalence,
	256 : optional string etag,
	257 : optional list<CapabilityStatement_Event> event,
	258 : optional DataRequirement eventData,
	259 : optional string eventName,
	260 : optional i32 eventTimingDate,
	261 : optional i64 eventTimingDateTime,
	262 : optional Reference eventTimingReference,
	263 : optional Timing eventTimingTiming,
	264 : optional bool example,
	265 : optional Reference exampleFor,
	266 : optional ExpansionProfile_Exclude exclude,
	267 : optional bool excluded,
	268 : optional Duration expectedSupplyDuration,
	269 : optional i64 expirationDate,
	270 : optional i64 expiry,
	271 : optional CodeableConcept exposureRoute,
	272 : optional string expression,
	273 : optional id extends,
	274 : optional list<binary> extension,
	275 : optional VisionEyes eye,
	276 : optional double fScore,
	277 : optional CodeableConcept facilityType,
	278 : optional double factor,
	279 : optional string family,
	280 : optional Money fee,
	281 : optional string field,
	282 : optional list<ValueSet_Filter> filter,
	283 : optional list<EligibilityResponse_Financial> financial,
	284 : optional Address fixedAddress,
	285 : optional Age fixedAge,
	286 : optional Annotation fixedAnnotation,
	287 : optional Attachment fixedAttachment,
	288 : optional binary fixedBase64Binary,
	289 : optional bool fixedBoolean,
	290 : optional code fixedCode,
	291 : optional CodeableConcept fixedCodeableConcept,
	292 : optional Coding fixedCoding,
	293 : optional ContactPoint fixedContactPoint,
	294 : optional Count fixedCount,
	295 : optional i32 fixedDate,
	296 : optional i64 fixedDateTime,
	297 : optional double fixedDecimal,
	298 : optional Distance fixedDistance,
	299 : optional Duration fixedDuration,
	300 : optional HumanName fixedHumanName,
	301 : optional id fixedId,
	302 : optional Identifier fixedIdentifier,
	303 : optional instant fixedInstant,
	304 : optional i64 fixedInteger,
	305 : optional markdown fixedMarkdown,
	306 : optional Meta fixedMeta,
	307 : optional Money fixedMoney,
	308 : optional oid fixedOid,
	309 : optional Period fixedPeriod,
	310 : optional positiveInt fixedPositiveInt,
	311 : optional Quantity fixedQuantity,
	312 : optional Range fixedRange,
	313 : optional Ratio fixedRatio,
	314 : optional Reference fixedReference,
	315 : optional SampledData fixedSampledData,
	316 : optional Signature fixedSignature,
	317 : optional string fixedString,
	318 : optional time fixedTime,
	319 : optional Timing fixedTiming,
	320 : optional int32 fixedUnsignedInt,
	321 : optional uri fixedUri,
	322 : optional CodeableConcept flag,
	323 : optional list<CodeableConcept> fluidConsistencyType,
	324 : optional bool focal,
	325 : optional ResourceType focus,
	326 : optional CodeableConcept foodType,
	327 : optional CodeableConcept forecastStatus,
	328 : optional Coding format,
	329 : optional i64 frequency,
	330 : optional i64 frequencyMax,
	331 : optional uri fullUrl,
	332 : optional AdministrativeGender gender,
	333 : optional CodeableConcept genderStatus,
	334 : optional string genomeBuild,
	335 : optional list<string> given,
	336 : optional list<Reference> goal,
	337 : optional list<id> goalId,
	338 : optional list<Contract_Term> group,
	339 : optional string groupDisplay,
	340 : optional ActionGroupingBehavior groupingBehavior,
	341 : optional double gtFP,
	342 : optional bool hasAnswer,
	343 : optional binary hash,
	344 : optional list<string> header,
	345 : optional string headerField,
	346 : optional Quantity high,
	347 : optional string hint,
	348 : optional string human,
	349 : optional string id,
	350 : optional Identifier identifier,
	351 : optional id identity,
	352 : optional string ifMatch,
	353 : optional instant ifModifiedSince,
	354 : optional string ifNoneExist,
	355 : optional string ifNoneMatch,
	356 : optional Reference imagingStudy,
	357 : optional bool inactive,
	358 : optional ExpansionProfile_Include include,
	359 : optional i64 index,
	360 : optional Reference individual,
	361 : optional list<positiveInt> informationLinkId,
	362 : optional Attachment initialAttachment,
	363 : optional bool initialBoolean,
	364 : optional Coding initialCoding,
	365 : optional i32 initialDate,
	366 : optional i64 initialDateTime,
	367 : optional double initialDecimal,
	368 : optional i64 initialInteger,
	369 : optional Quantity initialQuantity,
	370 : optional Reference initialReference,
	371 : optional string initialString,
	372 : optional time initialTime,
	373 : optional uri initialUri,
	374 : optional list<DataRequirement> input,
	375 : optional Reference instance,
	376 : optional string instruction,
	377 : optional list<CapabilityStatement_Interaction1> interaction,
	378 : optional CodeableConcept interpretation,
	379 : optional bool isActive,
	380 : optional bool isModifier,
	381 : optional bool isSummary,
	382 : optional i64 issued,
	383 : optional uri issuer,
	384 : optional list<Reference> item,
	385 : optional CodeableConcept itemCodeableConcept,
	386 : optional Reference itemReference,
	387 : optional uri jurisdiction,
	388 : optional id key,
	389 : optional GuidePageKind kind,
	390 : optional string label,
	391 : optional string language,
	392 : optional instant lastModified,
	393 : optional instant lastUpdated,
	394 : optional Coding laterality,
	395 : optional double latitude,
	396 : optional Coding lifecycle,
	397 : optional list<string> line,
	398 : optional list<Bundle_Link> link,
	399 : optional string linkId,
	400 : optional StructureMapSourceListMode listMode,
	401 : optional id listRuleId,
	402 : optional Reference location,
	403 : optional Address locationAddress,
	404 : optional CodeableConcept locationCodeableConcept,
	405 : optional Reference locationReference,
	406 : optional i32 lockedDate,
	407 : optional double longitude,
	408 : optional string lotNumber,
	409 : optional Quantity low,
	410 : optional double lowerLimit,
	411 : optional list<CodeableConcept> manifestation,
	412 : optional Reference manipulated,
	413 : optional string map,
	414 : optional list<ElementDefinition_Mapping> mapping,
	415 : optional string max,
	416 : optional Quantity maxDosePerAdministration,
	417 : optional Quantity maxDosePerLifetime,
	418 : optional Ratio maxDosePerPeriod,
	419 : optional i64 maxLength,
	420 : optional i32 maxValueDate,
	421 : optional i64 maxValueDateTime,
	422 : optional double maxValueDecimal,
	423 : optional instant maxValueInstant,
	424 : optional i64 maxValueInteger,
	425 : optional positiveInt maxValuePositiveInt,
	426 : optional Quantity maxValueQuantity,
	427 : optional time maxValueTime,
	428 : optional int32 maxValueUnsignedInt,
	429 : optional Quantity maxVolumeToDeliver,
	430 : optional ConsentDataMeaning meaning,
	431 : optional markdown meaningWhenMissing,
	432 : optional CodeableConcept measure,
	433 : optional double measureScore,
	434 : optional Coding media,
	435 : optional Reference member,
	436 : optional Reference message,
	437 : optional HTTPVerb method,
	438 : optional i64 min,
	439 : optional i32 minValueDate,
	440 : optional i64 minValueDateTime,
	441 : optional double minValueDecimal,
	442 : optional instant minValueInstant,
	443 : optional i64 minValueInteger,
	444 : optional positiveInt minValuePositiveInt,
	445 : optional Quantity minValueQuantity,
	446 : optional time minValueTime,
	447 : optional int32 minValueUnsignedInt,
	448 : optional string minimumId,
	449 : optional Coding modality,
	450 : optional SearchEntryMode mode,
	451 : optional list<CodeableConcept> modifier,
	452 : optional list<binary> modifierExtension,
	453 : optional list<string> mustSupport,
	454 : optional string name,
	455 : optional bool navigationLinks,
	456 : optional Money net,
	457 : optional AuditEvent_Network network,
	458 : optional list<Annotation> note,
	459 : optional list<positiveInt> noteNumber,
	460 : optional positiveInt number,
	461 : optional int32 numberOfInstances,
	462 : optional positiveInt numberOfRepeatsAllowed,
	463 : optional Quantity numerator,
	464 : optional list<NutritionOrder_Nutrient> nutrient,
	465 : optional string observedAllele,
	466 : optional i64 offset,
	467 : optional Duration offsetDuration,
	468 : optional Range offsetRange,
	469 : optional Reference onBehalfOf,
	470 : optional Reference onBehalfOfReference,
	471 : optional uri onBehalfOfUri,
	472 : optional bool onHold,
	473 : optional i64 onset,
	474 : optional Age onsetAge,
	475 : optional Period onsetPeriod,
	476 : optional Range onsetRange,
	477 : optional string onsetString,
	478 : optional FilterOperator op,
	479 : optional list<CapabilityStatement_Operation> operation,
	480 : optional list<FilterOperator> operator,
	481 : optional list<Questionnaire_Option> option,
	482 : optional Reference options,
	483 : optional string orderMeaning,
	484 : optional bool ordered,
	485 : optional CodeableConcept orderedBy,
	486 : optional Reference organization,
	487 : optional Reference origin,
	488 : optional Reference other,
	489 : optional ResourceContainer outcome,
	490 : optional list<CodeableConcept> outcomeCodeableConcept,
	491 : optional list<Reference> outcomeReference,
	492 : optional list<DataRequirement> output,
	493 : optional Attachment pAttachment,
	494 : optional Reference pReference,
	495 : optional list<string> package,
	496 : optional CodeableConcept packageCode,
	497 : optional list<ImplementationGuide_Page> page,
	498 : optional list<string> param,
	499 : optional list<StructureMap_Parameter> parameter,
	500 : optional list<string> parameterName,
	501 : optional string params,
	502 : optional list<OperationDefinition_Parameter> part,
	503 : optional list<PlanDefinition_Participant> participant,
	504 : optional Reference party,
	505 : optional string path,
	506 : optional string patientInstruction,
	507 : optional Reference patients,
	508 : optional Address patternAddress,
	509 : optional Age patternAge,
	510 : optional Annotation patternAnnotation,
	511 : optional Attachment patternAttachment,
	512 : optional binary patternBase64Binary,
	513 : optional bool patternBoolean,
	514 : optional code patternCode,
	515 : optional CodeableConcept patternCodeableConcept,
	516 : optional Coding patternCoding,
	517 : optional ContactPoint patternContactPoint,
	518 : optional Count patternCount,
	519 : optional i32 patternDate,
	520 : optional i64 patternDateTime,
	521 : optional double patternDecimal,
	522 : optional Distance patternDistance,
	523 : optional Duration patternDuration,
	524 : optional HumanName patternHumanName,
	525 : optional id patternId,
	526 : optional Identifier patternIdentifier,
	527 : optional instant patternInstant,
	528 : optional i64 patternInteger,
	529 : optional markdown patternMarkdown,
	530 : optional Meta patternMeta,
	531 : optional Money patternMoney,
	532 : optional oid patternOid,
	533 : optional Period patternPeriod,
	534 : optional positiveInt patternPositiveInt,
	535 : optional Quantity patternQuantity,
	536 : optional Range patternRange,
	537 : optional Ratio patternRatio,
	538 : optional Reference patternReference,
	539 : optional SampledData patternSampledData,
	540 : optional Signature patternSignature,
	541 : optional string patternString,
	542 : optional time patternTime,
	543 : optional Timing patternTiming,
	544 : optional int32 patternUnsignedInt,
	545 : optional uri patternUri,
	546 : optional Reference payee,
	547 : optional string payload,
	548 : optional list<Reference> performer,
	549 : optional Period period,
	550 : optional double periodMax,
	551 : optional UnitsOfTime periodUnit,
	552 : optional string plan,
	553 : optional string planDisplay,
	554 : optional double points,
	555 : optional list<uri> policy,
	556 : optional list<Measure_Population> population,
	557 : optional string postalCode,
	558 : optional double power,
	559 : optional CodeableConcept practiceSetting,
	560 : optional Identifier preAdmissionIdentifier,
	561 : optional list<string> preAuthRef,
	562 : optional ActionPrecheckBehavior precheckBehavior,
	563 : optional double precision,
	564 : optional bool preferred,
	565 : optional string prefix,
	566 : optional positiveInt priority,
	567 : optional double prism,
	568 : optional double probabilityDecimal,
	569 : optional Range probabilityRange,
	570 : optional CodeableConcept procedure,
	571 : optional CodeableConcept procedureCodeableConcept,
	572 : optional list<positiveInt> procedureLinkId,
	573 : optional Reference procedureReference,
	574 : optional list<ConceptMap_DependsOn> product,
	575 : optional CodeableConcept productCodeableConcept,
	576 : optional string productName,
	577 : optional Reference productReference,
	578 : optional string productionSpec,
	579 : optional Reference profile,
	580 : optional list<CodeableConcept> programCode,
	581 : optional list<Annotation> progress,
	582 : optional bool prohibited,
	583 : optional list<CodeSystem_Property1> property,
	584 : optional Coding protocol,
	585 : optional Reference provider,
	586 : optional list<Coding> purpose,
	587 : optional list<CodeableConcept> purposeOfUse,
	588 : optional CodeableConcept qualification,
	589 : optional CodeableConcept qualitativeRisk,
	590 : optional Quantity quantity,
	591 : optional binary query,
	592 : optional double queryFP,
	593 : optional double queryTP,
	594 : optional string question,
	595 : optional positiveInt rank,
	596 : optional Quantity rateQuantity,
	597 : optional Range rateRange,
	598 : optional Ratio rateRatio,
	599 : optional string rationale,
	600 : optional CodeableConcept reAdmission,
	601 : optional bool readHistory,
	602 : optional bool readOnly,
	603 : optional string readsetId,
	604 : optional CodeableConcept reason,
	605 : optional list<CodeableConcept> reasonCode,
	606 : optional list<CodeableConcept> reasonNotGiven,
	607 : optional list<Reference> reasonReference,
	608 : optional double recall,
	609 : optional list<Reference> recipient,
	610 : optional Reference ref,
	611 : optional Reference reference,
	612 : optional string referenceAllele,
	613 : optional list<ReferenceHandlingPolicy> referencePolicy,
	614 : optional list<Observation_ReferenceRange> referenceRange,
	615 : optional CodeableConcept referenceSeqId,
	616 : optional Reference referenceSeqPointer,
	617 : optional string referenceSeqString,
	618 : optional list<DocumentReference_Related> related,
	619 : optional list<PlanDefinition_RelatedAction> relatedAction,
	620 : optional CodeableConcept relatedAgentType,
	621 : optional string relation,
	622 : optional CodeableConcept relationship,
	623 : optional double relativeRisk,
	624 : optional i64 releaseDate,
	625 : optional int32 reliableCache,
	626 : optional Timing_Repeat repeat,
	627 : optional bool repeats,
	628 : optional positiveInt repetitions,
	629 : optional bool reported,
	630 : optional list<PropertyRepresentation> representation,
	631 : optional Bundle_Request request,
	632 : optional list<TestScript_RequestHeader> requestHeader,
	633 : optional id requestId,
	634 : optional TestScriptRequestMethodCode requestMethod,
	635 : optional string requestURL,
	636 : optional bool requestor,
	637 : optional ParticipantRequired _required,
	638 : optional ActionRequiredBehavior requiredBehavior,
	639 : optional markdown requirements,
	640 : optional ResourceContainer resource,
	641 : optional Coding resourceType,
	642 : optional Bundle_Response response,
	643 : optional string responseCode,
	644 : optional id responseId,
	645 : optional bool responsible,
	646 : optional list<Reference> responsibleParty,
	647 : optional TestReportActionResult result,
	648 : optional CodeableConcept revenue,
	649 : optional CodeableConcept role,
	650 : optional CodeableConcept route,
	651 : optional CodeableConcept routeofAdministration,
	652 : optional GraphCompartmentRule rule,
	653 : optional id ruleId,
	654 : optional SlicingRules rules,
	655 : optional TestScript_Ruleset1 ruleset,
	656 : optional id rulesetId,
	657 : optional list<Timing> schedule,
	658 : optional Period scheduledPeriod,
	659 : optional string scheduledString,
	660 : optional Timing scheduledTiming,
	661 : optional double score,
	662 : optional Bundle_Search search,
	663 : optional list<string> searchInclude,
	664 : optional list<CapabilityStatement_SearchParam> searchParam,
	665 : optional list<string> searchRevInclude,
	666 : optional SearchParamType searchType,
	667 : optional list<Composition_Section> section,
	668 : optional CapabilityStatement_Security security,
	669 : optional list<Coding> securityLabel,
	670 : optional ActionSelectionBehavior selectionBehavior,
	671 : optional positiveInt sequence,
	672 : optional positiveInt sequenceLinkId,
	673 : optional list<ImagingManifest_Series> series,
	674 : optional positiveInt seriesDoses,
	675 : optional list<CodeableConcept> _service,
	676 : optional i32 servicedDate,
	677 : optional Period servicedPeriod,
	678 : optional AllergyIntoleranceSeverity severity,
	679 : optional string _short,
	680 : optional list<Signature> signature,
	681 : optional string site,
	682 : optional markdown situation,
	683 : optional int32 size,
	684 : optional string sliceName,
	685 : optional ElementDefinition_Slicing slicing,
	686 : optional string software,
	687 : optional oid sopClass,
	688 : optional uri source,
	689 : optional id sourceId,
	690 : optional Reference sourcePatientInfo,
	691 : optional Reference sourceReference,
	692 : optional uri sourceUri,
	693 : optional string sourceVersion,
	694 : optional CodeableConcept specType,
	695 : optional list<CodeableConcept> specialArrangement,
	696 : optional list<CodeableConcept> specialCourtesy,
	697 : optional CodeableConcept species,
	698 : optional Quantity specimenQuantity,
	699 : optional double sphere,
	700 : optional CodeableConcept standardSequence,
	701 : optional CodeableConcept start,
	702 : optional i64 started,
	703 : optional DeviceMetricCalibrationState state,
	704 : optional ParticipationStatus status,
	705 : optional string statusReason,
	706 : optional i64 strand,
	707 : optional list<Measure_Stratifier> stratifier,
	708 : optional list<MeasureReport_Stratum> stratum,
	709 : optional BindingStrength strength,
	710 : optional CodeableConcept subCategory,
	711 : optional string subClass,
	712 : optional string subClassDisplay,
	713 : optional list<Claim_SubDetail> subDetail,
	714 : optional string subGroup,
	715 : optional string subGroupDisplay,
	716 : optional string subPlan,
	717 : optional string subPlanDisplay,
	718 : optional list<CodeableConcept> subSite,
	719 : optional CodeableConcept subType,
	720 : optional positiveInt subdetailSequenceLinkId,
	721 : optional Reference subject,
	722 : optional Reference submitter,
	723 : optional CodeableConcept substance,
	724 : optional CodeableConcept substanceCodeableConcept,
	725 : optional Reference substanceReference,
	726 : optional list<string> suffix,
	727 : optional CodeableConcept summary,
	728 : optional list<CapabilityStatement_SupportedMessage> supportedMessage,
	729 : optional list<Reference> supportingImmunization,
	730 : optional list<Reference> supportingPatientInformation,
	731 : optional uri system,
	732 : optional list<Coding> tag,
	733 : optional uri target,
	734 : optional list<CodeableConcept> targetDisease,
	735 : optional id targetId,
	736 : optional Identifier targetIdentifier,
	737 : optional uri targetProfile,
	738 : optional Reference targetReference,
	739 : optional string targetVersion,
	740 : optional list<ContactPoint> telecom,
	741 : optional CodeableConcept term,
	742 : optional string text,
	743 : optional string textEquivalent,
	744 : optional list<NutritionOrder_Texture> texture,
	745 : optional i64 time,
	746 : optional i64 timeDateTime,
	747 : optional list<time> timeOfDay,
	748 : optional Period timePeriod,
	749 : optional i64 timestamp,
	750 : optional Timing timing,
	751 : optional i32 timingDate,
	752 : optional i64 timingDateTime,
	753 : optional Duration timingDuration,
	754 : optional Period timingPeriod,
	755 : optional Range timingRange,
	756 : optional Timing timingTiming,
	757 : optional string title,
	758 : optional list<Reference> topic,
	759 : optional i64 total,
	760 : optional Reference transform,
	761 : optional list<TriggerDefinition> triggerDefinition,
	762 : optional double truthFN,
	763 : optional double truthTP,
	764 : optional ActionParticipantType type,
	765 : optional StructureMapGroupTypeMode typeMode,
	766 : optional list<Reference> udi,
	767 : optional oid uid,
	768 : optional CodeableConcept unit,
	769 : optional Money unitPrice,
	770 : optional ConceptMap_Unmapped unmapped,
	771 : optional bool updateCreate,
	772 : optional double upperLimit,
	773 : optional uri _uri,
	774 : optional UnspecifiedType url,
	775 : optional list<CodeableConcept> usage,
	776 : optional Coding use,
	777 : optional Money usedMoney,
	778 : optional int32 usedUnsignedInt,
	779 : optional Identifier userId,
	780 : optional bool userSelected,
	781 : optional CodeableConcept vaccineCode,
	782 : optional id validateProfileId,
	783 : optional bool validated,
	784 : optional Period validityPeriod,
	785 : optional binary value,
	786 : optional Address valueAddress,
	787 : optional Age valueAge,
	788 : optional Annotation valueAnnotation,
	789 : optional Attachment valueAttachment,
	790 : optional binary valueBase64Binary,
	791 : optional bool valueBoolean,
	792 : optional code valueCode,
	793 : optional CodeableConcept valueCodeableConcept,
	794 : optional Coding valueCoding,
	795 : optional ContactPoint valueContactPoint,
	796 : optional Count valueCount,
	797 : optional i32 valueDate,
	798 : optional i64 valueDateTime,
	799 : optional double valueDecimal,
	800 : optional Distance valueDistance,
	801 : optional Duration valueDuration,
	802 : optional HumanName valueHumanName,
	803 : optional id valueId,
	804 : optional Identifier valueIdentifier,
	805 : optional instant valueInstant,
	806 : optional i64 valueInteger,
	807 : optional markdown valueMarkdown,
	808 : optional Meta valueMeta,
	809 : optional Money valueMoney,
	810 : optional oid valueOid,
	811 : optional Period valuePeriod,
	812 : optional positiveInt valuePositiveInt,
	813 : optional Quantity valueQuantity,
	814 : optional Range valueRange,
	815 : optional Ratio valueRatio,
	816 : optional Reference valueReference,
	817 : optional SampledData valueSampledData,
	818 : optional list<uri> valueSet,
	819 : optional Reference valueSetReference,
	820 : optional string valueSetString,
	821 : optional uri valueSetUri,
	822 : optional Signature valueSignature,
	823 : optional string valueString,
	824 : optional time valueTime,
	825 : optional Timing valueTiming,
	826 : optional int32 valueUnsignedInt,
	827 : optional uri valueUri,
	828 : optional list<Contract_ValuedItem1> valuedItem,
	829 : optional id variable,
	830 : optional Reference variantPointer,
	831 : optional string variantsetId,
	832 : optional string version,
	833 : optional id versionId,
	834 : optional ResourceVersionPolicy versioning,
	835 : optional bool warningOnly,
	836 : optional bool wasSubstituted,
	837 : optional Identifier whatIdentifier,
	838 : optional Reference whatReference,
	839 : optional uri whatUri,
	840 : optional instant when,
	841 : optional Period whenPeriod,
	842 : optional Range whenRange,
	843 : optional Reference whoReference,
	844 : optional uri whoUri,
	845 : optional i64 windowEnd,
	846 : optional i64 windowStart,
	847 : optional string xpath,
}

struct ElementDefinition
{
	1 : optional list<string> alias,
	2 : optional ElementDefinition_Base base,
	3 : optional ElementDefinition_Binding binding,
	4 : optional list<Coding> code,
	5 : optional markdown comment,
	6 : optional list<id> condition,
	7 : optional list<ElementDefinition_Constraint> constraint,
	8 : optional uri contentReference,
	9 : optional Address defaultValueAddress,
	10 : optional Age defaultValueAge,
	11 : optional Annotation defaultValueAnnotation,
	12 : optional Attachment defaultValueAttachment,
	13 : optional binary defaultValueBase64Binary,
	14 : optional bool defaultValueBoolean,
	15 : optional code defaultValueCode,
	16 : optional CodeableConcept defaultValueCodeableConcept,
	17 : optional Coding defaultValueCoding,
	18 : optional ContactPoint defaultValueContactPoint,
	19 : optional Count defaultValueCount,
	20 : optional i32 defaultValueDate,
	21 : optional i64 defaultValueDateTime,
	22 : optional double defaultValueDecimal,
	23 : optional Distance defaultValueDistance,
	24 : optional Duration defaultValueDuration,
	25 : optional HumanName defaultValueHumanName,
	26 : optional id defaultValueId,
	27 : optional Identifier defaultValueIdentifier,
	28 : optional instant defaultValueInstant,
	29 : optional i64 defaultValueInteger,
	30 : optional markdown defaultValueMarkdown,
	31 : optional Meta defaultValueMeta,
	32 : optional Money defaultValueMoney,
	33 : optional oid defaultValueOid,
	34 : optional Period defaultValuePeriod,
	35 : optional positiveInt defaultValuePositiveInt,
	36 : optional Quantity defaultValueQuantity,
	37 : optional Range defaultValueRange,
	38 : optional Ratio defaultValueRatio,
	39 : optional Reference defaultValueReference,
	40 : optional SampledData defaultValueSampledData,
	41 : optional Signature defaultValueSignature,
	42 : optional string defaultValueString,
	43 : optional time defaultValueTime,
	44 : optional Timing defaultValueTiming,
	45 : optional int32 defaultValueUnsignedInt,
	46 : optional uri defaultValueUri,
	47 : optional markdown definition,
	48 : optional list<ElementDefinition_Example> example,
	49 : optional list<binary> extension,
	50 : optional Address fixedAddress,
	51 : optional Age fixedAge,
	52 : optional Annotation fixedAnnotation,
	53 : optional Attachment fixedAttachment,
	54 : optional binary fixedBase64Binary,
	55 : optional bool fixedBoolean,
	56 : optional code fixedCode,
	57 : optional CodeableConcept fixedCodeableConcept,
	58 : optional Coding fixedCoding,
	59 : optional ContactPoint fixedContactPoint,
	60 : optional Count fixedCount,
	61 : optional i32 fixedDate,
	62 : optional i64 fixedDateTime,
	63 : optional double fixedDecimal,
	64 : optional Distance fixedDistance,
	65 : optional Duration fixedDuration,
	66 : optional HumanName fixedHumanName,
	67 : optional id fixedId,
	68 : optional Identifier fixedIdentifier,
	69 : optional instant fixedInstant,
	70 : optional i64 fixedInteger,
	71 : optional markdown fixedMarkdown,
	72 : optional Meta fixedMeta,
	73 : optional Money fixedMoney,
	74 : optional oid fixedOid,
	75 : optional Period fixedPeriod,
	76 : optional positiveInt fixedPositiveInt,
	77 : optional Quantity fixedQuantity,
	78 : optional Range fixedRange,
	79 : optional Ratio fixedRatio,
	80 : optional Reference fixedReference,
	81 : optional SampledData fixedSampledData,
	82 : optional Signature fixedSignature,
	83 : optional string fixedString,
	84 : optional time fixedTime,
	85 : optional Timing fixedTiming,
	86 : optional int32 fixedUnsignedInt,
	87 : optional uri fixedUri,
	88 : optional string id,
	89 : optional bool isModifier,
	90 : optional bool isSummary,
	91 : optional string label,
	92 : optional list<ElementDefinition_Mapping> mapping,
	93 : optional string max,
	94 : optional i64 maxLength,
	95 : optional i32 maxValueDate,
	96 : optional i64 maxValueDateTime,
	97 : optional double maxValueDecimal,
	98 : optional instant maxValueInstant,
	99 : optional i64 maxValueInteger,
	100 : optional positiveInt maxValuePositiveInt,
	101 : optional Quantity maxValueQuantity,
	102 : optional time maxValueTime,
	103 : optional int32 maxValueUnsignedInt,
	104 : optional markdown meaningWhenMissing,
	105 : optional int32 min,
	106 : optional i32 minValueDate,
	107 : optional i64 minValueDateTime,
	108 : optional double minValueDecimal,
	109 : optional instant minValueInstant,
	110 : optional i64 minValueInteger,
	111 : optional positiveInt minValuePositiveInt,
	112 : optional Quantity minValueQuantity,
	113 : optional time minValueTime,
	114 : optional int32 minValueUnsignedInt,
	115 : optional bool mustSupport,
	116 : optional string orderMeaning,
	117 : required string path,
	118 : optional Address patternAddress,
	119 : optional Age patternAge,
	120 : optional Annotation patternAnnotation,
	121 : optional Attachment patternAttachment,
	122 : optional binary patternBase64Binary,
	123 : optional bool patternBoolean,
	124 : optional code patternCode,
	125 : optional CodeableConcept patternCodeableConcept,
	126 : optional Coding patternCoding,
	127 : optional ContactPoint patternContactPoint,
	128 : optional Count patternCount,
	129 : optional i32 patternDate,
	130 : optional i64 patternDateTime,
	131 : optional double patternDecimal,
	132 : optional Distance patternDistance,
	133 : optional Duration patternDuration,
	134 : optional HumanName patternHumanName,
	135 : optional id patternId,
	136 : optional Identifier patternIdentifier,
	137 : optional instant patternInstant,
	138 : optional i64 patternInteger,
	139 : optional markdown patternMarkdown,
	140 : optional Meta patternMeta,
	141 : optional Money patternMoney,
	142 : optional oid patternOid,
	143 : optional Period patternPeriod,
	144 : optional positiveInt patternPositiveInt,
	145 : optional Quantity patternQuantity,
	146 : optional Range patternRange,
	147 : optional Ratio patternRatio,
	148 : optional Reference patternReference,
	149 : optional SampledData patternSampledData,
	150 : optional Signature patternSignature,
	151 : optional string patternString,
	152 : optional time patternTime,
	153 : optional Timing patternTiming,
	154 : optional int32 patternUnsignedInt,
	155 : optional uri patternUri,
	156 : optional list<PropertyRepresentation> representation,
	157 : optional markdown requirements,
	158 : optional string _short,
	159 : optional string sliceName,
	160 : optional ElementDefinition_Slicing slicing,
	161 : optional list<ElementDefinition_Type> type,
}

struct ElementDefinition_Binding
{
	1 : optional string description,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required BindingStrength strength,
	5 : optional Reference valueSetReference,
	6 : optional uri valueSetUri,
}

struct ElementDefinition_Example
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required string label,
	4 : optional Address valueAddress,
	5 : optional Age valueAge,
	6 : optional Annotation valueAnnotation,
	7 : optional Attachment valueAttachment,
	8 : optional binary valueBase64Binary,
	9 : optional bool valueBoolean,
	10 : optional code valueCode,
	11 : optional CodeableConcept valueCodeableConcept,
	12 : optional Coding valueCoding,
	13 : optional ContactPoint valueContactPoint,
	14 : optional Count valueCount,
	15 : optional i32 valueDate,
	16 : optional i64 valueDateTime,
	17 : optional double valueDecimal,
	18 : optional Distance valueDistance,
	19 : optional Duration valueDuration,
	20 : optional HumanName valueHumanName,
	21 : optional id valueId,
	22 : optional Identifier valueIdentifier,
	23 : optional instant valueInstant,
	24 : optional i64 valueInteger,
	25 : optional markdown valueMarkdown,
	26 : optional Meta valueMeta,
	27 : optional Money valueMoney,
	28 : optional oid valueOid,
	29 : optional Period valuePeriod,
	30 : optional positiveInt valuePositiveInt,
	31 : optional Quantity valueQuantity,
	32 : optional Range valueRange,
	33 : optional Ratio valueRatio,
	34 : optional Reference valueReference,
	35 : optional SampledData valueSampledData,
	36 : optional Signature valueSignature,
	37 : optional string valueString,
	38 : optional time valueTime,
	39 : optional Timing valueTiming,
	40 : optional int32 valueUnsignedInt,
	41 : optional uri valueUri,
}

struct EligibilityRequest
{
	1 : optional CodeableConcept benefitCategory,
	2 : optional CodeableConcept benefitSubCategory,
	3 : optional string businessArrangement,
	4 : optional list<ResourceContainer> contained,
	5 : optional Reference coverage,
	6 : optional i64 created,
	7 : optional Reference enterer,
	8 : optional list<binary> extension,
	9 : optional Reference facility,
	10 : optional id _id,
	11 : optional list<Identifier> identifier,
	12 : optional uri implicitRules,
	13 : optional Reference insurer,
	14 : optional code language,
	15 : optional Meta meta,
	16 : optional list<binary> modifierExtension,
	17 : optional Reference organization,
	18 : optional Reference patient,
	19 : optional CodeableConcept priority,
	20 : optional Reference provider,
	21 : optional i32 servicedDate,
	22 : optional Period servicedPeriod,
	23 : optional FinancialResourceStatusCodes status,
	24 : optional Narrative text,
}

struct EligibilityResponse
{
	1 : optional list<ResourceContainer> contained,
	2 : optional i64 created,
	3 : optional string disposition,
	4 : optional list<EligibilityResponse_Error> error,
	5 : optional list<binary> extension,
	6 : optional CodeableConcept form,
	7 : optional id _id,
	8 : optional list<Identifier> identifier,
	9 : optional uri implicitRules,
	10 : optional bool inforce,
	11 : optional list<EligibilityResponse_Insurance> insurance,
	12 : optional Reference insurer,
	13 : optional code language,
	14 : optional Meta meta,
	15 : optional list<binary> modifierExtension,
	16 : optional CodeableConcept outcome,
	17 : optional Reference request,
	18 : optional Reference requestOrganization,
	19 : optional Reference requestProvider,
	20 : optional FinancialResourceStatusCodes status,
	21 : optional Narrative text,
}

struct EligibilityResponse_Insurance
{
	1 : optional list<EligibilityResponse_BenefitBalance> benefitBalance,
	2 : optional Reference contract,
	3 : optional Reference coverage,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
}

struct Encounter
{
	1 : optional list<Reference> account,
	2 : optional Reference appointment,
	3 : optional Coding _class,
	4 : optional list<Encounter_ClassHistory> classHistory,
	5 : optional list<ResourceContainer> contained,
	6 : optional list<Encounter_Diagnosis> diagnosis,
	7 : optional list<Reference> episodeOfCare,
	8 : optional list<binary> extension,
	9 : optional Encounter_Hospitalization hospitalization,
	10 : optional id _id,
	11 : optional list<Identifier> identifier,
	12 : optional uri implicitRules,
	13 : optional list<Reference> incomingReferral,
	14 : optional code language,
	15 : optional Duration length,
	16 : optional list<Encounter_Location> location,
	17 : optional Meta meta,
	18 : optional list<binary> modifierExtension,
	19 : optional Reference partOf,
	20 : optional list<Encounter_Participant> participant,
	21 : optional Period period,
	22 : optional CodeableConcept priority,
	23 : optional list<CodeableConcept> reason,
	24 : optional Reference serviceProvider,
	25 : required EncounterStatus status,
	26 : optional list<Encounter_StatusHistory> statusHistory,
	27 : optional Reference subject,
	28 : optional Narrative text,
	29 : optional list<CodeableConcept> type,
}

struct Encounter_Diagnosis
{
	1 : required Reference condition,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional positiveInt rank,
	6 : optional CodeableConcept role,
}

struct Encounter_Hospitalization
{
	1 : optional CodeableConcept admitSource,
	2 : optional Reference destination,
	3 : optional list<CodeableConcept> dietPreference,
	4 : optional CodeableConcept dischargeDisposition,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
	8 : optional Reference origin,
	9 : optional Identifier preAdmissionIdentifier,
	10 : optional CodeableConcept reAdmission,
	11 : optional list<CodeableConcept> specialArrangement,
	12 : optional list<CodeableConcept> specialCourtesy,
}

struct Encounter_Location
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required Reference location,
	4 : optional list<binary> modifierExtension,
	5 : optional Period period,
	6 : optional EncounterLocationStatus status,
}

struct Encounter_Participant
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional Reference individual,
	4 : optional list<binary> modifierExtension,
	5 : optional Period period,
	6 : optional list<CodeableConcept> type,
}

struct Endpoint
{
	1 : required uri address,
	2 : required Coding connectionType,
	3 : optional list<ContactPoint> contact,
	4 : optional list<ResourceContainer> contained,
	5 : optional list<binary> extension,
	6 : optional list<string> header,
	7 : optional id _id,
	8 : optional list<Identifier> identifier,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional Reference managingOrganization,
	12 : optional Meta meta,
	13 : optional list<binary> modifierExtension,
	14 : optional string name,
	15 : optional list<code> payloadMimeType,
	16 : required list<CodeableConcept> payloadType,
	17 : optional Period period,
	18 : required EndpointStatus status,
	19 : optional Narrative text,
}

struct EnrollmentRequest
{
	1 : optional list<ResourceContainer> contained,
	2 : optional Reference coverage,
	3 : optional i64 created,
	4 : optional list<binary> extension,
	5 : optional id _id,
	6 : optional list<Identifier> identifier,
	7 : optional uri implicitRules,
	8 : optional Reference insurer,
	9 : optional code language,
	10 : optional Meta meta,
	11 : optional list<binary> modifierExtension,
	12 : optional Reference organization,
	13 : optional Reference provider,
	14 : optional FinancialResourceStatusCodes status,
	15 : optional Reference subject,
	16 : optional Narrative text,
}

struct EnrollmentResponse
{
	1 : optional list<ResourceContainer> contained,
	2 : optional i64 created,
	3 : optional string disposition,
	4 : optional list<binary> extension,
	5 : optional id _id,
	6 : optional list<Identifier> identifier,
	7 : optional uri implicitRules,
	8 : optional code language,
	9 : optional Meta meta,
	10 : optional list<binary> modifierExtension,
	11 : optional Reference organization,
	12 : optional CodeableConcept outcome,
	13 : optional Reference request,
	14 : optional Reference requestOrganization,
	15 : optional Reference requestProvider,
	16 : optional FinancialResourceStatusCodes status,
	17 : optional Narrative text,
}

struct EpisodeOfCare
{
	1 : optional list<Reference> account,
	2 : optional Reference careManager,
	3 : optional list<ResourceContainer> contained,
	4 : optional list<EpisodeOfCare_Diagnosis> diagnosis,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional list<Identifier> identifier,
	8 : optional uri implicitRules,
	9 : optional code language,
	10 : optional Reference managingOrganization,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : required Reference patient,
	14 : optional Period period,
	15 : optional list<Reference> referralRequest,
	16 : required EpisodeOfCareStatus status,
	17 : optional list<EpisodeOfCare_StatusHistory> statusHistory,
	18 : optional list<Reference> team,
	19 : optional Narrative text,
	20 : optional list<CodeableConcept> type,
}

struct EpisodeOfCare_Diagnosis
{
	1 : required Reference condition,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional positiveInt rank,
	6 : optional CodeableConcept role,
}

struct ExpansionProfile
{
	1 : optional bool activeOnly,
	2 : optional list<ContactDetail> contact,
	3 : optional list<ResourceContainer> contained,
	4 : optional i64 _date,
	5 : optional markdown description,
	6 : optional ExpansionProfile_Designation designation,
	7 : optional code displayLanguage,
	8 : optional bool excludeNested,
	9 : optional bool excludeNotForUI,
	10 : optional bool excludePostCoordinated,
	11 : optional ExpansionProfile_ExcludedSystem excludedSystem,
	12 : optional bool experimental,
	13 : optional list<binary> extension,
	14 : optional list<ExpansionProfile_FixedVersion> fixedVersion,
	15 : optional id _id,
	16 : optional Identifier identifier,
	17 : optional uri implicitRules,
	18 : optional bool includeDefinition,
	19 : optional bool includeDesignations,
	20 : optional list<CodeableConcept> jurisdiction,
	21 : optional code language,
	22 : optional bool limitedExpansion,
	23 : optional Meta meta,
	24 : optional list<binary> modifierExtension,
	25 : optional string name,
	26 : optional string publisher,
	27 : required PublicationStatus status,
	28 : optional Narrative text,
	29 : optional uri url,
	30 : optional list<UsageContext> useContext,
	31 : optional string version,
}

struct ExplanationOfBenefit
{
	1 : optional ExplanationOfBenefit_Accident accident,
	2 : optional list<ExplanationOfBenefit_AddItem> addItem,
	3 : optional list<ExplanationOfBenefit_BenefitBalance> benefitBalance,
	4 : optional Period billablePeriod,
	5 : optional list<ExplanationOfBenefit_CareTeam> careTeam,
	6 : optional Reference claim,
	7 : optional Reference claimResponse,
	8 : optional list<ResourceContainer> contained,
	9 : optional i64 created,
	10 : optional list<ExplanationOfBenefit_Diagnosis> diagnosis,
	11 : optional string disposition,
	12 : optional Period employmentImpacted,
	13 : optional Reference enterer,
	14 : optional list<binary> extension,
	15 : optional Reference facility,
	16 : optional CodeableConcept form,
	17 : optional Period hospitalization,
	18 : optional id _id,
	19 : optional list<Identifier> identifier,
	20 : optional uri implicitRules,
	21 : optional list<ExplanationOfBenefit_Information> information,
	22 : optional ExplanationOfBenefit_Insurance insurance,
	23 : optional Reference insurer,
	24 : optional list<ExplanationOfBenefit_Item> item,
	25 : optional code language,
	26 : optional Meta meta,
	27 : optional list<binary> modifierExtension,
	28 : optional Reference organization,
	29 : optional Reference originalPrescription,
	30 : optional CodeableConcept outcome,
	31 : optional Reference patient,
	32 : optional ExplanationOfBenefit_Payee payee,
	33 : optional ExplanationOfBenefit_Payment payment,
	34 : optional positiveInt precedence,
	35 : optional Reference prescription,
	36 : optional list<ExplanationOfBenefit_Procedure> procedure,
	37 : optional list<ExplanationOfBenefit_ProcessNote> processNote,
	38 : optional Reference provider,
	39 : optional Reference referral,
	40 : optional list<ExplanationOfBenefit_Related> related,
	41 : optional ExplanationOfBenefitStatus status,
	42 : optional list<CodeableConcept> subType,
	43 : optional Narrative text,
	44 : optional Money totalBenefit,
	45 : optional Money totalCost,
	46 : optional CodeableConcept type,
	47 : optional Money unallocDeductable,
}

struct ExplanationOfBenefit_Accident
{
	1 : optional i32 _date,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional Address locationAddress,
	5 : optional Reference locationReference,
	6 : optional list<binary> modifierExtension,
	7 : optional CodeableConcept type,
}

struct ExplanationOfBenefit_CareTeam
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required Reference provider,
	5 : optional CodeableConcept qualification,
	6 : optional bool responsible,
	7 : optional CodeableConcept role,
	8 : required positiveInt sequence,
}

struct ExplanationOfBenefit_Detail
{
	1 : optional list<ExplanationOfBenefit_Adjudication> adjudication,
	2 : optional CodeableConcept category,
	3 : optional list<binary> extension,
	4 : optional double factor,
	5 : optional string id,
	6 : optional list<CodeableConcept> modifier,
	7 : optional list<binary> modifierExtension,
	8 : optional Money net,
	9 : optional list<positiveInt> noteNumber,
	10 : optional list<CodeableConcept> programCode,
	11 : optional Quantity quantity,
	12 : optional CodeableConcept revenue,
	13 : required positiveInt sequence,
	14 : optional CodeableConcept _service,
	15 : optional list<ExplanationOfBenefit_SubDetail> subDetail,
	16 : required CodeableConcept type,
	17 : optional list<Reference> udi,
	18 : optional Money unitPrice,
}

struct ExplanationOfBenefit_Diagnosis
{
	1 : optional CodeableConcept diagnosisCodeableConcept,
	2 : optional Reference diagnosisReference,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional CodeableConcept packageCode,
	7 : required positiveInt sequence,
	8 : optional list<CodeableConcept> type,
}

struct ExplanationOfBenefit_Information
{
	1 : required CodeableConcept category,
	2 : optional CodeableConcept code,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional Coding reason,
	7 : required positiveInt sequence,
	8 : optional i32 timingDate,
	9 : optional Period timingPeriod,
	10 : optional Attachment valueAttachment,
	11 : optional Quantity valueQuantity,
	12 : optional Reference valueReference,
	13 : optional string valueString,
}

struct ExplanationOfBenefit_Insurance
{
	1 : optional Reference coverage,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional list<string> preAuthRef,
}

struct ExplanationOfBenefit_Item
{
	1 : optional list<ExplanationOfBenefit_Adjudication> adjudication,
	2 : optional CodeableConcept bodySite,
	3 : optional list<positiveInt> careTeamLinkId,
	4 : optional CodeableConcept category,
	5 : optional list<ExplanationOfBenefit_Detail> detail,
	6 : optional list<positiveInt> diagnosisLinkId,
	7 : optional list<Reference> encounter,
	8 : optional list<binary> extension,
	9 : optional double factor,
	10 : optional string id,
	11 : optional list<positiveInt> informationLinkId,
	12 : optional Address locationAddress,
	13 : optional CodeableConcept locationCodeableConcept,
	14 : optional Reference locationReference,
	15 : optional list<CodeableConcept> modifier,
	16 : optional list<binary> modifierExtension,
	17 : optional Money net,
	18 : optional list<positiveInt> noteNumber,
	19 : optional list<positiveInt> procedureLinkId,
	20 : optional list<CodeableConcept> programCode,
	21 : optional Quantity quantity,
	22 : optional CodeableConcept revenue,
	23 : required positiveInt sequence,
	24 : optional CodeableConcept _service,
	25 : optional i32 servicedDate,
	26 : optional Period servicedPeriod,
	27 : optional list<CodeableConcept> subSite,
	28 : optional list<Reference> udi,
	29 : optional Money unitPrice,
}

struct ExplanationOfBenefit_Payee
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional Reference party,
	5 : optional CodeableConcept resourceType,
	6 : optional CodeableConcept type,
}

struct ExplanationOfBenefit_Payment
{
	1 : optional Money adjustment,
	2 : optional CodeableConcept adjustmentReason,
	3 : optional Money amount,
	4 : optional i32 _date,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional Identifier identifier,
	8 : optional list<binary> modifierExtension,
	9 : optional CodeableConcept type,
}

struct ExplanationOfBenefit_Procedure
{
	1 : optional i64 _date,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional CodeableConcept procedureCodeableConcept,
	6 : optional Reference procedureReference,
	7 : required positiveInt sequence,
}

struct ExplanationOfBenefit_Related
{
	1 : optional Reference claim,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Identifier reference,
	6 : optional CodeableConcept relationship,
}

struct ExplanationOfBenefit_SubDetail
{
	1 : optional list<ExplanationOfBenefit_Adjudication> adjudication,
	2 : optional CodeableConcept category,
	3 : optional list<binary> extension,
	4 : optional double factor,
	5 : optional string id,
	6 : optional list<CodeableConcept> modifier,
	7 : optional list<binary> modifierExtension,
	8 : optional Money net,
	9 : optional list<positiveInt> noteNumber,
	10 : optional list<CodeableConcept> programCode,
	11 : optional Quantity quantity,
	12 : optional CodeableConcept revenue,
	13 : required positiveInt sequence,
	14 : optional CodeableConcept _service,
	15 : required CodeableConcept type,
	16 : optional list<Reference> udi,
	17 : optional Money unitPrice,
}

struct Extension
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required UnspecifiedType url,
	4 : optional Address valueAddress,
	5 : optional Age valueAge,
	6 : optional Annotation valueAnnotation,
	7 : optional Attachment valueAttachment,
	8 : optional binary valueBase64Binary,
	9 : optional bool valueBoolean,
	10 : optional code valueCode,
	11 : optional CodeableConcept valueCodeableConcept,
	12 : optional Coding valueCoding,
	13 : optional ContactPoint valueContactPoint,
	14 : optional Count valueCount,
	15 : optional i32 valueDate,
	16 : optional i64 valueDateTime,
	17 : optional double valueDecimal,
	18 : optional Distance valueDistance,
	19 : optional Duration valueDuration,
	20 : optional HumanName valueHumanName,
	21 : optional id valueId,
	22 : optional Identifier valueIdentifier,
	23 : optional instant valueInstant,
	24 : optional i64 valueInteger,
	25 : optional markdown valueMarkdown,
	26 : optional Meta valueMeta,
	27 : optional Money valueMoney,
	28 : optional oid valueOid,
	29 : optional Period valuePeriod,
	30 : optional positiveInt valuePositiveInt,
	31 : optional Quantity valueQuantity,
	32 : optional Range valueRange,
	33 : optional Ratio valueRatio,
	34 : optional Reference valueReference,
	35 : optional SampledData valueSampledData,
	36 : optional Signature valueSignature,
	37 : optional string valueString,
	38 : optional time valueTime,
	39 : optional Timing valueTiming,
	40 : optional int32 valueUnsignedInt,
	41 : optional uri valueUri,
}

struct FamilyMemberHistory
{
	1 : optional Age ageAge,
	2 : optional Range ageRange,
	3 : optional string ageString,
	4 : optional i32 bornDate,
	5 : optional Period bornPeriod,
	6 : optional string bornString,
	7 : optional list<FamilyMemberHistory_Condition> condition,
	8 : optional list<ResourceContainer> contained,
	9 : optional i64 _date,
	10 : optional Age deceasedAge,
	11 : optional bool deceasedBoolean,
	12 : optional i32 deceasedDate,
	13 : optional Range deceasedRange,
	14 : optional string deceasedString,
	15 : optional list<Reference> definition,
	16 : optional bool estimatedAge,
	17 : optional list<binary> extension,
	18 : optional AdministrativeGender gender,
	19 : optional id _id,
	20 : optional list<Identifier> identifier,
	21 : optional uri implicitRules,
	22 : optional code language,
	23 : optional Meta meta,
	24 : optional list<binary> modifierExtension,
	25 : optional string name,
	26 : optional bool notDone,
	27 : optional CodeableConcept notDoneReason,
	28 : optional list<Annotation> note,
	29 : required Reference patient,
	30 : optional list<CodeableConcept> reasonCode,
	31 : optional list<Reference> reasonReference,
	32 : required CodeableConcept relationship,
	33 : required FamilyHistoryStatus status,
	34 : optional Narrative text,
}

struct FamilyMemberHistory_Condition
{
	1 : required CodeableConcept code,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional list<Annotation> note,
	6 : optional Age onsetAge,
	7 : optional Period onsetPeriod,
	8 : optional Range onsetRange,
	9 : optional string onsetString,
	10 : optional CodeableConcept outcome,
}

struct Flag
{
	1 : optional Reference author,
	2 : optional CodeableConcept category,
	3 : required CodeableConcept code,
	4 : optional list<ResourceContainer> contained,
	5 : optional Reference encounter,
	6 : optional list<binary> extension,
	7 : optional id _id,
	8 : optional list<Identifier> identifier,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : optional Period period,
	14 : required FlagStatus status,
	15 : required Reference subject,
	16 : optional Narrative text,
}

struct Goal
{
	1 : optional list<Reference> addresses,
	2 : optional list<CodeableConcept> category,
	3 : optional list<ResourceContainer> contained,
	4 : required CodeableConcept description,
	5 : optional Reference expressedBy,
	6 : optional list<binary> extension,
	7 : optional id _id,
	8 : optional list<Identifier> identifier,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : optional list<Annotation> note,
	14 : optional list<CodeableConcept> outcomeCode,
	15 : optional list<Reference> outcomeReference,
	16 : optional CodeableConcept priority,
	17 : optional CodeableConcept startCodeableConcept,
	18 : optional i32 startDate,
	19 : required GoalStatus status,
	20 : optional i32 statusDate,
	21 : optional string statusReason,
	22 : optional Reference subject,
	23 : optional Goal_Target target,
	24 : optional Narrative text,
}

struct GraphDefinition
{
	1 : optional list<ContactDetail> contact,
	2 : optional list<ResourceContainer> contained,
	3 : optional i64 _date,
	4 : optional markdown description,
	5 : optional bool experimental,
	6 : optional list<binary> extension,
	7 : optional id _id,
	8 : optional uri implicitRules,
	9 : optional list<CodeableConcept> jurisdiction,
	10 : optional code language,
	11 : optional list<GraphDefinition_Link> link,
	12 : optional Meta meta,
	13 : optional list<binary> modifierExtension,
	14 : required string name,
	15 : optional uri profile,
	16 : optional string publisher,
	17 : optional markdown purpose,
	18 : required ResourceType start,
	19 : required PublicationStatus status,
	20 : optional Narrative text,
	21 : optional uri url,
	22 : optional list<UsageContext> useContext,
	23 : optional string version,
}

struct GraphDefinition_Link
{
	1 : optional string description,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional string max,
	5 : optional i64 min,
	6 : optional list<binary> modifierExtension,
	7 : required string path,
	8 : optional string sliceName,
	9 : required list<GraphDefinition_Target> target,
}

struct GraphDefinition_Target
{
	1 : optional list<GraphDefinition_Compartment> compartment,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<GraphDefinition_Link> link,
	5 : optional list<binary> modifierExtension,
	6 : optional uri profile,
	7 : required ResourceType type,
}

struct Group
{
	1 : optional bool active,
	2 : required bool actual,
	3 : optional list<Group_Characteristic> characteristic,
	4 : optional CodeableConcept code,
	5 : optional list<ResourceContainer> contained,
	6 : optional list<binary> extension,
	7 : optional id _id,
	8 : optional list<Identifier> identifier,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional list<Group_Member> member,
	12 : optional Meta meta,
	13 : optional list<binary> modifierExtension,
	14 : optional string name,
	15 : optional int32 quantity,
	16 : optional Narrative text,
	17 : required GroupType type,
}

struct Group_Member
{
	1 : required Reference entity,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional bool inactive,
	5 : optional list<binary> modifierExtension,
	6 : optional Period period,
}

struct GuidanceResponse
{
	1 : optional list<ResourceContainer> contained,
	2 : optional Reference context,
	3 : optional list<DataRequirement> dataRequirement,
	4 : optional list<Reference> evaluationMessage,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional Identifier identifier,
	8 : optional uri implicitRules,
	9 : optional code language,
	10 : optional Meta meta,
	11 : optional list<binary> modifierExtension,
	12 : required Reference module,
	13 : optional list<Annotation> note,
	14 : optional i64 occurrenceDateTime,
	15 : optional Reference outputParameters,
	16 : optional Reference performer,
	17 : optional CodeableConcept reasonCodeableConcept,
	18 : optional Reference reasonReference,
	19 : optional id requestId,
	20 : optional Reference result,
	21 : required GuidanceResponseStatus status,
	22 : optional Reference subject,
	23 : optional Narrative text,
}

struct HealthcareService
{
	1 : optional bool active,
	2 : optional bool appointmentRequired,
	3 : optional string availabilityExceptions,
	4 : optional list<HealthcareService_AvailableTime> availableTime,
	5 : optional CodeableConcept category,
	6 : optional list<CodeableConcept> characteristic,
	7 : optional string comment,
	8 : optional list<ResourceContainer> contained,
	9 : optional list<Reference> coverageArea,
	10 : optional CodeableConcept eligibility,
	11 : optional string eligibilityNote,
	12 : optional list<Reference> endpoint,
	13 : optional list<binary> extension,
	14 : optional string extraDetails,
	15 : optional id _id,
	16 : optional list<Identifier> identifier,
	17 : optional uri implicitRules,
	18 : optional code language,
	19 : optional list<Reference> location,
	20 : optional Meta meta,
	21 : optional list<binary> modifierExtension,
	22 : optional string name,
	23 : optional list<HealthcareService_NotAvailable> notAvailable,
	24 : optional Attachment photo,
	25 : optional list<string> programName,
	26 : optional Reference providedBy,
	27 : optional list<CodeableConcept> referralMethod,
	28 : optional list<CodeableConcept> serviceProvisionCode,
	29 : optional list<CodeableConcept> specialty,
	30 : optional list<ContactPoint> telecom,
	31 : optional Narrative text,
	32 : optional list<CodeableConcept> type,
}

struct Identifier
{
	1 : optional Reference assigner,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional Period period,
	5 : optional uri system,
	6 : optional CodeableConcept type,
	7 : optional IdentifierUse use,
	8 : optional string value,
}

struct ImagingManifest
{
	1 : optional Reference author,
	2 : optional i64 authoringTime,
	3 : optional list<ResourceContainer> contained,
	4 : optional string description,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional Identifier identifier,
	8 : optional uri implicitRules,
	9 : optional code language,
	10 : optional Meta meta,
	11 : optional list<binary> modifierExtension,
	12 : required Reference patient,
	13 : required list<ImagingManifest_Study> study,
	14 : optional Narrative text,
}

struct ImagingManifest_Series
{
	1 : optional list<Reference> endpoint,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required list<ImagingManifest_Instance> instance,
	5 : optional list<binary> modifierExtension,
	6 : required oid uid,
}

struct ImagingManifest_Study
{
	1 : optional list<Reference> endpoint,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional Reference imagingStudy,
	5 : optional list<binary> modifierExtension,
	6 : required list<ImagingManifest_Series> series,
	7 : required oid uid,
}

struct ImagingStudy
{
	1 : optional Identifier accession,
	2 : optional InstanceAvailability availability,
	3 : optional list<Reference> basedOn,
	4 : optional list<ResourceContainer> contained,
	5 : optional Reference context,
	6 : optional string description,
	7 : optional list<Reference> endpoint,
	8 : optional list<binary> extension,
	9 : optional id _id,
	10 : optional list<Identifier> identifier,
	11 : optional uri implicitRules,
	12 : optional list<Reference> interpreter,
	13 : optional code language,
	14 : optional Meta meta,
	15 : optional list<Coding> modalityList,
	16 : optional list<binary> modifierExtension,
	17 : optional int32 numberOfInstances,
	18 : optional int32 numberOfSeries,
	19 : required Reference patient,
	20 : optional list<CodeableConcept> procedureCode,
	21 : optional list<Reference> procedureReference,
	22 : optional CodeableConcept reason,
	23 : optional Reference referrer,
	24 : optional list<ImagingStudy_Series> series,
	25 : optional i64 started,
	26 : optional Narrative text,
	27 : required oid uid,
}

struct ImagingStudy_Series
{
	1 : optional InstanceAvailability availability,
	2 : optional Coding bodySite,
	3 : optional string description,
	4 : optional list<Reference> endpoint,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional list<ImagingStudy_Instance> instance,
	8 : optional Coding laterality,
	9 : required Coding modality,
	10 : optional list<binary> modifierExtension,
	11 : optional int32 number,
	12 : optional int32 numberOfInstances,
	13 : optional list<Reference> performer,
	14 : optional i64 started,
	15 : required oid uid,
}

struct Immunization
{
	1 : optional list<ResourceContainer> contained,
	2 : optional i64 _date,
	3 : optional Quantity doseQuantity,
	4 : optional Reference encounter,
	5 : optional i32 expirationDate,
	6 : optional Immunization_Explanation explanation,
	7 : optional list<binary> extension,
	8 : optional id _id,
	9 : optional list<Identifier> identifier,
	10 : optional uri implicitRules,
	11 : optional code language,
	12 : optional Reference location,
	13 : optional string lotNumber,
	14 : optional Reference manufacturer,
	15 : optional Meta meta,
	16 : optional list<binary> modifierExtension,
	17 : required bool notGiven,
	18 : optional list<Annotation> note,
	19 : required Reference patient,
	20 : optional list<Immunization_Practitioner> practitioner,
	21 : required bool primarySource,
	22 : optional list<Immunization_Reaction> reaction,
	23 : optional CodeableConcept reportOrigin,
	24 : optional CodeableConcept route,
	25 : optional CodeableConcept site,
	26 : required ImmunizationStatusCodes status,
	27 : optional Narrative text,
	28 : optional list<Immunization_VaccinationProtocol> vaccinationProtocol,
	29 : required CodeableConcept vaccineCode,
}

struct Immunization_Practitioner
{
	1 : required Reference actor,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional CodeableConcept role,
}

struct Immunization_Reaction
{
	1 : optional i64 _date,
	2 : optional Reference detail,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional bool reported,
}

struct Immunization_VaccinationProtocol
{
	1 : optional Reference authority,
	2 : optional string description,
	3 : optional positiveInt doseSequence,
	4 : required CodeableConcept doseStatus,
	5 : optional CodeableConcept doseStatusReason,
	6 : optional list<binary> extension,
	7 : optional string id,
	8 : optional list<binary> modifierExtension,
	9 : optional string series,
	10 : optional positiveInt seriesDoses,
	11 : required list<CodeableConcept> targetDisease,
}

struct ImmunizationRecommendation
{
	1 : optional list<ResourceContainer> contained,
	2 : optional list<binary> extension,
	3 : optional id _id,
	4 : optional list<Identifier> identifier,
	5 : optional uri implicitRules,
	6 : optional code language,
	7 : optional Meta meta,
	8 : optional list<binary> modifierExtension,
	9 : required Reference patient,
	10 : required list<ImmunizationRecommendation_Recommendation> recommendation,
	11 : optional Narrative text,
}

struct ImmunizationRecommendation_Protocol
{
	1 : optional Reference authority,
	2 : optional string description,
	3 : optional positiveInt doseSequence,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
	7 : optional string series,
}

struct ImmunizationRecommendation_Recommendation
{
	1 : required i64 _date,
	2 : optional list<ImmunizationRecommendation_DateCriterion> dateCriterion,
	3 : optional positiveInt doseNumber,
	4 : optional list<binary> extension,
	5 : required CodeableConcept forecastStatus,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
	8 : optional ImmunizationRecommendation_Protocol protocol,
	9 : optional list<Reference> supportingImmunization,
	10 : optional list<Reference> supportingPatientInformation,
	11 : optional CodeableConcept targetDisease,
	12 : optional CodeableConcept vaccineCode,
}

struct ImplementationGuide
{
	1 : optional list<uri> _binary,
	2 : optional list<ContactDetail> contact,
	3 : optional list<ResourceContainer> contained,
	4 : optional markdown copyright,
	5 : optional i64 _date,
	6 : optional list<ImplementationGuide_Dependency> dependency,
	7 : optional markdown description,
	8 : optional bool experimental,
	9 : optional list<binary> extension,
	10 : optional id fhirVersion,
	11 : optional list<ImplementationGuide_Global> global,
	12 : optional id _id,
	13 : optional uri implicitRules,
	14 : optional list<CodeableConcept> jurisdiction,
	15 : optional code language,
	16 : optional Meta meta,
	17 : optional list<binary> modifierExtension,
	18 : required string name,
	19 : optional list<ImplementationGuide_Package> package,
	20 : optional ImplementationGuide_Page page,
	21 : optional string publisher,
	22 : required PublicationStatus status,
	23 : optional Narrative text,
	24 : required uri url,
	25 : optional list<UsageContext> useContext,
	26 : optional string version,
}

struct ImplementationGuide_Global
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required Reference profile,
	5 : required ResourceType type,
}

struct ImplementationGuide_Package
{
	1 : optional string description,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required string name,
	6 : required list<ImplementationGuide_Resource> resource,
}

struct ImplementationGuide_Resource
{
	1 : optional string acronym,
	2 : optional string description,
	3 : required bool example,
	4 : optional Reference exampleFor,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
	8 : optional string name,
	9 : optional Reference sourceReference,
	10 : optional uri sourceUri,
}

struct Library
{
	1 : optional i32 approvalDate,
	2 : optional list<ContactDetail> contact,
	3 : optional list<ResourceContainer> contained,
	4 : optional list<Attachment> content,
	5 : optional list<Contributor> contributor,
	6 : optional markdown copyright,
	7 : optional list<DataRequirement> dataRequirement,
	8 : optional i64 _date,
	9 : optional markdown description,
	10 : optional Period effectivePeriod,
	11 : optional bool experimental,
	12 : optional list<binary> extension,
	13 : optional id _id,
	14 : optional list<Identifier> identifier,
	15 : optional uri implicitRules,
	16 : optional list<CodeableConcept> jurisdiction,
	17 : optional code language,
	18 : optional i32 lastReviewDate,
	19 : optional Meta meta,
	20 : optional list<binary> modifierExtension,
	21 : optional string name,
	22 : optional list<ParameterDefinition> parameter,
	23 : optional string publisher,
	24 : optional markdown purpose,
	25 : optional list<RelatedArtifact> relatedArtifact,
	26 : required PublicationStatus status,
	27 : optional Narrative text,
	28 : optional string title,
	29 : optional list<CodeableConcept> topic,
	30 : required CodeableConcept type,
	31 : optional uri url,
	32 : optional string usage,
	33 : optional list<UsageContext> useContext,
	34 : optional string version,
}

struct Linkage
{
	1 : optional bool active,
	2 : optional Reference author,
	3 : optional list<ResourceContainer> contained,
	4 : optional list<binary> extension,
	5 : optional id _id,
	6 : optional uri implicitRules,
	7 : required list<Linkage_Item> item,
	8 : optional code language,
	9 : optional Meta meta,
	10 : optional list<binary> modifierExtension,
	11 : optional Narrative text,
}

struct Linkage_Item
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required Reference resource,
	5 : required LinkageType type,
}

struct List
{
	1 : optional CodeableConcept code,
	2 : optional list<ResourceContainer> contained,
	3 : optional i64 _date,
	4 : optional CodeableConcept emptyReason,
	5 : optional Reference encounter,
	6 : optional list<List_Entry> entry,
	7 : optional list<binary> extension,
	8 : optional id _id,
	9 : optional list<Identifier> identifier,
	10 : optional uri implicitRules,
	11 : optional code language,
	12 : optional Meta meta,
	13 : required ListMode mode,
	14 : optional list<binary> modifierExtension,
	15 : optional list<Annotation> note,
	16 : optional CodeableConcept orderedBy,
	17 : optional Reference source,
	18 : required ListStatus status,
	19 : optional Reference subject,
	20 : optional Narrative text,
	21 : optional string title,
}

struct List_Entry
{
	1 : optional i64 _date,
	2 : optional bool deleted,
	3 : optional list<binary> extension,
	4 : optional CodeableConcept flag,
	5 : optional string id,
	6 : required Reference item,
	7 : optional list<binary> modifierExtension,
}

struct Location
{
	1 : optional Address address,
	2 : optional list<string> alias,
	3 : optional list<ResourceContainer> contained,
	4 : optional string description,
	5 : optional list<Reference> endpoint,
	6 : optional list<binary> extension,
	7 : optional id _id,
	8 : optional list<Identifier> identifier,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional Reference managingOrganization,
	12 : optional Meta meta,
	13 : optional LocationMode mode,
	14 : optional list<binary> modifierExtension,
	15 : optional string name,
	16 : optional Coding operationalStatus,
	17 : optional Reference partOf,
	18 : optional CodeableConcept physicalType,
	19 : optional Location_Position position,
	20 : optional LocationStatus status,
	21 : optional list<ContactPoint> telecom,
	22 : optional Narrative text,
	23 : optional CodeableConcept type,
}

struct Measure
{
	1 : optional i32 approvalDate,
	2 : optional markdown clinicalRecommendationStatement,
	3 : optional CodeableConcept compositeScoring,
	4 : optional list<ContactDetail> contact,
	5 : optional list<ResourceContainer> contained,
	6 : optional list<Contributor> contributor,
	7 : optional markdown copyright,
	8 : optional i64 _date,
	9 : optional list<markdown> definition,
	10 : optional markdown description,
	11 : optional markdown disclaimer,
	12 : optional Period effectivePeriod,
	13 : optional bool experimental,
	14 : optional list<binary> extension,
	15 : optional list<Measure_Group> group,
	16 : optional markdown guidance,
	17 : optional id _id,
	18 : optional list<Identifier> identifier,
	19 : optional uri implicitRules,
	20 : optional string improvementNotation,
	21 : optional list<CodeableConcept> jurisdiction,
	22 : optional code language,
	23 : optional i32 lastReviewDate,
	24 : optional list<Reference> library,
	25 : optional Meta meta,
	26 : optional list<binary> modifierExtension,
	27 : optional string name,
	28 : optional string publisher,
	29 : optional markdown purpose,
	30 : optional string rateAggregation,
	31 : optional markdown rationale,
	32 : optional list<RelatedArtifact> relatedArtifact,
	33 : optional string riskAdjustment,
	34 : optional CodeableConcept scoring,
	35 : optional string set,
	36 : required PublicationStatus status,
	37 : optional list<Measure_SupplementalData> supplementalData,
	38 : optional Narrative text,
	39 : optional string title,
	40 : optional list<CodeableConcept> topic,
	41 : optional list<CodeableConcept> type,
	42 : optional uri url,
	43 : optional string usage,
	44 : optional list<UsageContext> useContext,
	45 : optional string version,
}

struct Measure_Group
{
	1 : optional string description,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required Identifier identifier,
	5 : optional list<binary> modifierExtension,
	6 : optional string name,
	7 : optional list<Measure_Population> population,
	8 : optional list<Measure_Stratifier> stratifier,
}

struct Measure_Population
{
	1 : optional CodeableConcept code,
	2 : required string criteria,
	3 : optional string description,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional Identifier identifier,
	7 : optional list<binary> modifierExtension,
	8 : optional string name,
}

struct Measure_Stratifier
{
	1 : optional string criteria,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional Identifier identifier,
	5 : optional list<binary> modifierExtension,
	6 : optional string path,
}

struct Measure_SupplementalData
{
	1 : optional string criteria,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional Identifier identifier,
	5 : optional list<binary> modifierExtension,
	6 : optional string path,
	7 : optional list<CodeableConcept> usage,
}

struct MeasureReport
{
	1 : optional list<ResourceContainer> contained,
	2 : optional i64 _date,
	3 : optional Reference evaluatedResources,
	4 : optional list<binary> extension,
	5 : optional list<MeasureReport_Group> group,
	6 : optional id _id,
	7 : optional Identifier identifier,
	8 : optional uri implicitRules,
	9 : optional code language,
	10 : required Reference measure,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : optional Reference patient,
	14 : required Period period,
	15 : optional Reference reportingOrganization,
	16 : required MeasureReportStatus status,
	17 : optional Narrative text,
	18 : required MeasureReportType type,
}

struct MeasureReport_Group
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required Identifier identifier,
	4 : optional double measureScore,
	5 : optional list<binary> modifierExtension,
	6 : optional list<MeasureReport_Population> population,
	7 : optional list<MeasureReport_Stratifier> stratifier,
}

struct MeasureReport_Population
{
	1 : optional CodeableConcept code,
	2 : optional i64 count,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional Identifier identifier,
	6 : optional list<binary> modifierExtension,
	7 : optional Reference patients,
}

struct MeasureReport_Population1
{
	1 : optional CodeableConcept code,
	2 : optional i64 count,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional Identifier identifier,
	6 : optional list<binary> modifierExtension,
	7 : optional Reference patients,
}

struct MeasureReport_Stratifier
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional Identifier identifier,
	4 : optional list<binary> modifierExtension,
	5 : optional list<MeasureReport_Stratum> stratum,
}

struct MeasureReport_Stratum
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional double measureScore,
	4 : optional list<binary> modifierExtension,
	5 : optional list<MeasureReport_Population1> population,
	6 : required string value,
}

struct Media
{
	1 : optional list<Reference> basedOn,
	2 : optional CodeableConcept bodySite,
	3 : optional list<ResourceContainer> contained,
	4 : required Attachment content,
	5 : optional Reference context,
	6 : optional Reference device,
	7 : optional int32 duration,
	8 : optional list<binary> extension,
	9 : optional positiveInt frames,
	10 : optional positiveInt height,
	11 : optional id _id,
	12 : optional list<Identifier> identifier,
	13 : optional uri implicitRules,
	14 : optional code language,
	15 : optional Meta meta,
	16 : optional list<binary> modifierExtension,
	17 : optional list<Annotation> note,
	18 : optional i64 occurrenceDateTime,
	19 : optional Period occurrencePeriod,
	20 : optional Reference operator,
	21 : optional list<CodeableConcept> reasonCode,
	22 : optional Reference subject,
	23 : optional CodeableConcept subtype,
	24 : optional Narrative text,
	25 : required DigitalMediaType type,
	26 : optional CodeableConcept view,
	27 : optional positiveInt width,
}

struct Medication
{
	1 : optional CodeableConcept code,
	2 : optional list<ResourceContainer> contained,
	3 : optional list<binary> extension,
	4 : optional CodeableConcept form,
	5 : optional id _id,
	6 : optional list<Attachment> image,
	7 : optional uri implicitRules,
	8 : optional list<Medication_Ingredient> ingredient,
	9 : optional bool isBrand,
	10 : optional bool isOverTheCounter,
	11 : optional code language,
	12 : optional Reference manufacturer,
	13 : optional Meta meta,
	14 : optional list<binary> modifierExtension,
	15 : optional Medication_Package package,
	16 : optional MedicationStatus status,
	17 : optional Narrative text,
}

struct Medication_Content
{
	1 : optional Quantity amount,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional CodeableConcept itemCodeableConcept,
	5 : optional Reference itemReference,
	6 : optional list<binary> modifierExtension,
}

struct Medication_Ingredient
{
	1 : optional Ratio amount,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional bool isActive,
	5 : optional CodeableConcept itemCodeableConcept,
	6 : optional Reference itemReference,
	7 : optional list<binary> modifierExtension,
}

struct Medication_Package
{
	1 : optional list<Medication_Batch> batch,
	2 : optional CodeableConcept container,
	3 : optional list<Medication_Content> content,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
}

struct MedicationAdministration
{
	1 : optional CodeableConcept category,
	2 : optional list<ResourceContainer> contained,
	3 : optional Reference context,
	4 : optional list<Reference> definition,
	5 : optional list<Reference> device,
	6 : optional MedicationAdministration_Dosage dosage,
	7 : optional i64 effectiveDateTime,
	8 : optional Period effectivePeriod,
	9 : optional list<Reference> eventHistory,
	10 : optional list<binary> extension,
	11 : optional id _id,
	12 : optional list<Identifier> identifier,
	13 : optional uri implicitRules,
	14 : optional code language,
	15 : optional CodeableConcept medicationCodeableConcept,
	16 : optional Reference medicationReference,
	17 : optional Meta meta,
	18 : optional list<binary> modifierExtension,
	19 : optional bool notGiven,
	20 : optional list<Annotation> note,
	21 : optional list<Reference> partOf,
	22 : optional list<MedicationAdministration_Performer> performer,
	23 : optional Reference prescription,
	24 : optional list<CodeableConcept> reasonCode,
	25 : optional list<CodeableConcept> reasonNotGiven,
	26 : optional list<Reference> reasonReference,
	27 : required MedicationAdministrationStatus status,
	28 : required Reference subject,
	29 : optional list<Reference> supportingInformation,
	30 : optional Narrative text,
}

struct MedicationAdministration_Performer
{
	1 : required Reference actor,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Reference onBehalfOf,
}

struct MedicationDispense
{
	1 : optional list<Reference> authorizingPrescription,
	2 : optional CodeableConcept category,
	3 : optional list<ResourceContainer> contained,
	4 : optional Reference context,
	5 : optional Quantity daysSupply,
	6 : optional Reference destination,
	7 : optional list<Reference> detectedIssue,
	8 : optional list<Dosage> dosageInstruction,
	9 : optional list<Reference> eventHistory,
	10 : optional list<binary> extension,
	11 : optional id _id,
	12 : optional list<Identifier> identifier,
	13 : optional uri implicitRules,
	14 : optional code language,
	15 : optional CodeableConcept medicationCodeableConcept,
	16 : optional Reference medicationReference,
	17 : optional Meta meta,
	18 : optional list<binary> modifierExtension,
	19 : optional bool notDone,
	20 : optional CodeableConcept notDoneReasonCodeableConcept,
	21 : optional Reference notDoneReasonReference,
	22 : optional list<Annotation> note,
	23 : optional list<Reference> partOf,
	24 : optional list<MedicationDispense_Performer> performer,
	25 : optional Quantity quantity,
	26 : optional list<Reference> receiver,
	27 : optional MedicationDispenseStatus status,
	28 : optional Reference subject,
	29 : optional MedicationDispense_Substitution substitution,
	30 : optional list<Reference> supportingInformation,
	31 : optional Narrative text,
	32 : optional CodeableConcept type,
	33 : optional i64 whenHandedOver,
	34 : optional i64 whenPrepared,
}

struct MedicationDispense_Performer
{
	1 : required Reference actor,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Reference onBehalfOf,
}

struct MedicationDispense_Substitution
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional list<CodeableConcept> reason,
	5 : optional list<Reference> responsibleParty,
	6 : optional CodeableConcept type,
	7 : required bool wasSubstituted,
}

struct MedicationRequest
{
	1 : optional i64 authoredOn,
	2 : optional list<Reference> basedOn,
	3 : optional CodeableConcept category,
	4 : optional list<ResourceContainer> contained,
	5 : optional Reference context,
	6 : optional list<Reference> definition,
	7 : optional list<Reference> detectedIssue,
	8 : optional MedicationRequest_DispenseRequest dispenseRequest,
	9 : optional list<Dosage> dosageInstruction,
	10 : optional list<Reference> eventHistory,
	11 : optional list<binary> extension,
	12 : optional Identifier groupIdentifier,
	13 : optional id _id,
	14 : optional list<Identifier> identifier,
	15 : optional uri implicitRules,
	16 : required MedicationRequestIntent intent,
	17 : optional code language,
	18 : optional CodeableConcept medicationCodeableConcept,
	19 : optional Reference medicationReference,
	20 : optional Meta meta,
	21 : optional list<binary> modifierExtension,
	22 : optional list<Annotation> note,
	23 : optional Reference priorPrescription,
	24 : optional MedicationRequestPriority priority,
	25 : optional list<CodeableConcept> reasonCode,
	26 : optional list<Reference> reasonReference,
	27 : optional Reference recorder,
	28 : optional MedicationRequest_Requester requester,
	29 : optional MedicationRequestStatus status,
	30 : required Reference subject,
	31 : optional MedicationRequest_Substitution substitution,
	32 : optional list<Reference> supportingInformation,
	33 : optional Narrative text,
}

struct MedicationRequest_DispenseRequest
{
	1 : optional Duration expectedSupplyDuration,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional positiveInt numberOfRepeatsAllowed,
	6 : optional Reference performer,
	7 : optional Quantity quantity,
	8 : optional Period validityPeriod,
}

struct MedicationRequest_Requester
{
	1 : required Reference agent,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Reference onBehalfOf,
}

struct MedicationStatement
{
	1 : optional list<Reference> basedOn,
	2 : optional CodeableConcept category,
	3 : optional list<ResourceContainer> contained,
	4 : optional Reference context,
	5 : optional i64 dateAsserted,
	6 : optional list<Reference> derivedFrom,
	7 : optional list<Dosage> dosage,
	8 : optional i64 effectiveDateTime,
	9 : optional Period effectivePeriod,
	10 : optional list<binary> extension,
	11 : optional id _id,
	12 : optional list<Identifier> identifier,
	13 : optional uri implicitRules,
	14 : optional Reference informationSource,
	15 : optional code language,
	16 : optional CodeableConcept medicationCodeableConcept,
	17 : optional Reference medicationReference,
	18 : optional Meta meta,
	19 : optional list<binary> modifierExtension,
	20 : optional list<Annotation> note,
	21 : optional list<Reference> partOf,
	22 : optional list<CodeableConcept> reasonCode,
	23 : optional list<CodeableConcept> reasonNotTaken,
	24 : optional list<Reference> reasonReference,
	25 : required MedicationStatementStatus status,
	26 : required Reference subject,
	27 : required MedicationStatementTaken taken,
	28 : optional Narrative text,
}

struct MessageDefinition
{
	1 : optional list<MessageDefinition_AllowedResponse> allowedResponse,
	2 : optional Reference base,
	3 : optional MessageSignificanceCategory category,
	4 : optional list<ContactDetail> contact,
	5 : optional list<ResourceContainer> contained,
	6 : optional markdown copyright,
	7 : required i64 _date,
	8 : optional markdown description,
	9 : required Coding event,
	10 : optional bool experimental,
	11 : optional list<binary> extension,
	12 : optional list<MessageDefinition_Focus> focus,
	13 : optional id _id,
	14 : optional Identifier identifier,
	15 : optional uri implicitRules,
	16 : optional list<CodeableConcept> jurisdiction,
	17 : optional code language,
	18 : optional Meta meta,
	19 : optional list<binary> modifierExtension,
	20 : optional string name,
	21 : optional list<Reference> parent,
	22 : optional string publisher,
	23 : optional markdown purpose,
	24 : optional list<Reference> replaces,
	25 : optional bool responseRequired,
	26 : required PublicationStatus status,
	27 : optional Narrative text,
	28 : optional string title,
	29 : optional uri url,
	30 : optional list<UsageContext> useContext,
	31 : optional string version,
}

struct MessageDefinition_AllowedResponse
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required Reference message,
	4 : optional list<binary> modifierExtension,
	5 : optional markdown situation,
}

struct MessageDefinition_Focus
{
	1 : required ResourceType code,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional string max,
	5 : optional int32 min,
	6 : optional list<binary> modifierExtension,
	7 : optional Reference profile,
}

struct MessageHeader
{
	1 : optional Reference author,
	2 : optional list<ResourceContainer> contained,
	3 : optional list<MessageHeader_Destination> destination,
	4 : optional Reference enterer,
	5 : required Coding event,
	6 : optional list<binary> extension,
	7 : optional list<Reference> focus,
	8 : optional id _id,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : optional CodeableConcept reason,
	14 : optional Reference receiver,
	15 : optional MessageHeader_Response response,
	16 : optional Reference responsible,
	17 : optional Reference sender,
	18 : required MessageHeader_Source source,
	19 : optional Narrative text,
	20 : required instant timestamp,
}

struct MessageHeader_Destination
{
	1 : required uri endpoint,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional string name,
	6 : optional Reference target,
}

struct MessageHeader_Response
{
	1 : required ResponseType code,
	2 : optional Reference details,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : required id identifier,
	6 : optional list<binary> modifierExtension,
}

struct NamingSystem
{
	1 : optional list<ContactDetail> contact,
	2 : optional list<ResourceContainer> contained,
	3 : required i64 _date,
	4 : optional markdown description,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional uri implicitRules,
	8 : optional list<CodeableConcept> jurisdiction,
	9 : required NamingSystemType kind,
	10 : optional code language,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : required string name,
	14 : optional string publisher,
	15 : optional Reference replacedBy,
	16 : optional string responsible,
	17 : required PublicationStatus status,
	18 : optional Narrative text,
	19 : optional CodeableConcept type,
	20 : required list<NamingSystem_UniqueId> uniqueId,
	21 : optional string usage,
	22 : optional list<UsageContext> useContext,
}

struct NutritionOrder
{
	1 : optional list<Reference> allergyIntolerance,
	2 : optional list<ResourceContainer> contained,
	3 : required i64 _dateTime,
	4 : optional Reference encounter,
	5 : optional NutritionOrder_EnteralFormula enteralFormula,
	6 : optional list<CodeableConcept> excludeFoodModifier,
	7 : optional list<binary> extension,
	8 : optional list<CodeableConcept> foodPreferenceModifier,
	9 : optional id _id,
	10 : optional list<Identifier> identifier,
	11 : optional uri implicitRules,
	12 : optional code language,
	13 : optional Meta meta,
	14 : optional list<binary> modifierExtension,
	15 : optional NutritionOrder_OralDiet oralDiet,
	16 : optional Reference orderer,
	17 : required Reference patient,
	18 : optional NutritionOrderStatus status,
	19 : optional list<NutritionOrder_Supplement> supplement,
	20 : optional Narrative text,
}

struct Observation
{
	1 : optional list<Reference> basedOn,
	2 : optional CodeableConcept bodySite,
	3 : optional list<CodeableConcept> category,
	4 : required CodeableConcept code,
	5 : optional string comment,
	6 : optional list<Observation_Component> component,
	7 : optional list<ResourceContainer> contained,
	8 : optional Reference context,
	9 : optional CodeableConcept dataAbsentReason,
	10 : optional Reference device,
	11 : optional i64 effectiveDateTime,
	12 : optional Period effectivePeriod,
	13 : optional list<binary> extension,
	14 : optional id _id,
	15 : optional list<Identifier> identifier,
	16 : optional uri implicitRules,
	17 : optional CodeableConcept interpretation,
	18 : optional instant issued,
	19 : optional code language,
	20 : optional Meta meta,
	21 : optional CodeableConcept method,
	22 : optional list<binary> modifierExtension,
	23 : optional list<Reference> performer,
	24 : optional list<Observation_ReferenceRange> referenceRange,
	25 : optional list<Observation_Related> related,
	26 : optional Reference specimen,
	27 : required ObservationStatus status,
	28 : optional Reference subject,
	29 : optional Narrative text,
	30 : optional Attachment valueAttachment,
	31 : optional bool valueBoolean,
	32 : optional CodeableConcept valueCodeableConcept,
	33 : optional i64 valueDateTime,
	34 : optional Period valuePeriod,
	35 : optional Quantity valueQuantity,
	36 : optional Range valueRange,
	37 : optional Ratio valueRatio,
	38 : optional SampledData valueSampledData,
	39 : optional string valueString,
	40 : optional time valueTime,
}

struct Observation_Related
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required Reference target,
	5 : optional ObservationRelationshipType type,
}

struct OperationDefinition
{
	1 : optional Reference base,
	2 : required code _code,
	3 : optional string comment,
	4 : optional list<ContactDetail> contact,
	5 : optional list<ResourceContainer> contained,
	6 : optional i64 _date,
	7 : optional markdown description,
	8 : optional bool experimental,
	9 : optional list<binary> extension,
	10 : optional id _id,
	11 : optional bool idempotent,
	12 : optional uri implicitRules,
	13 : required bool instance,
	14 : optional list<CodeableConcept> jurisdiction,
	15 : required OperationKind kind,
	16 : optional code language,
	17 : optional Meta meta,
	18 : optional list<binary> modifierExtension,
	19 : required string name,
	20 : optional list<OperationDefinition_Overload> overload,
	21 : optional list<OperationDefinition_Parameter> parameter,
	22 : optional string publisher,
	23 : optional markdown purpose,
	24 : optional list<ResourceType> resource,
	25 : required PublicationStatus status,
	26 : required bool system,
	27 : optional Narrative text,
	28 : required bool type,
	29 : optional uri url,
	30 : optional list<UsageContext> useContext,
	31 : optional string version,
}

struct OperationDefinition_Binding
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required BindingStrength strength,
	5 : optional Reference valueSetReference,
	6 : optional uri valueSetUri,
}

struct OperationDefinition_Parameter
{
	1 : optional OperationDefinition_Binding binding,
	2 : optional string documentation,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : required string max,
	6 : required i64 min,
	7 : optional list<binary> modifierExtension,
	8 : required code name,
	9 : optional list<binary> part,
	10 : optional Reference profile,
	11 : optional SearchParamType searchType,
	12 : optional FHIRAllTypes type,
	13 : required OperationParameterUse use,
}

struct OperationOutcome
{
	1 : optional list<ResourceContainer> contained,
	2 : optional list<binary> extension,
	3 : optional id _id,
	4 : optional uri implicitRules,
	5 : required list<OperationOutcome_Issue> issue,
	6 : optional code language,
	7 : optional Meta meta,
	8 : optional list<binary> modifierExtension,
	9 : optional Narrative text,
}

struct Organization
{
	1 : optional bool active,
	2 : optional list<Address> address,
	3 : optional list<string> alias,
	4 : optional list<Organization_Contact> contact,
	5 : optional list<ResourceContainer> contained,
	6 : optional list<Reference> endpoint,
	7 : optional list<binary> extension,
	8 : optional id _id,
	9 : optional list<Identifier> identifier,
	10 : optional uri implicitRules,
	11 : optional code language,
	12 : optional Meta meta,
	13 : optional list<binary> modifierExtension,
	14 : optional string name,
	15 : optional Reference partOf,
	16 : optional list<ContactPoint> telecom,
	17 : optional Narrative text,
	18 : optional list<CodeableConcept> type,
}

struct ParameterDefinition
{
	1 : optional string documentation,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional string max,
	5 : optional i64 min,
	6 : optional code name,
	7 : optional Reference profile,
	8 : required code type,
	9 : required code use,
}

struct Parameters
{
	1 : optional id _id,
	2 : optional uri implicitRules,
	3 : optional code language,
	4 : optional Meta meta,
	5 : optional list<Parameters_Parameter> parameter,
}

struct Parameters_Parameter
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string name,
	5 : optional list<binary> part,
	6 : optional ResourceContainer resource,
	7 : optional Address valueAddress,
	8 : optional Age valueAge,
	9 : optional Annotation valueAnnotation,
	10 : optional Attachment valueAttachment,
	11 : optional binary valueBase64Binary,
	12 : optional bool valueBoolean,
	13 : optional code valueCode,
	14 : optional CodeableConcept valueCodeableConcept,
	15 : optional Coding valueCoding,
	16 : optional ContactPoint valueContactPoint,
	17 : optional Count valueCount,
	18 : optional i32 valueDate,
	19 : optional i64 valueDateTime,
	20 : optional double valueDecimal,
	21 : optional Distance valueDistance,
	22 : optional Duration valueDuration,
	23 : optional HumanName valueHumanName,
	24 : optional id valueId,
	25 : optional Identifier valueIdentifier,
	26 : optional instant valueInstant,
	27 : optional i64 valueInteger,
	28 : optional markdown valueMarkdown,
	29 : optional Meta valueMeta,
	30 : optional Money valueMoney,
	31 : optional oid valueOid,
	32 : optional Period valuePeriod,
	33 : optional positiveInt valuePositiveInt,
	34 : optional Quantity valueQuantity,
	35 : optional Range valueRange,
	36 : optional Ratio valueRatio,
	37 : optional Reference valueReference,
	38 : optional SampledData valueSampledData,
	39 : optional Signature valueSignature,
	40 : optional string valueString,
	41 : optional time valueTime,
	42 : optional Timing valueTiming,
	43 : optional int32 valueUnsignedInt,
	44 : optional uri valueUri,
}

struct Patient
{
	1 : optional bool active,
	2 : optional list<Address> address,
	3 : optional Patient_Animal animal,
	4 : optional i32 birthDate,
	5 : optional list<Patient_Communication> communication,
	6 : optional list<Patient_Contact> contact,
	7 : optional list<ResourceContainer> contained,
	8 : optional bool deceasedBoolean,
	9 : optional i64 deceasedDateTime,
	10 : optional list<binary> extension,
	11 : optional AdministrativeGender gender,
	12 : optional list<Reference> generalPractitioner,
	13 : optional id _id,
	14 : optional list<Identifier> identifier,
	15 : optional uri implicitRules,
	16 : optional code language,
	17 : optional list<Patient_Link> link,
	18 : optional Reference managingOrganization,
	19 : optional CodeableConcept maritalStatus,
	20 : optional Meta meta,
	21 : optional list<binary> modifierExtension,
	22 : optional bool multipleBirthBoolean,
	23 : optional i64 multipleBirthInteger,
	24 : optional list<HumanName> name,
	25 : optional list<Attachment> photo,
	26 : optional list<ContactPoint> telecom,
	27 : optional Narrative text,
}

struct Patient_Contact
{
	1 : optional Address address,
	2 : optional list<binary> extension,
	3 : optional AdministrativeGender gender,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional HumanName name,
	7 : optional Reference organization,
	8 : optional Period period,
	9 : optional list<CodeableConcept> relationship,
	10 : optional list<ContactPoint> telecom,
}

struct Patient_Link
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required Reference other,
	5 : required LinkType type,
}

struct PaymentNotice
{
	1 : optional list<ResourceContainer> contained,
	2 : optional i64 created,
	3 : optional list<binary> extension,
	4 : optional id _id,
	5 : optional list<Identifier> identifier,
	6 : optional uri implicitRules,
	7 : optional code language,
	8 : optional Meta meta,
	9 : optional list<binary> modifierExtension,
	10 : optional Reference organization,
	11 : optional CodeableConcept paymentStatus,
	12 : optional Reference provider,
	13 : optional Reference request,
	14 : optional Reference response,
	15 : optional FinancialResourceStatusCodes status,
	16 : optional i32 statusDate,
	17 : optional Reference target,
	18 : optional Narrative text,
}

struct PaymentReconciliation
{
	1 : optional list<ResourceContainer> contained,
	2 : optional i64 created,
	3 : optional list<PaymentReconciliation_Detail> detail,
	4 : optional string disposition,
	5 : optional list<binary> extension,
	6 : optional CodeableConcept form,
	7 : optional id _id,
	8 : optional list<Identifier> identifier,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : optional Reference organization,
	14 : optional CodeableConcept outcome,
	15 : optional Period period,
	16 : optional list<PaymentReconciliation_ProcessNote> processNote,
	17 : optional Reference request,
	18 : optional Reference requestOrganization,
	19 : optional Reference requestProvider,
	20 : optional FinancialResourceStatusCodes status,
	21 : optional Narrative text,
	22 : optional Money total,
}

struct PaymentReconciliation_Detail
{
	1 : optional Money amount,
	2 : optional i32 _date,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional Reference payee,
	7 : optional Reference request,
	8 : optional Reference response,
	9 : optional Reference submitter,
	10 : required CodeableConcept type,
}

struct Person
{
	1 : optional bool active,
	2 : optional list<Address> address,
	3 : optional i32 birthDate,
	4 : optional list<ResourceContainer> contained,
	5 : optional list<binary> extension,
	6 : optional AdministrativeGender gender,
	7 : optional id _id,
	8 : optional list<Identifier> identifier,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional list<Person_Link> link,
	12 : optional Reference managingOrganization,
	13 : optional Meta meta,
	14 : optional list<binary> modifierExtension,
	15 : optional list<HumanName> name,
	16 : optional Attachment photo,
	17 : optional list<ContactPoint> telecom,
	18 : optional Narrative text,
}

struct Person_Link
{
	1 : optional IdentityAssuranceLevel assurance,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required Reference target,
}

struct PlanDefinition
{
	1 : optional list<PlanDefinition_Action> action,
	2 : optional i32 approvalDate,
	3 : optional list<ContactDetail> contact,
	4 : optional list<ResourceContainer> contained,
	5 : optional list<Contributor> contributor,
	6 : optional markdown copyright,
	7 : optional i64 _date,
	8 : optional markdown description,
	9 : optional Period effectivePeriod,
	10 : optional bool experimental,
	11 : optional list<binary> extension,
	12 : optional list<PlanDefinition_Goal> goal,
	13 : optional id _id,
	14 : optional list<Identifier> identifier,
	15 : optional uri implicitRules,
	16 : optional list<CodeableConcept> jurisdiction,
	17 : optional code language,
	18 : optional i32 lastReviewDate,
	19 : optional list<Reference> library,
	20 : optional Meta meta,
	21 : optional list<binary> modifierExtension,
	22 : optional string name,
	23 : optional string publisher,
	24 : optional markdown purpose,
	25 : optional list<RelatedArtifact> relatedArtifact,
	26 : required PublicationStatus status,
	27 : optional Narrative text,
	28 : optional string title,
	29 : optional list<CodeableConcept> topic,
	30 : optional CodeableConcept type,
	31 : optional uri url,
	32 : optional string usage,
	33 : optional list<UsageContext> useContext,
	34 : optional string version,
}

struct PlanDefinition_Action
{
	1 : optional list<binary> action,
	2 : optional ActionCardinalityBehavior cardinalityBehavior,
	3 : optional list<CodeableConcept> code,
	4 : optional list<PlanDefinition_Condition> condition,
	5 : optional Reference definition,
	6 : optional string description,
	7 : optional list<RelatedArtifact> documentation,
	8 : optional list<PlanDefinition_DynamicValue> dynamicValue,
	9 : optional list<binary> extension,
	10 : optional list<id> goalId,
	11 : optional ActionGroupingBehavior groupingBehavior,
	12 : optional string id,
	13 : optional list<DataRequirement> input,
	14 : optional string label,
	15 : optional list<binary> modifierExtension,
	16 : optional list<DataRequirement> output,
	17 : optional list<PlanDefinition_Participant> participant,
	18 : optional ActionPrecheckBehavior precheckBehavior,
	19 : optional list<CodeableConcept> reason,
	20 : optional list<PlanDefinition_RelatedAction> relatedAction,
	21 : optional ActionRequiredBehavior requiredBehavior,
	22 : optional ActionSelectionBehavior selectionBehavior,
	23 : optional string textEquivalent,
	24 : optional i64 timingDateTime,
	25 : optional Duration timingDuration,
	26 : optional Period timingPeriod,
	27 : optional Range timingRange,
	28 : optional Timing timingTiming,
	29 : optional string title,
	30 : optional Reference transform,
	31 : optional list<TriggerDefinition> triggerDefinition,
	32 : optional Coding type,
}

struct PlanDefinition_Goal
{
	1 : optional list<CodeableConcept> addresses,
	2 : optional CodeableConcept category,
	3 : required CodeableConcept description,
	4 : optional list<RelatedArtifact> documentation,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
	8 : optional CodeableConcept priority,
	9 : optional CodeableConcept start,
	10 : optional list<PlanDefinition_Target> target,
}

struct Practitioner
{
	1 : optional bool active,
	2 : optional list<Address> address,
	3 : optional i32 birthDate,
	4 : optional list<CodeableConcept> communication,
	5 : optional list<ResourceContainer> contained,
	6 : optional list<binary> extension,
	7 : optional AdministrativeGender gender,
	8 : optional id _id,
	9 : optional list<Identifier> identifier,
	10 : optional uri implicitRules,
	11 : optional code language,
	12 : optional Meta meta,
	13 : optional list<binary> modifierExtension,
	14 : optional list<HumanName> name,
	15 : optional list<Attachment> photo,
	16 : optional list<Practitioner_Qualification> qualification,
	17 : optional list<ContactPoint> telecom,
	18 : optional Narrative text,
}

struct Practitioner_Qualification
{
	1 : required CodeableConcept code,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<Identifier> identifier,
	5 : optional Reference issuer,
	6 : optional list<binary> modifierExtension,
	7 : optional Period period,
}

struct PractitionerRole
{
	1 : optional bool active,
	2 : optional string availabilityExceptions,
	3 : optional list<PractitionerRole_AvailableTime> availableTime,
	4 : optional list<CodeableConcept> code,
	5 : optional list<ResourceContainer> contained,
	6 : optional list<Reference> endpoint,
	7 : optional list<binary> extension,
	8 : optional list<Reference> healthcareService,
	9 : optional id _id,
	10 : optional list<Identifier> identifier,
	11 : optional uri implicitRules,
	12 : optional code language,
	13 : optional list<Reference> location,
	14 : optional Meta meta,
	15 : optional list<binary> modifierExtension,
	16 : optional list<PractitionerRole_NotAvailable> notAvailable,
	17 : optional Reference organization,
	18 : optional Period period,
	19 : optional Reference practitioner,
	20 : optional list<CodeableConcept> specialty,
	21 : optional list<ContactPoint> telecom,
	22 : optional Narrative text,
}

struct Procedure
{
	1 : optional list<Reference> basedOn,
	2 : optional list<CodeableConcept> bodySite,
	3 : optional CodeableConcept category,
	4 : optional CodeableConcept code,
	5 : optional list<CodeableConcept> complication,
	6 : optional list<Reference> complicationDetail,
	7 : optional list<ResourceContainer> contained,
	8 : optional Reference context,
	9 : optional list<Reference> definition,
	10 : optional list<binary> extension,
	11 : optional list<Procedure_FocalDevice> focalDevice,
	12 : optional list<CodeableConcept> followUp,
	13 : optional id _id,
	14 : optional list<Identifier> identifier,
	15 : optional uri implicitRules,
	16 : optional code language,
	17 : optional Reference location,
	18 : optional Meta meta,
	19 : optional list<binary> modifierExtension,
	20 : optional bool notDone,
	21 : optional CodeableConcept notDoneReason,
	22 : optional list<Annotation> note,
	23 : optional CodeableConcept outcome,
	24 : optional list<Reference> partOf,
	25 : optional i64 performedDateTime,
	26 : optional Period performedPeriod,
	27 : optional list<Procedure_Performer> performer,
	28 : optional list<CodeableConcept> reasonCode,
	29 : optional list<Reference> reasonReference,
	30 : optional list<Reference> report,
	31 : required EventStatus status,
	32 : required Reference subject,
	33 : optional Narrative text,
	34 : optional list<CodeableConcept> usedCode,
	35 : optional list<Reference> usedReference,
}

struct Procedure_FocalDevice
{
	1 : optional CodeableConcept action,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required Reference manipulated,
	5 : optional list<binary> modifierExtension,
}

struct Procedure_Performer
{
	1 : required Reference actor,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Reference onBehalfOf,
	6 : optional CodeableConcept role,
}

struct ProcedureRequest
{
	1 : optional bool asNeededBoolean,
	2 : optional CodeableConcept asNeededCodeableConcept,
	3 : optional i64 authoredOn,
	4 : optional list<Reference> basedOn,
	5 : optional list<CodeableConcept> bodySite,
	6 : optional list<CodeableConcept> category,
	7 : required CodeableConcept code,
	8 : optional list<ResourceContainer> contained,
	9 : optional Reference context,
	10 : optional list<Reference> definition,
	11 : optional bool doNotPerform,
	12 : optional list<binary> extension,
	13 : optional id _id,
	14 : optional list<Identifier> identifier,
	15 : optional uri implicitRules,
	16 : required RequestIntent intent,
	17 : optional code language,
	18 : optional Meta meta,
	19 : optional list<binary> modifierExtension,
	20 : optional list<Annotation> note,
	21 : optional i64 occurrenceDateTime,
	22 : optional Period occurrencePeriod,
	23 : optional Timing occurrenceTiming,
	24 : optional Reference performer,
	25 : optional CodeableConcept performerType,
	26 : optional RequestPriority priority,
	27 : optional list<CodeableConcept> reasonCode,
	28 : optional list<Reference> reasonReference,
	29 : optional list<Reference> relevantHistory,
	30 : optional list<Reference> replaces,
	31 : optional ProcedureRequest_Requester requester,
	32 : optional Identifier requisition,
	33 : optional list<Reference> specimen,
	34 : required RequestStatus status,
	35 : required Reference subject,
	36 : optional list<Reference> supportingInfo,
	37 : optional Narrative text,
}

struct ProcedureRequest_Requester
{
	1 : required Reference agent,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Reference onBehalfOf,
}

struct ProcessRequest
{
	1 : optional ActionList action,
	2 : optional list<ResourceContainer> contained,
	3 : optional i64 created,
	4 : optional list<string> exclude,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional list<Identifier> identifier,
	8 : optional uri implicitRules,
	9 : optional list<string> include,
	10 : optional list<ProcessRequest_Item> item,
	11 : optional code language,
	12 : optional Meta meta,
	13 : optional list<binary> modifierExtension,
	14 : optional bool nullify,
	15 : optional Reference organization,
	16 : optional Period period,
	17 : optional Reference provider,
	18 : optional string reference,
	19 : optional Reference request,
	20 : optional Reference response,
	21 : optional FinancialResourceStatusCodes status,
	22 : optional Reference target,
	23 : optional Narrative text,
}

struct ProcessResponse
{
	1 : optional list<Reference> communicationRequest,
	2 : optional list<ResourceContainer> contained,
	3 : optional i64 created,
	4 : optional string disposition,
	5 : optional list<CodeableConcept> error,
	6 : optional list<binary> extension,
	7 : optional CodeableConcept form,
	8 : optional id _id,
	9 : optional list<Identifier> identifier,
	10 : optional uri implicitRules,
	11 : optional code language,
	12 : optional Meta meta,
	13 : optional list<binary> modifierExtension,
	14 : optional Reference organization,
	15 : optional CodeableConcept outcome,
	16 : optional list<ProcessResponse_ProcessNote> processNote,
	17 : optional Reference request,
	18 : optional Reference requestOrganization,
	19 : optional Reference requestProvider,
	20 : optional FinancialResourceStatusCodes status,
	21 : optional Narrative text,
}

struct Provenance
{
	1 : optional Coding activity,
	2 : required list<Provenance_Agent> agent,
	3 : optional list<ResourceContainer> contained,
	4 : optional list<Provenance_Entity> entity,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional uri implicitRules,
	8 : optional code language,
	9 : optional Reference location,
	10 : optional Meta meta,
	11 : optional list<binary> modifierExtension,
	12 : optional Period period,
	13 : optional list<uri> policy,
	14 : optional list<Coding> reason,
	15 : required instant recorded,
	16 : optional list<Signature> signature,
	17 : required list<Reference> target,
	18 : optional Narrative text,
}

struct Provenance_Agent
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional Reference onBehalfOfReference,
	5 : optional uri onBehalfOfUri,
	6 : optional CodeableConcept relatedAgentType,
	7 : optional list<CodeableConcept> role,
	8 : optional Reference whoReference,
	9 : optional uri whoUri,
}

struct Provenance_Entity
{
	1 : optional list<Provenance_Agent> agent,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required ProvenanceEntityRole role,
	6 : optional Identifier whatIdentifier,
	7 : optional Reference whatReference,
	8 : optional uri whatUri,
}

struct Questionnaire
{
	1 : optional i32 approvalDate,
	2 : optional list<Coding> code,
	3 : optional list<ContactDetail> contact,
	4 : optional list<ResourceContainer> contained,
	5 : optional markdown copyright,
	6 : optional i64 _date,
	7 : optional markdown description,
	8 : optional Period effectivePeriod,
	9 : optional bool experimental,
	10 : optional list<binary> extension,
	11 : optional id _id,
	12 : optional list<Identifier> identifier,
	13 : optional uri implicitRules,
	14 : optional list<Questionnaire_Item> item,
	15 : optional list<CodeableConcept> jurisdiction,
	16 : optional code language,
	17 : optional i32 lastReviewDate,
	18 : optional Meta meta,
	19 : optional list<binary> modifierExtension,
	20 : optional string name,
	21 : optional string publisher,
	22 : optional markdown purpose,
	23 : required PublicationStatus status,
	24 : optional list<ResourceType> subjectType,
	25 : optional Narrative text,
	26 : optional string title,
	27 : optional uri url,
	28 : optional list<UsageContext> useContext,
	29 : optional string version,
}

struct Questionnaire_EnableWhen
{
	1 : optional Attachment answerAttachment,
	2 : optional bool answerBoolean,
	3 : optional Coding answerCoding,
	4 : optional i32 answerDate,
	5 : optional i64 answerDateTime,
	6 : optional double answerDecimal,
	7 : optional i64 answerInteger,
	8 : optional Quantity answerQuantity,
	9 : optional Reference answerReference,
	10 : optional string answerString,
	11 : optional time answerTime,
	12 : optional uri answerUri,
	13 : optional list<binary> extension,
	14 : optional bool hasAnswer,
	15 : optional string id,
	16 : optional list<binary> modifierExtension,
	17 : required string question,
}

struct Questionnaire_Item
{
	1 : optional list<Coding> code,
	2 : optional uri definition,
	3 : optional list<Questionnaire_EnableWhen> enableWhen,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional Attachment initialAttachment,
	7 : optional bool initialBoolean,
	8 : optional Coding initialCoding,
	9 : optional i32 initialDate,
	10 : optional i64 initialDateTime,
	11 : optional double initialDecimal,
	12 : optional i64 initialInteger,
	13 : optional Quantity initialQuantity,
	14 : optional Reference initialReference,
	15 : optional string initialString,
	16 : optional time initialTime,
	17 : optional uri initialUri,
	18 : optional list<binary> item,
	19 : required string linkId,
	20 : optional i64 maxLength,
	21 : optional list<binary> modifierExtension,
	22 : optional list<Questionnaire_Option> option,
	23 : optional Reference options,
	24 : optional string prefix,
	25 : optional bool readOnly,
	26 : optional bool repeats,
	27 : optional bool _required,
	28 : optional string text,
	29 : required QuestionnaireItemType type,
}

struct QuestionnaireResponse
{
	1 : optional Reference author,
	2 : optional i64 authored,
	3 : optional list<Reference> basedOn,
	4 : optional list<ResourceContainer> contained,
	5 : optional Reference context,
	6 : optional list<binary> extension,
	7 : optional id _id,
	8 : optional Identifier identifier,
	9 : optional uri implicitRules,
	10 : optional list<QuestionnaireResponse_Item> item,
	11 : optional code language,
	12 : optional Meta meta,
	13 : optional list<binary> modifierExtension,
	14 : optional list<Reference> parent,
	15 : optional Reference questionnaire,
	16 : optional Reference source,
	17 : required QuestionnaireResponseStatus status,
	18 : optional Reference subject,
	19 : optional Narrative text,
}

struct QuestionnaireResponse_Answer
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<QuestionnaireResponse_Item> item,
	4 : optional list<binary> modifierExtension,
	5 : optional Attachment valueAttachment,
	6 : optional bool valueBoolean,
	7 : optional Coding valueCoding,
	8 : optional i32 valueDate,
	9 : optional i64 valueDateTime,
	10 : optional double valueDecimal,
	11 : optional i64 valueInteger,
	12 : optional Quantity valueQuantity,
	13 : optional Reference valueReference,
	14 : optional string valueString,
	15 : optional time valueTime,
	16 : optional uri valueUri,
}

struct QuestionnaireResponse_Item
{
	1 : optional list<QuestionnaireResponse_Answer> answer,
	2 : optional uri definition,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> item,
	6 : required string linkId,
	7 : optional list<binary> modifierExtension,
	8 : optional Reference subject,
	9 : optional string text,
}

struct Reference
{
	1 : optional string display,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional Identifier identifier,
	5 : optional string reference,
}

struct ReferralRequest
{
	1 : optional i64 authoredOn,
	2 : optional list<Reference> basedOn,
	3 : optional list<ResourceContainer> contained,
	4 : optional Reference context,
	5 : optional list<Reference> definition,
	6 : optional string description,
	7 : optional list<binary> extension,
	8 : optional Identifier groupIdentifier,
	9 : optional id _id,
	10 : optional list<Identifier> identifier,
	11 : optional uri implicitRules,
	12 : required RequestIntent intent,
	13 : optional code language,
	14 : optional Meta meta,
	15 : optional list<binary> modifierExtension,
	16 : optional list<Annotation> note,
	17 : optional i64 occurrenceDateTime,
	18 : optional Period occurrencePeriod,
	19 : optional RequestPriority priority,
	20 : optional list<CodeableConcept> reasonCode,
	21 : optional list<Reference> reasonReference,
	22 : optional list<Reference> recipient,
	23 : optional list<Reference> relevantHistory,
	24 : optional list<Reference> replaces,
	25 : optional ReferralRequest_Requester requester,
	26 : optional list<CodeableConcept> serviceRequested,
	27 : optional CodeableConcept specialty,
	28 : required RequestStatus status,
	29 : required Reference subject,
	30 : optional list<Reference> supportingInfo,
	31 : optional Narrative text,
	32 : optional CodeableConcept type,
}

struct ReferralRequest_Requester
{
	1 : required Reference agent,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Reference onBehalfOf,
}

struct RelatedArtifact
{
	1 : optional string citation,
	2 : optional string display,
	3 : optional Attachment document,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional Reference resource,
	7 : required RelatedArtifactType type,
	8 : optional uri url,
}

struct RelatedPerson
{
	1 : optional bool active,
	2 : optional list<Address> address,
	3 : optional i32 birthDate,
	4 : optional list<ResourceContainer> contained,
	5 : optional list<binary> extension,
	6 : optional AdministrativeGender gender,
	7 : optional id _id,
	8 : optional list<Identifier> identifier,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : optional list<HumanName> name,
	14 : required Reference patient,
	15 : optional Period period,
	16 : optional list<Attachment> photo,
	17 : optional CodeableConcept relationship,
	18 : optional list<ContactPoint> telecom,
	19 : optional Narrative text,
}

struct RequestGroup
{
	1 : optional list<RequestGroup_Action> action,
	2 : optional Reference author,
	3 : optional i64 authoredOn,
	4 : optional list<Reference> basedOn,
	5 : optional list<ResourceContainer> contained,
	6 : optional Reference context,
	7 : optional list<Reference> definition,
	8 : optional list<binary> extension,
	9 : optional Identifier groupIdentifier,
	10 : optional id _id,
	11 : optional list<Identifier> identifier,
	12 : optional uri implicitRules,
	13 : required RequestIntent intent,
	14 : optional code language,
	15 : optional Meta meta,
	16 : optional list<binary> modifierExtension,
	17 : optional list<Annotation> note,
	18 : optional RequestPriority priority,
	19 : optional CodeableConcept reasonCodeableConcept,
	20 : optional Reference reasonReference,
	21 : optional list<Reference> replaces,
	22 : required RequestStatus status,
	23 : optional Reference subject,
	24 : optional Narrative text,
}

struct RequestGroup_Action
{
	1 : optional list<binary> action,
	2 : optional ActionCardinalityBehavior cardinalityBehavior,
	3 : optional list<CodeableConcept> code,
	4 : optional list<RequestGroup_Condition> condition,
	5 : optional string description,
	6 : optional list<RelatedArtifact> documentation,
	7 : optional list<binary> extension,
	8 : optional ActionGroupingBehavior groupingBehavior,
	9 : optional string id,
	10 : optional string label,
	11 : optional list<binary> modifierExtension,
	12 : optional list<Reference> participant,
	13 : optional ActionPrecheckBehavior precheckBehavior,
	14 : optional list<RequestGroup_RelatedAction> relatedAction,
	15 : optional ActionRequiredBehavior requiredBehavior,
	16 : optional Reference resource,
	17 : optional ActionSelectionBehavior selectionBehavior,
	18 : optional string textEquivalent,
	19 : optional i64 timingDateTime,
	20 : optional Duration timingDuration,
	21 : optional Period timingPeriod,
	22 : optional Range timingRange,
	23 : optional Timing timingTiming,
	24 : optional string title,
	25 : optional Coding type,
}

struct ResearchStudy
{
	1 : optional list<ResearchStudy_Arm> arm,
	2 : optional list<CodeableConcept> category,
	3 : optional list<ContactDetail> contact,
	4 : optional list<ResourceContainer> contained,
	5 : optional markdown description,
	6 : optional list<Reference> enrollment,
	7 : optional list<binary> extension,
	8 : optional list<CodeableConcept> focus,
	9 : optional id _id,
	10 : optional list<Identifier> identifier,
	11 : optional uri implicitRules,
	12 : optional list<CodeableConcept> jurisdiction,
	13 : optional list<CodeableConcept> keyword,
	14 : optional code language,
	15 : optional Meta meta,
	16 : optional list<binary> modifierExtension,
	17 : optional list<Annotation> note,
	18 : optional list<Reference> partOf,
	19 : optional Period period,
	20 : optional Reference principalInvestigator,
	21 : optional list<Reference> protocol,
	22 : optional CodeableConcept reasonStopped,
	23 : optional list<RelatedArtifact> relatedArtifact,
	24 : optional list<Reference> site,
	25 : optional Reference sponsor,
	26 : required ResearchStudyStatus status,
	27 : optional Narrative text,
	28 : optional string title,
}

struct ResearchSubject
{
	1 : optional string actualArm,
	2 : optional string assignedArm,
	3 : optional Reference consent,
	4 : optional list<ResourceContainer> contained,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional Identifier identifier,
	8 : optional uri implicitRules,
	9 : required Reference individual,
	10 : optional code language,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : optional Period period,
	14 : required ResearchSubjectStatus status,
	15 : required Reference study,
	16 : optional Narrative text,
}

struct Resource
{
	1 : optional Age abatementAge,
	2 : optional bool abatementBoolean,
	3 : optional i64 abatementDateTime,
	4 : optional Period abatementPeriod,
	5 : optional Range abatementRange,
	6 : optional string abatementString,
	7 : optional bool _abstract,
	8 : optional UnknownContentCode acceptUnknown,
	9 : optional Identifier accession,
	10 : optional Identifier accessionIdentifier,
	11 : optional Claim_Accident accident,
	12 : optional list<Reference> account,
	13 : optional AuditEventAction action,
	14 : optional list<CodeableConcept> actionReason,
	15 : optional Period active,
	16 : optional bool activeOnly,
	17 : optional list<CarePlan_Activity> activity,
	18 : optional Reference actor,
	19 : optional bool actual,
	20 : optional string actualArm,
	21 : optional list<ClaimResponse_AddItem> addItem,
	22 : optional uri address,
	23 : optional list<Reference> addresses,
	24 : optional Age ageAge,
	25 : optional Range ageRange,
	26 : optional string ageString,
	27 : optional list<AuditEvent_Agent> agent,
	28 : optional list<string> alias,
	29 : optional list<Reference> allergyIntolerance,
	30 : optional list<MessageDefinition_AllowedResponse> allowedResponse,
	31 : optional Patient_Animal animal,
	32 : optional Period applies,
	33 : optional Reference appointment,
	34 : optional bool appointmentRequired,
	35 : optional CodeableConcept appointmentType,
	36 : optional i32 approvalDate,
	37 : optional list<ResearchStudy_Arm> arm,
	38 : optional bool asNeededBoolean,
	39 : optional CodeableConcept asNeededCodeableConcept,
	40 : optional i64 assertedDate,
	41 : optional Reference asserter,
	42 : optional Reference assessor,
	43 : optional string assignedArm,
	44 : optional list<Composition_Attester> attester,
	45 : optional Reference authenticator,
	46 : optional Reference author,
	47 : optional i64 authored,
	48 : optional i64 authoredOn,
	49 : optional i64 authoringTime,
	50 : optional list<Reference> authority,
	51 : optional list<Reference> authorizingPrescription,
	52 : optional InstanceAvailability availability,
	53 : optional string availabilityExceptions,
	54 : optional list<HealthcareService_AvailableTime> availableTime,
	55 : optional Money balance,
	56 : optional Reference base,
	57 : optional uri baseDefinition,
	58 : optional list<Reference> basedOn,
	59 : optional list<Reference> basis,
	60 : optional Reference beneficiary,
	61 : optional list<ExplanationOfBenefit_BenefitBalance> benefitBalance,
	62 : optional CodeableConcept benefitCategory,
	63 : optional CodeableConcept benefitSubCategory,
	64 : optional Period billablePeriod,
	65 : optional list<uri> _binary,
	66 : optional Attachment bindingAttachment,
	67 : optional Reference bindingReference,
	68 : optional i32 birthDate,
	69 : optional list<CodeableConcept> bodySite,
	70 : optional list<CodeableConcept> bodysite,
	71 : optional i32 bornDate,
	72 : optional Period bornPeriod,
	73 : optional string bornString,
	74 : optional string businessArrangement,
	75 : optional CodeableConcept businessStatus,
	76 : optional list<DeviceMetric_Calibration> calibration,
	77 : optional Reference careManager,
	78 : optional list<Reference> careTeam,
	79 : optional bool caseSensitive,
	80 : optional AdverseEventCategory category,
	81 : optional list<string> chain,
	82 : optional Subscription_Channel channel,
	83 : optional list<Group_Characteristic> characteristic,
	84 : optional Reference claim,
	85 : optional Reference claimResponse,
	86 : optional CodeableConcept _class,
	87 : optional list<Encounter_ClassHistory> classHistory,
	88 : optional markdown clinicalRecommendationStatement,
	89 : optional AllergyIntoleranceClinicalStatus clinicalStatus,
	90 : optional CodeableConcept code,
	91 : optional CodeableConcept codeCodeableConcept,
	92 : optional Reference codeReference,
	93 : optional list<CodeableConcept> codedDiagnosis,
	94 : optional Specimen_Collection collection,
	95 : optional DeviceMetricColor color,
	96 : optional string comment,
	97 : optional list<Patient_Communication> communication,
	98 : optional list<Reference> communicationRequest,
	99 : optional list<SearchComparator> comparator,
	100 : optional list<CodeableConcept> complication,
	101 : optional list<Reference> complicationDetail,
	102 : optional list<Observation_Component> component,
	103 : optional ValueSet_Compose compose,
	104 : optional CodeableConcept compositeScoring,
	105 : optional bool compositional,
	106 : optional list<CodeSystem_Concept> concept,
	107 : optional string conclusion,
	108 : optional list<FamilyMemberHistory_Condition> condition,
	109 : optional ConfidentialityClassification confidentiality,
	110 : optional Coding connectionType,
	111 : optional Reference consent,
	112 : optional list<Reference> consentingParty,
	113 : optional list<ContactDetail> contact,
	114 : optional list<ResourceContainer> contained,
	115 : optional list<Specimen_Container> container,
	116 : optional CodeSystemContentMode content,
	117 : optional CodeableConcept contentDerivative,
	118 : optional code contentType,
	119 : optional Reference context,
	120 : optional list<string> contextInvariant,
	121 : optional ExtensionContext contextType,
	122 : optional list<Reference> contract,
	123 : optional list<Contributor> contributor,
	124 : optional i64 coordinateSystem,
	125 : optional markdown copyright,
	126 : optional int32 count,
	127 : optional list<Account_Coverage> coverage,
	128 : optional list<Reference> coverageArea,
	129 : optional i64 created,
	130 : optional string criteria,
	131 : optional AllergyIntoleranceCriticality criticality,
	132 : optional Reference custodian,
	133 : optional list<Consent_Data> data,
	134 : optional CodeableConcept dataAbsentReason,
	135 : optional Period dataPeriod,
	136 : optional list<DataRequirement> dataRequirement,
	137 : optional i64 _date,
	138 : optional i64 dateAsserted,
	139 : optional i64 _dateTime,
	140 : optional i64 dateWritten,
	141 : optional Quantity daysSupply,
	142 : optional Age deceasedAge,
	143 : optional bool deceasedBoolean,
	144 : optional i32 deceasedDate,
	145 : optional i64 deceasedDateTime,
	146 : optional Range deceasedRange,
	147 : optional string deceasedString,
	148 : optional CodeableConcept decisionType,
	149 : optional list<Reference> definition,
	150 : optional Reference definitionReference,
	151 : optional uri definitionUri,
	152 : optional Reference deliverFrom,
	153 : optional Reference deliverTo,
	154 : optional list<ImplementationGuide_Dependency> dependency,
	155 : optional string dependent,
	156 : optional TypeDerivationRule derivation,
	157 : optional list<Reference> derivedFrom,
	158 : optional string description,
	159 : optional ExpansionProfile_Designation designation,
	160 : optional Reference destination,
	161 : optional string detail,
	162 : optional list<Reference> detectedIssue,
	163 : optional Reference device,
	164 : optional list<Claim_Diagnosis> diagnosis,
	165 : optional StructureDefinition_Differential differential,
	166 : optional markdown disclaimer,
	167 : optional list<VisionPrescription_Dispense> dispense,
	168 : optional MedicationRequest_DispenseRequest dispenseRequest,
	169 : optional code displayLanguage,
	170 : optional string disposition,
	171 : optional bool doNotPerform,
	172 : optional CompositionStatus docStatus,
	173 : optional list<CapabilityStatement_Document> document,
	174 : optional list<Reference> domain,
	175 : optional list<Dosage> dosage,
	176 : optional list<Dosage> dosageInstruction,
	177 : optional Quantity doseQuantity,
	178 : optional int32 duration,
	179 : optional list<ActivityDefinition_DynamicValue> dynamicValue,
	180 : optional i64 effectiveDateTime,
	181 : optional Period effectivePeriod,
	182 : optional list<ElementDefinition> element,
	183 : optional CodeableConcept eligibility,
	184 : optional string eligibilityNote,
	185 : optional Period employmentImpacted,
	186 : optional CodeableConcept emptyReason,
	187 : optional Reference encounter,
	188 : optional instant end,
	189 : optional list<Reference> endpoint,
	190 : optional list<Reference> enrollment,
	191 : optional NutritionOrder_EnteralFormula enteralFormula,
	192 : optional i64 enteredDate,
	193 : optional Reference enterer,
	194 : optional list<AuditEvent_Entity> entity,
	195 : optional list<List_Entry> entry,
	196 : optional list<Reference> episodeOfCare,
	197 : optional list<ClaimResponse_Error> error,
	198 : optional bool estimatedAge,
	199 : optional Reference evaluatedResources,
	200 : optional list<Reference> evaluationMessage,
	201 : optional list<Composition_Event> event,
	202 : optional list<Reference> eventHistory,
	203 : optional Reference eventParticipant,
	204 : optional list<Condition_Evidence> evidence,
	205 : optional list<Consent_Except> except,
	206 : optional list<string> exclude,
	207 : optional list<CodeableConcept> excludeFoodModifier,
	208 : optional bool excludeNested,
	209 : optional bool excludeNotForUI,
	210 : optional bool excludePostCoordinated,
	211 : optional ExpansionProfile_ExcludedSystem excludedSystem,
	212 : optional Period executionPeriod,
	213 : optional ValueSet_Expansion expansion,
	214 : optional bool experimental,
	215 : optional i64 expirationDate,
	216 : optional Immunization_Explanation explanation,
	217 : optional Reference expressedBy,
	218 : optional string expression,
	219 : optional bool extensible,
	220 : optional list<binary> extension,
	221 : optional string extraDetails,
	222 : optional Reference facility,
	223 : optional double factorOverride,
	224 : optional id fhirVersion,
	225 : optional list<CodeSystem_Filter> filter,
	226 : optional list<ClinicalImpression_Finding> finding,
	227 : optional list<ExpansionProfile_FixedVersion> fixedVersion,
	228 : optional list<TestScript_Fixture> fixture,
	229 : optional list<Procedure_FocalDevice> focalDevice,
	230 : optional list<MessageDefinition_Focus> focus,
	231 : optional list<CodeableConcept> followUp,
	232 : optional list<CodeableConcept> foodPreferenceModifier,
	233 : optional Reference for,
	234 : optional CodeableConcept form,
	235 : optional list<code> format,
	236 : optional positiveInt frames,
	237 : optional list<Contract_Friendly> friendly,
	238 : optional CodeableConcept fundsReserve,
	239 : optional AdministrativeGender gender,
	240 : optional list<Reference> generalPractitioner,
	241 : optional list<ImplementationGuide_Global> global,
	242 : optional list<Reference> goal,
	243 : optional list<ConceptMap_Group> group,
	244 : optional Identifier groupIdentifier,
	245 : optional Coverage_Grouping grouping,
	246 : optional list<Account_Guarantor> guarantor,
	247 : optional markdown guidance,
	248 : optional list<string> header,
	249 : optional list<Reference> healthcareService,
	250 : optional positiveInt height,
	251 : optional CodeSystemHierarchyMeaning hierarchyMeaning,
	252 : optional Period hospitalization,
	253 : optional id _id,
	254 : optional bool idempotent,
	255 : optional list<Identifier> identifier,
	256 : optional list<Attachment> image,
	257 : optional list<Reference> imagingStudy,
	258 : optional bool immutable,
	259 : optional CapabilityStatement_Implementation implementation,
	260 : optional list<uri> implementationGuide,
	261 : optional list<Reference> implicated,
	262 : optional uri implicitRules,
	263 : optional list<uri> import,
	264 : optional string improvementNotation,
	265 : optional list<string> include,
	266 : optional bool includeDefinition,
	267 : optional bool includeDesignations,
	268 : optional list<Reference> incomingReferral,
	269 : optional instant indexed,
	270 : optional list<Reference> indication,
	271 : optional Reference individual,
	272 : optional bool inforce,
	273 : optional list<Claim_Information> information,
	274 : optional Reference informationSource,
	275 : optional list<Medication_Ingredient> ingredient,
	276 : optional list<Task_Input> input,
	277 : optional bool instance,
	278 : optional list<uri> instantiates,
	279 : optional list<Claim_Insurance> insurance,
	280 : optional Reference insurer,
	281 : optional CarePlanIntent intent,
	282 : optional CodeableConcept interpretation,
	283 : optional list<Reference> interpreter,
	284 : optional list<ClinicalImpression_Investigation> investigation,
	285 : optional bool isBrand,
	286 : optional bool isOverTheCounter,
	287 : optional list<OperationOutcome_Issue> issue,
	288 : optional i64 issued,
	289 : optional list<Claim_Item> item,
	290 : optional list<CodeableConcept> jurisdiction,
	291 : optional list<CodeableConcept> keyword,
	292 : optional ResourceType kind,
	293 : optional code language,
	294 : optional CodeableConcept languageCode,
	295 : optional i64 lastModified,
	296 : optional i64 lastOccurrence,
	297 : optional i32 lastReviewDate,
	298 : optional instant lastSystemChange,
	299 : optional list<Contract_Legal> legal,
	300 : optional Duration length,
	301 : optional list<Reference> library,
	302 : optional bool limitedExpansion,
	303 : optional list<GraphDefinition_Link> link,
	304 : optional Reference location,
	305 : optional string lotNumber,
	306 : optional list<Reference> managingOrganization,
	307 : optional i64 manufactureDate,
	308 : optional string manufacturer,
	309 : optional list<DataElement_Mapping> mapping,
	310 : optional CodeableConcept maritalStatus,
	311 : optional Identifier masterIdentifier,
	312 : optional Reference measure,
	313 : optional Timing measurementPeriod,
	314 : optional MeasmntPrinciple measurementPrinciple,
	315 : optional CodeableConcept medicationCodeableConcept,
	316 : optional Reference medicationReference,
	317 : optional list<CodeableConcept> medium,
	318 : optional list<Group_Member> member,
	319 : optional list<CapabilityStatement_Messaging> messaging,
	320 : optional Meta meta,
	321 : optional TestScript_Metadata metadata,
	322 : optional CodeableConcept method,
	323 : optional positiveInt minutesDuration,
	324 : optional list<DetectedIssue_Mitigation> mitigation,
	325 : optional list<Coding> modalityList,
	326 : optional ListMode mode,
	327 : optional string model,
	328 : optional list<SearchModifierCode> modifier,
	329 : optional list<binary> modifierExtension,
	330 : optional Reference module,
	331 : optional bool multipleBirthBoolean,
	332 : optional i64 multipleBirthInteger,
	333 : optional string name,
	334 : optional string network,
	335 : optional list<HealthcareService_NotAvailable> notAvailable,
	336 : optional bool notDone,
	337 : optional CodeableConcept notDoneReason,
	338 : optional CodeableConcept notDoneReasonCodeableConcept,
	339 : optional Reference notDoneReasonReference,
	340 : optional bool notGiven,
	341 : optional list<Annotation> note,
	342 : optional bool nullify,
	343 : optional int32 numberOfInstances,
	344 : optional int32 numberOfSeries,
	345 : optional string observedSeq,
	346 : optional i64 occurrenceDateTime,
	347 : optional Period occurrencePeriod,
	348 : optional Timing occurrenceTiming,
	349 : optional Age onsetAge,
	350 : optional i64 onsetDateTime,
	351 : optional Period onsetPeriod,
	352 : optional Range onsetRange,
	353 : optional string onsetString,
	354 : optional Reference operationDefinition,
	355 : optional list<CodeableConcept> operationalStatus,
	356 : optional Reference operator,
	357 : optional NutritionOrder_OralDiet oralDiet,
	358 : optional positiveInt order,
	359 : optional CodeableConcept orderedBy,
	360 : optional SupplyRequest_OrderedItem orderedItem,
	361 : optional Reference orderer,
	362 : optional Reference organization,
	363 : optional list<TestScript_Origin> origin,
	364 : optional Reference originalPrescription,
	365 : optional CodeableConcept outcome,
	366 : optional list<CodeableConcept> outcomeCode,
	367 : optional string outcomeDesc,
	368 : optional list<Reference> outcomeReference,
	369 : optional list<Task_Output> output,
	370 : optional Reference outputParameters,
	371 : optional bool overbooked,
	372 : optional list<OperationDefinition_Overload> overload,
	373 : optional string overrideReason,
	374 : optional Reference owner,
	375 : optional list<ImplementationGuide_Package> package,
	376 : optional ImplementationGuide_Page page,
	377 : optional list<ParameterDefinition> parameter,
	378 : optional CodeableConcept parameterGroup,
	379 : optional Reference parent,
	380 : optional list<Reference> partOf,
	381 : optional list<ActivityDefinition_Participant> participant,
	382 : optional ParticipationStatus participantStatus,
	383 : optional list<CodeableConcept> participantType,
	384 : optional list<code> patchFormat,
	385 : optional Reference patient,
	386 : optional Claim_Payee payee,
	387 : optional CodeableConcept payeeType,
	388 : optional list<Communication_Payload> payload,
	389 : optional list<code> payloadMimeType,
	390 : optional list<CodeableConcept> payloadType,
	391 : optional ClaimResponse_Payment payment,
	392 : optional CodeableConcept paymentStatus,
	393 : optional list<Reference> payor,
	394 : optional i64 performedDateTime,
	395 : optional Period performedPeriod,
	396 : optional Reference performer,
	397 : optional CodeableConcept performerType,
	398 : optional Reference performingOrganization,
	399 : optional Period period,
	400 : optional Attachment photo,
	401 : optional CodeableConcept physicalType,
	402 : optional Period planningHorizon,
	403 : optional list<Reference> pointer,
	404 : optional list<Consent_Policy> policy,
	405 : optional Reference policyHolder,
	406 : optional uri policyRule,
	407 : optional Location_Position position,
	408 : optional list<Immunization_Practitioner> practitioner,
	409 : optional positiveInt precedence,
	410 : optional list<RiskAssessment_Prediction> prediction,
	411 : optional Reference prescriber,
	412 : optional Reference prescription,
	413 : optional list<Attachment> presentedForm,
	414 : optional Reference previous,
	415 : optional Money priceOverride,
	416 : optional bool primarySource,
	417 : optional Reference principalInvestigator,
	418 : optional Reference priorPrescription,
	419 : optional list<Reference> priorRequest,
	420 : optional int32 priority,
	421 : optional list<Reference> problem,
	422 : optional list<Claim_Procedure> procedure,
	423 : optional list<CodeableConcept> procedureCode,
	424 : optional list<Reference> procedureReference,
	425 : optional list<ClaimResponse_ProcessNote> processNote,
	426 : optional list<Specimen_Processing> processing,
	427 : optional CodeableConcept productCodeableConcept,
	428 : optional Reference productReference,
	429 : optional list<DeviceComponent_ProductionSpecification> productionSpecification,
	430 : optional list<Reference> profile,
	431 : optional list<CodeableConcept> prognosisCodeableConcept,
	432 : optional list<Reference> prognosisReference,
	433 : optional list<string> programName,
	434 : optional list<CodeSystem_Property> property,
	435 : optional list<uri> protocol,
	436 : optional Reference providedBy,
	437 : optional Reference provider,
	438 : optional string publisher,
	439 : optional markdown purpose,
	440 : optional list<CodeableConcept> purposeOfEvent,
	441 : optional list<Practitioner_Qualification> qualification,
	442 : optional list<CodeableConcept> qualifier,
	443 : optional list<Sequence_Quality> quality,
	444 : optional Quantity quantity,
	445 : optional Reference questionnaire,
	446 : optional string rateAggregation,
	447 : optional markdown rationale,
	448 : optional list<Reference> reaction,
	449 : optional i64 readCoverage,
	450 : optional list<CodeableConcept> reason,
	451 : optional list<CodeableConcept> reasonCode,
	452 : optional CodeableConcept reasonCodeableConcept,
	453 : optional list<CodeableConcept> reasonNotGiven,
	454 : optional list<CodeableConcept> reasonNotTaken,
	455 : optional list<Reference> reasonReference,
	456 : optional CodeableConcept reasonStopped,
	457 : optional i64 received,
	458 : optional i64 receivedTime,
	459 : optional list<Reference> receiver,
	460 : optional list<Reference> recipient,
	461 : optional list<ImmunizationRecommendation_Recommendation> recommendation,
	462 : optional instant recorded,
	463 : optional i64 recordedOn,
	464 : optional Reference recorder,
	465 : optional uri reference,
	466 : optional list<Reference> referenceDocument,
	467 : optional list<Observation_ReferenceRange> referenceRange,
	468 : optional Sequence_ReferenceSeq referenceSeq,
	469 : optional Reference referral,
	470 : optional list<CodeableConcept> referralMethod,
	471 : optional list<Reference> referralRequest,
	472 : optional Reference referrer,
	473 : optional list<Claim_Related> related,
	474 : optional list<RelatedArtifact> relatedArtifact,
	475 : optional list<Composition_RelatesTo> relatesTo,
	476 : optional CodeableConcept relationship,
	477 : optional list<Reference> relevantHistory,
	478 : optional Reference replacedBy,
	479 : optional list<Reference> replaces,
	480 : optional list<Reference> report,
	481 : optional CodeableConcept reportOrigin,
	482 : optional Reference reportingOrganization,
	483 : optional list<Sequence_Repository> repository,
	484 : optional Reference request,
	485 : optional id requestId,
	486 : optional Reference requestOrganization,
	487 : optional Reference requestProvider,
	488 : optional list<Period> requestedPeriod,
	489 : optional CommunicationRequest_Requester requester,
	490 : optional Reference requestingOrganization,
	491 : optional Identifier requisition,
	492 : optional Coding reserved,
	493 : optional list<CompartmentDefinition_Resource> resource,
	494 : optional MessageHeader_Response response,
	495 : optional bool responseRequired,
	496 : optional Reference responsible,
	497 : optional list<CapabilityStatement_Rest> rest,
	498 : optional Task_Restriction restriction,
	499 : optional list<Reference> result,
	500 : optional string riskAdjustment,
	501 : optional CodeableConcept route,
	502 : optional list<Contract_Rule> rule,
	503 : optional list<TestScript_Ruleset> ruleset,
	504 : optional list<CodeableConcept> safety,
	505 : optional Reference schedule,
	506 : optional double score,
	507 : optional CodeableConcept scoring,
	508 : optional bool search,
	509 : optional list<Composition_Section> section,
	510 : optional Reference securityContext,
	511 : optional list<Coding> securityLabel,
	512 : optional Reference sender,
	513 : optional i64 sent,
	514 : optional string sequence,
	515 : optional list<ImagingStudy_Series> series,
	516 : optional CodeableConcept seriousness,
	517 : optional list<Reference> _service,
	518 : optional CodeableConcept serviceCategory,
	519 : optional Reference serviceProvider,
	520 : optional list<CodeableConcept> serviceProvisionCode,
	521 : optional list<CodeableConcept> serviceRequested,
	522 : optional list<CodeableConcept> serviceType,
	523 : optional i32 servicedDate,
	524 : optional Period servicedPeriod,
	525 : optional string set,
	526 : optional TestReport_Setup setup,
	527 : optional CodeableConcept severity,
	528 : optional list<Signature> signature,
	529 : optional list<Contract_Signer> signer,
	530 : optional CodeableConcept site,
	531 : optional list<Reference> slot,
	532 : optional StructureDefinition_Snapshot snapshot,
	533 : optional CapabilityStatement_Software software,
	534 : optional AuditEvent_Source source,
	535 : optional Attachment sourceAttachment,
	536 : optional Identifier sourceIdentifier,
	537 : optional Reference sourceReference,
	538 : optional uri sourceUri,
	539 : optional list<CodeableConcept> specialty,
	540 : optional list<Reference> specimen,
	541 : optional Reference sponsor,
	542 : optional Condition_Stage stage,
	543 : optional instant start,
	544 : optional CodeableConcept startCodeableConcept,
	545 : optional i32 startDate,
	546 : optional i64 started,
	547 : optional AccountStatus status,
	548 : optional i32 statusDate,
	549 : optional list<Encounter_StatusHistory> statusHistory,
	550 : optional string statusReason,
	551 : optional DataElementStringency stringency,
	552 : optional list<StructureMap_Structure> structure,
	553 : optional list<Reference> study,
	554 : optional list<CodeableConcept> subType,
	555 : optional Reference subject,
	556 : optional list<Reference> subjectMedicalHistory,
	557 : optional list<ResourceType> subjectType,
	558 : optional Reference subscriber,
	559 : optional string subscriberId,
	560 : optional MedicationDispense_Substitution substitution,
	561 : optional list<Coding> subtype,
	562 : optional string summary,
	563 : optional list<NutritionOrder_Supplement> supplement,
	564 : optional list<Measure_SupplementalData> supplementalData,
	565 : optional SupplyDelivery_SuppliedItem suppliedItem,
	566 : optional Reference supplier,
	567 : optional list<Reference> supportingInfo,
	568 : optional list<Reference> supportingInformation,
	569 : optional list<AdverseEvent_SuspectEntity> suspectEntity,
	570 : optional bool system,
	571 : optional list<Coding> tag,
	572 : optional MedicationStatementTaken taken,
	573 : optional Goal_Target target,
	574 : optional Reference targetReference,
	575 : optional uri targetUri,
	576 : optional list<Reference> team,
	577 : optional TestReport_Teardown teardown,
	578 : optional list<ContactPoint> telecom,
	579 : optional list<Contract_Term> term,
	580 : optional list<TestReport_Test> test,
	581 : optional Reference testScript,
	582 : optional string tester,
	583 : optional Narrative text,
	584 : optional instant timestamp,
	585 : optional i64 timingDateTime,
	586 : optional Period timingPeriod,
	587 : optional Range timingRange,
	588 : optional Timing timingTiming,
	589 : optional string title,
	590 : optional list<CodeableConcept> topic,
	591 : optional Money total,
	592 : optional Money totalBenefit,
	593 : optional Money totalCost,
	594 : optional Reference transform,
	595 : optional list<TriggerDefinition> trigger,
	596 : optional CodeableConcept type,
	597 : optional Device_Udi udi,
	598 : optional oid uid,
	599 : optional Money unallocDeductable,
	600 : optional list<NamingSystem_UniqueId> uniqueId,
	601 : optional CodeableConcept unit,
	602 : optional uri url,
	603 : optional string usage,
	604 : optional Use use,
	605 : optional list<UsageContext> useContext,
	606 : optional list<CodeableConcept> usedCode,
	607 : optional list<Reference> usedReference,
	608 : optional list<Immunization_VaccinationProtocol> vaccinationProtocol,
	609 : optional CodeableConcept vaccineCode,
	610 : optional Attachment valueAttachment,
	611 : optional bool valueBoolean,
	612 : optional CodeableConcept valueCodeableConcept,
	613 : optional i64 valueDateTime,
	614 : optional Period valuePeriod,
	615 : optional Quantity valueQuantity,
	616 : optional Range valueRange,
	617 : optional Ratio valueRatio,
	618 : optional SampledData valueSampledData,
	619 : optional uri valueSet,
	620 : optional string valueString,
	621 : optional time valueTime,
	622 : optional list<Contract_ValuedItem> valuedItem,
	623 : optional list<TestScript_Variable> variable,
	624 : optional list<Sequence_Variant> variant,
	625 : optional AllergyIntoleranceVerificationStatus verificationStatus,
	626 : optional string version,
	627 : optional bool versionNeeded,
	628 : optional CodeableConcept view,
	629 : optional i64 whenHandedOver,
	630 : optional i64 whenPrepared,
	631 : optional Period whenUsed,
	632 : optional positiveInt width,
	633 : optional string xpath,
	634 : optional XPathUsageType xpathUsage,
}

struct ResourceContainer
{
	1 : optional Account _Account,
	2 : optional ActivityDefinition _ActivityDefinition,
	3 : optional AdverseEvent _AdverseEvent,
	4 : optional AllergyIntolerance _AllergyIntolerance,
	5 : optional Appointment _Appointment,
	6 : optional AppointmentResponse _AppointmentResponse,
	7 : optional AuditEvent _AuditEvent,
	8 : optional Basic _Basic,
	9 : optional Binary _Binary,
	10 : optional BodySite _BodySite,
	11 : optional Bundle _Bundle,
	12 : optional CapabilityStatement _CapabilityStatement,
	13 : optional CarePlan _CarePlan,
	14 : optional CareTeam _CareTeam,
	15 : optional ChargeItem _ChargeItem,
	16 : optional Claim _Claim,
	17 : optional ClaimResponse _ClaimResponse,
	18 : optional ClinicalImpression _ClinicalImpression,
	19 : optional CodeSystem _CodeSystem,
	20 : optional Communication _Communication,
	21 : optional CommunicationRequest _CommunicationRequest,
	22 : optional CompartmentDefinition _CompartmentDefinition,
	23 : optional Composition _Composition,
	24 : optional ConceptMap _ConceptMap,
	25 : optional Condition _Condition,
	26 : optional Consent _Consent,
	27 : optional Contract _Contract,
	28 : optional Coverage _Coverage,
	29 : optional DataElement _DataElement,
	30 : optional DetectedIssue _DetectedIssue,
	31 : optional Device _Device,
	32 : optional DeviceComponent _DeviceComponent,
	33 : optional DeviceMetric _DeviceMetric,
	34 : optional DeviceRequest _DeviceRequest,
	35 : optional DeviceUseStatement _DeviceUseStatement,
	36 : optional DiagnosticReport _DiagnosticReport,
	37 : optional DocumentManifest _DocumentManifest,
	38 : optional DocumentReference _DocumentReference,
	39 : optional EligibilityRequest _EligibilityRequest,
	40 : optional EligibilityResponse _EligibilityResponse,
	41 : optional Encounter _Encounter,
	42 : optional Endpoint _Endpoint,
	43 : optional EnrollmentRequest _EnrollmentRequest,
	44 : optional EnrollmentResponse _EnrollmentResponse,
	45 : optional EpisodeOfCare _EpisodeOfCare,
	46 : optional ExpansionProfile _ExpansionProfile,
	47 : optional ExplanationOfBenefit _ExplanationOfBenefit,
	48 : optional FamilyMemberHistory _FamilyMemberHistory,
	49 : optional Flag _Flag,
	50 : optional Goal _Goal,
	51 : optional GraphDefinition _GraphDefinition,
	52 : optional Group _Group,
	53 : optional GuidanceResponse _GuidanceResponse,
	54 : optional HealthcareService _HealthcareService,
	55 : optional ImagingManifest _ImagingManifest,
	56 : optional ImagingStudy _ImagingStudy,
	57 : optional Immunization _Immunization,
	58 : optional ImmunizationRecommendation _ImmunizationRecommendation,
	59 : optional ImplementationGuide _ImplementationGuide,
	60 : optional Library _Library,
	61 : optional Linkage _Linkage,
	62 : optional List _List,
	63 : optional Location _Location,
	64 : optional Measure _Measure,
	65 : optional MeasureReport _MeasureReport,
	66 : optional Media _Media,
	67 : optional Medication _Medication,
	68 : optional MedicationAdministration _MedicationAdministration,
	69 : optional MedicationDispense _MedicationDispense,
	70 : optional MedicationRequest _MedicationRequest,
	71 : optional MedicationStatement _MedicationStatement,
	72 : optional MessageDefinition _MessageDefinition,
	73 : optional MessageHeader _MessageHeader,
	74 : optional NamingSystem _NamingSystem,
	75 : optional NutritionOrder _NutritionOrder,
	76 : optional Observation _Observation,
	77 : optional OperationDefinition _OperationDefinition,
	78 : optional OperationOutcome _OperationOutcome,
	79 : optional Organization _Organization,
	80 : optional Parameters _Parameters,
	81 : optional Patient _Patient,
	82 : optional PaymentNotice _PaymentNotice,
	83 : optional PaymentReconciliation _PaymentReconciliation,
	84 : optional Person _Person,
	85 : optional PlanDefinition _PlanDefinition,
	86 : optional Practitioner _Practitioner,
	87 : optional PractitionerRole _PractitionerRole,
	88 : optional Procedure _Procedure,
	89 : optional ProcedureRequest _ProcedureRequest,
	90 : optional ProcessRequest _ProcessRequest,
	91 : optional ProcessResponse _ProcessResponse,
	92 : optional Provenance _Provenance,
	93 : optional Questionnaire _Questionnaire,
	94 : optional QuestionnaireResponse _QuestionnaireResponse,
	95 : optional ReferralRequest _ReferralRequest,
	96 : optional RelatedPerson _RelatedPerson,
	97 : optional RequestGroup _RequestGroup,
	98 : optional ResearchStudy _ResearchStudy,
	99 : optional ResearchSubject _ResearchSubject,
	100 : optional RiskAssessment _RiskAssessment,
	101 : optional Schedule _Schedule,
	102 : optional SearchParameter _SearchParameter,
	103 : optional Sequence _Sequence,
	104 : optional ServiceDefinition _ServiceDefinition,
	105 : optional Slot _Slot,
	106 : optional Specimen _Specimen,
	107 : optional StructureDefinition _StructureDefinition,
	108 : optional StructureMap _StructureMap,
	109 : optional Subscription _Subscription,
	110 : optional Substance _Substance,
	111 : optional SupplyDelivery _SupplyDelivery,
	112 : optional SupplyRequest _SupplyRequest,
	113 : optional Task _Task,
	114 : optional TestReport _TestReport,
	115 : optional TestScript _TestScript,
	116 : optional ValueSet _ValueSet,
	117 : optional VisionPrescription _VisionPrescription,
}

struct RiskAssessment
{
	1 : optional Reference basedOn,
	2 : optional list<Reference> basis,
	3 : optional CodeableConcept code,
	4 : optional string comment,
	5 : optional Reference condition,
	6 : optional list<ResourceContainer> contained,
	7 : optional Reference context,
	8 : optional list<binary> extension,
	9 : optional id _id,
	10 : optional Identifier identifier,
	11 : optional uri implicitRules,
	12 : optional code language,
	13 : optional Meta meta,
	14 : optional CodeableConcept method,
	15 : optional string mitigation,
	16 : optional list<binary> modifierExtension,
	17 : optional i64 occurrenceDateTime,
	18 : optional Period occurrencePeriod,
	19 : optional Reference parent,
	20 : optional Reference performer,
	21 : optional list<RiskAssessment_Prediction> prediction,
	22 : optional CodeableConcept reasonCodeableConcept,
	23 : optional Reference reasonReference,
	24 : required ObservationStatus status,
	25 : optional Reference subject,
	26 : optional Narrative text,
}

struct Schedule
{
	1 : optional bool active,
	2 : required list<Reference> actor,
	3 : optional string comment,
	4 : optional list<ResourceContainer> contained,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional list<Identifier> identifier,
	8 : optional uri implicitRules,
	9 : optional code language,
	10 : optional Meta meta,
	11 : optional list<binary> modifierExtension,
	12 : optional Period planningHorizon,
	13 : optional CodeableConcept serviceCategory,
	14 : optional list<CodeableConcept> serviceType,
	15 : optional list<CodeableConcept> specialty,
	16 : optional Narrative text,
}

struct SearchParameter
{
	1 : required list<ResourceType> base,
	2 : optional list<string> chain,
	3 : required code _code,
	4 : optional list<SearchComparator> comparator,
	5 : optional list<SearchParameter_Component> component,
	6 : optional list<ContactDetail> contact,
	7 : optional list<ResourceContainer> contained,
	8 : optional i64 _date,
	9 : optional uri derivedFrom,
	10 : required markdown description,
	11 : optional bool experimental,
	12 : optional string expression,
	13 : optional list<binary> extension,
	14 : optional id _id,
	15 : optional uri implicitRules,
	16 : optional list<CodeableConcept> jurisdiction,
	17 : optional code language,
	18 : optional Meta meta,
	19 : optional list<SearchModifierCode> modifier,
	20 : optional list<binary> modifierExtension,
	21 : required string name,
	22 : optional string publisher,
	23 : optional markdown purpose,
	24 : required PublicationStatus status,
	25 : optional list<ResourceType> target,
	26 : optional Narrative text,
	27 : required SearchParamType type,
	28 : required uri url,
	29 : optional list<UsageContext> useContext,
	30 : optional string version,
	31 : optional string xpath,
	32 : optional XPathUsageType xpathUsage,
}

struct SearchParameter_Component
{
	1 : required Reference definition,
	2 : required string expression,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct Sequence
{
	1 : optional list<ResourceContainer> contained,
	2 : required i64 coordinateSystem,
	3 : optional Reference device,
	4 : optional list<binary> extension,
	5 : optional id _id,
	6 : optional list<Identifier> identifier,
	7 : optional uri implicitRules,
	8 : optional code language,
	9 : optional Meta meta,
	10 : optional list<binary> modifierExtension,
	11 : optional string observedSeq,
	12 : optional Reference patient,
	13 : optional Reference performer,
	14 : optional list<Reference> pointer,
	15 : optional list<Sequence_Quality> quality,
	16 : optional Quantity quantity,
	17 : optional i64 readCoverage,
	18 : optional Sequence_ReferenceSeq referenceSeq,
	19 : optional list<Sequence_Repository> repository,
	20 : optional Reference specimen,
	21 : optional Narrative text,
	22 : optional code type,
	23 : optional list<Sequence_Variant> variant,
}

struct Sequence_ReferenceSeq
{
	1 : optional CodeableConcept chromosome,
	2 : optional list<binary> extension,
	3 : optional string genomeBuild,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional CodeableConcept referenceSeqId,
	7 : optional Reference referenceSeqPointer,
	8 : optional string referenceSeqString,
	9 : optional i64 strand,
	10 : required i64 windowEnd,
	11 : required i64 windowStart,
}

struct Sequence_Variant
{
	1 : optional string cigar,
	2 : optional i64 end,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional string observedAllele,
	7 : optional string referenceAllele,
	8 : optional i64 start,
	9 : optional Reference variantPointer,
}

struct ServiceDefinition
{
	1 : optional i32 approvalDate,
	2 : optional list<ContactDetail> contact,
	3 : optional list<ResourceContainer> contained,
	4 : optional list<Contributor> contributor,
	5 : optional markdown copyright,
	6 : optional list<DataRequirement> dataRequirement,
	7 : optional i64 _date,
	8 : optional markdown description,
	9 : optional Period effectivePeriod,
	10 : optional bool experimental,
	11 : optional list<binary> extension,
	12 : optional id _id,
	13 : optional list<Identifier> identifier,
	14 : optional uri implicitRules,
	15 : optional list<CodeableConcept> jurisdiction,
	16 : optional code language,
	17 : optional i32 lastReviewDate,
	18 : optional Meta meta,
	19 : optional list<binary> modifierExtension,
	20 : optional string name,
	21 : optional Reference operationDefinition,
	22 : optional string publisher,
	23 : optional markdown purpose,
	24 : optional list<RelatedArtifact> relatedArtifact,
	25 : required PublicationStatus status,
	26 : optional Narrative text,
	27 : optional string title,
	28 : optional list<CodeableConcept> topic,
	29 : optional list<TriggerDefinition> trigger,
	30 : optional uri url,
	31 : optional string usage,
	32 : optional list<UsageContext> useContext,
	33 : optional string version,
}

struct Signature
{
	1 : optional binary blob,
	2 : optional code contentType,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional Reference onBehalfOfReference,
	6 : optional uri onBehalfOfUri,
	7 : required list<Coding> type,
	8 : required instant when,
	9 : optional Reference whoReference,
	10 : optional uri whoUri,
}

struct Slot
{
	1 : optional CodeableConcept appointmentType,
	2 : optional string comment,
	3 : optional list<ResourceContainer> contained,
	4 : required instant end,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional list<Identifier> identifier,
	8 : optional uri implicitRules,
	9 : optional code language,
	10 : optional Meta meta,
	11 : optional list<binary> modifierExtension,
	12 : optional bool overbooked,
	13 : required Reference schedule,
	14 : optional CodeableConcept serviceCategory,
	15 : optional list<CodeableConcept> serviceType,
	16 : optional list<CodeableConcept> specialty,
	17 : required instant start,
	18 : required SlotStatus status,
	19 : optional Narrative text,
}

struct Specimen
{
	1 : optional Identifier accessionIdentifier,
	2 : optional Specimen_Collection collection,
	3 : optional list<ResourceContainer> contained,
	4 : optional list<Specimen_Container> container,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional list<Identifier> identifier,
	8 : optional uri implicitRules,
	9 : optional code language,
	10 : optional Meta meta,
	11 : optional list<binary> modifierExtension,
	12 : optional list<Annotation> note,
	13 : optional list<Reference> parent,
	14 : optional list<Specimen_Processing> processing,
	15 : optional i64 receivedTime,
	16 : optional list<Reference> request,
	17 : optional SpecimenStatus status,
	18 : required Reference subject,
	19 : optional Narrative text,
	20 : optional CodeableConcept type,
}

struct Specimen_Collection
{
	1 : optional CodeableConcept bodySite,
	2 : optional i64 collectedDateTime,
	3 : optional Period collectedPeriod,
	4 : optional Reference collector,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional CodeableConcept method,
	8 : optional list<binary> modifierExtension,
	9 : optional Quantity quantity,
}

struct Specimen_Container
{
	1 : optional CodeableConcept additiveCodeableConcept,
	2 : optional Reference additiveReference,
	3 : optional Quantity capacity,
	4 : optional string description,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional list<Identifier> identifier,
	8 : optional list<binary> modifierExtension,
	9 : optional Quantity specimenQuantity,
	10 : optional CodeableConcept type,
}

struct Specimen_Processing
{
	1 : optional list<Reference> additive,
	2 : optional string description,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional CodeableConcept procedure,
	7 : optional i64 timeDateTime,
	8 : optional Period timePeriod,
}

struct StructureDefinition
{
	1 : required bool _abstract,
	2 : optional uri baseDefinition,
	3 : optional list<ContactDetail> contact,
	4 : optional list<ResourceContainer> contained,
	5 : optional list<string> context,
	6 : optional list<string> contextInvariant,
	7 : optional ExtensionContext contextType,
	8 : optional markdown copyright,
	9 : optional i64 _date,
	10 : optional TypeDerivationRule derivation,
	11 : optional markdown description,
	12 : optional StructureDefinition_Differential differential,
	13 : optional bool experimental,
	14 : optional list<binary> extension,
	15 : optional id fhirVersion,
	16 : optional id _id,
	17 : optional list<Identifier> identifier,
	18 : optional uri implicitRules,
	19 : optional list<CodeableConcept> jurisdiction,
	20 : optional list<Coding> keyword,
	21 : required StructureDefinitionKind kind,
	22 : optional code language,
	23 : optional list<StructureDefinition_Mapping> mapping,
	24 : optional Meta meta,
	25 : optional list<binary> modifierExtension,
	26 : required string name,
	27 : optional string publisher,
	28 : optional markdown purpose,
	29 : optional StructureDefinition_Snapshot snapshot,
	30 : required PublicationStatus status,
	31 : optional Narrative text,
	32 : optional string title,
	33 : required code type,
	34 : required uri url,
	35 : optional list<UsageContext> useContext,
	36 : optional string version,
}

struct StructureDefinition_Differential
{
	1 : required list<ElementDefinition> element,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct StructureDefinition_Snapshot
{
	1 : required list<ElementDefinition> element,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct StructureMap
{
	1 : optional list<ContactDetail> contact,
	2 : optional list<ResourceContainer> contained,
	3 : optional markdown copyright,
	4 : optional i64 _date,
	5 : optional markdown description,
	6 : optional bool experimental,
	7 : optional list<binary> extension,
	8 : required list<StructureMap_Group> group,
	9 : optional id _id,
	10 : optional list<Identifier> identifier,
	11 : optional uri implicitRules,
	12 : optional list<uri> import,
	13 : optional list<CodeableConcept> jurisdiction,
	14 : optional code language,
	15 : optional Meta meta,
	16 : optional list<binary> modifierExtension,
	17 : required string name,
	18 : optional string publisher,
	19 : optional markdown purpose,
	20 : required PublicationStatus status,
	21 : optional list<StructureMap_Structure> structure,
	22 : optional Narrative text,
	23 : optional string title,
	24 : required uri url,
	25 : optional list<UsageContext> useContext,
	26 : optional string version,
}

struct StructureMap_Group
{
	1 : optional string documentation,
	2 : optional id extends,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : required list<StructureMap_Input> input,
	6 : optional list<binary> modifierExtension,
	7 : required id name,
	8 : required list<StructureMap_Rule> rule,
	9 : required StructureMapGroupTypeMode typeMode,
}

struct StructureMap_Rule
{
	1 : optional list<StructureMap_Dependent> dependent,
	2 : optional string documentation,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : required id name,
	7 : optional list<binary> rule,
	8 : required list<StructureMap_Source> source,
	9 : optional list<StructureMap_Target> target,
}

struct StructureMap_Source
{
	1 : optional string check,
	2 : optional string condition,
	3 : required id context,
	4 : optional Address defaultValueAddress,
	5 : optional Age defaultValueAge,
	6 : optional Annotation defaultValueAnnotation,
	7 : optional Attachment defaultValueAttachment,
	8 : optional binary defaultValueBase64Binary,
	9 : optional bool defaultValueBoolean,
	10 : optional code defaultValueCode,
	11 : optional CodeableConcept defaultValueCodeableConcept,
	12 : optional Coding defaultValueCoding,
	13 : optional ContactPoint defaultValueContactPoint,
	14 : optional Count defaultValueCount,
	15 : optional i32 defaultValueDate,
	16 : optional i64 defaultValueDateTime,
	17 : optional double defaultValueDecimal,
	18 : optional Distance defaultValueDistance,
	19 : optional Duration defaultValueDuration,
	20 : optional HumanName defaultValueHumanName,
	21 : optional id defaultValueId,
	22 : optional Identifier defaultValueIdentifier,
	23 : optional instant defaultValueInstant,
	24 : optional i64 defaultValueInteger,
	25 : optional markdown defaultValueMarkdown,
	26 : optional Meta defaultValueMeta,
	27 : optional Money defaultValueMoney,
	28 : optional oid defaultValueOid,
	29 : optional Period defaultValuePeriod,
	30 : optional positiveInt defaultValuePositiveInt,
	31 : optional Quantity defaultValueQuantity,
	32 : optional Range defaultValueRange,
	33 : optional Ratio defaultValueRatio,
	34 : optional Reference defaultValueReference,
	35 : optional SampledData defaultValueSampledData,
	36 : optional Signature defaultValueSignature,
	37 : optional string defaultValueString,
	38 : optional time defaultValueTime,
	39 : optional Timing defaultValueTiming,
	40 : optional int32 defaultValueUnsignedInt,
	41 : optional uri defaultValueUri,
	42 : optional string element,
	43 : optional list<binary> extension,
	44 : optional string id,
	45 : optional StructureMapSourceListMode listMode,
	46 : optional string max,
	47 : optional i64 min,
	48 : optional list<binary> modifierExtension,
	49 : optional string type,
	50 : optional id variable,
}

struct Subscription
{
	1 : required Subscription_Channel channel,
	2 : optional list<ContactPoint> contact,
	3 : optional list<ResourceContainer> contained,
	4 : required string criteria,
	5 : optional instant end,
	6 : optional string error,
	7 : optional list<binary> extension,
	8 : optional id _id,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : required string reason,
	14 : required SubscriptionStatus status,
	15 : optional list<Coding> tag,
	16 : optional Narrative text,
}

struct Substance
{
	1 : optional list<CodeableConcept> category,
	2 : required CodeableConcept code,
	3 : optional list<ResourceContainer> contained,
	4 : optional string description,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional list<Identifier> identifier,
	8 : optional uri implicitRules,
	9 : optional list<Substance_Ingredient> ingredient,
	10 : optional list<Substance_Instance> instance,
	11 : optional code language,
	12 : optional Meta meta,
	13 : optional list<binary> modifierExtension,
	14 : optional FHIRSubstanceStatus status,
	15 : optional Narrative text,
}

struct Substance_Ingredient
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional Ratio quantity,
	5 : optional CodeableConcept substanceCodeableConcept,
	6 : optional Reference substanceReference,
}

struct Substance_Instance
{
	1 : optional i64 expiry,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional Identifier identifier,
	5 : optional list<binary> modifierExtension,
	6 : optional Quantity quantity,
}

struct SupplyDelivery
{
	1 : optional list<Reference> basedOn,
	2 : optional list<ResourceContainer> contained,
	3 : optional Reference destination,
	4 : optional list<binary> extension,
	5 : optional id _id,
	6 : optional Identifier identifier,
	7 : optional uri implicitRules,
	8 : optional code language,
	9 : optional Meta meta,
	10 : optional list<binary> modifierExtension,
	11 : optional i64 occurrenceDateTime,
	12 : optional Period occurrencePeriod,
	13 : optional Timing occurrenceTiming,
	14 : optional list<Reference> partOf,
	15 : optional Reference patient,
	16 : optional list<Reference> receiver,
	17 : optional SupplyDeliveryStatus status,
	18 : optional SupplyDelivery_SuppliedItem suppliedItem,
	19 : optional Reference supplier,
	20 : optional Narrative text,
	21 : optional CodeableConcept type,
}

struct SupplyDelivery_SuppliedItem
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CodeableConcept itemCodeableConcept,
	4 : optional Reference itemReference,
	5 : optional list<binary> modifierExtension,
	6 : optional Quantity quantity,
}

struct SupplyRequest
{
	1 : optional i64 authoredOn,
	2 : optional CodeableConcept category,
	3 : optional list<ResourceContainer> contained,
	4 : optional Reference deliverFrom,
	5 : optional Reference deliverTo,
	6 : optional list<binary> extension,
	7 : optional id _id,
	8 : optional Identifier identifier,
	9 : optional uri implicitRules,
	10 : optional code language,
	11 : optional Meta meta,
	12 : optional list<binary> modifierExtension,
	13 : optional i64 occurrenceDateTime,
	14 : optional Period occurrencePeriod,
	15 : optional Timing occurrenceTiming,
	16 : optional SupplyRequest_OrderedItem orderedItem,
	17 : optional RequestPriority priority,
	18 : optional CodeableConcept reasonCodeableConcept,
	19 : optional Reference reasonReference,
	20 : optional SupplyRequest_Requester requester,
	21 : optional SupplyRequestStatus status,
	22 : optional list<Reference> supplier,
	23 : optional Narrative text,
}

struct SupplyRequest_OrderedItem
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CodeableConcept itemCodeableConcept,
	4 : optional Reference itemReference,
	5 : optional list<binary> modifierExtension,
	6 : required Quantity quantity,
}

struct SupplyRequest_Requester
{
	1 : required Reference agent,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Reference onBehalfOf,
}

struct Task
{
	1 : optional i64 authoredOn,
	2 : optional list<Reference> basedOn,
	3 : optional CodeableConcept businessStatus,
	4 : optional CodeableConcept code,
	5 : optional list<ResourceContainer> contained,
	6 : optional Reference context,
	7 : optional Reference definitionReference,
	8 : optional uri definitionUri,
	9 : optional string description,
	10 : optional Period executionPeriod,
	11 : optional list<binary> extension,
	12 : optional Reference focus,
	13 : optional Reference for,
	14 : optional Identifier groupIdentifier,
	15 : optional id _id,
	16 : optional list<Identifier> identifier,
	17 : optional uri implicitRules,
	18 : optional list<Task_Input> input,
	19 : required RequestIntent intent,
	20 : optional code language,
	21 : optional i64 lastModified,
	22 : optional Meta meta,
	23 : optional list<binary> modifierExtension,
	24 : optional list<Annotation> note,
	25 : optional list<Task_Output> output,
	26 : optional Reference owner,
	27 : optional list<Reference> partOf,
	28 : optional list<CodeableConcept> performerType,
	29 : optional RequestPriority priority,
	30 : optional CodeableConcept reason,
	31 : optional list<Reference> relevantHistory,
	32 : optional Task_Requester requester,
	33 : optional Task_Restriction restriction,
	34 : required TaskStatus status,
	35 : optional CodeableConcept statusReason,
	36 : optional Narrative text,
}

struct Task_Input
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required CodeableConcept type,
	5 : optional Address valueAddress,
	6 : optional Age valueAge,
	7 : optional Annotation valueAnnotation,
	8 : optional Attachment valueAttachment,
	9 : optional binary valueBase64Binary,
	10 : optional bool valueBoolean,
	11 : optional code valueCode,
	12 : optional CodeableConcept valueCodeableConcept,
	13 : optional Coding valueCoding,
	14 : optional ContactPoint valueContactPoint,
	15 : optional Count valueCount,
	16 : optional i32 valueDate,
	17 : optional i64 valueDateTime,
	18 : optional double valueDecimal,
	19 : optional Distance valueDistance,
	20 : optional Duration valueDuration,
	21 : optional HumanName valueHumanName,
	22 : optional id valueId,
	23 : optional Identifier valueIdentifier,
	24 : optional instant valueInstant,
	25 : optional i64 valueInteger,
	26 : optional markdown valueMarkdown,
	27 : optional Meta valueMeta,
	28 : optional Money valueMoney,
	29 : optional oid valueOid,
	30 : optional Period valuePeriod,
	31 : optional positiveInt valuePositiveInt,
	32 : optional Quantity valueQuantity,
	33 : optional Range valueRange,
	34 : optional Ratio valueRatio,
	35 : optional Reference valueReference,
	36 : optional SampledData valueSampledData,
	37 : optional Signature valueSignature,
	38 : optional string valueString,
	39 : optional time valueTime,
	40 : optional Timing valueTiming,
	41 : optional int32 valueUnsignedInt,
	42 : optional uri valueUri,
}

struct Task_Output
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required CodeableConcept type,
	5 : optional Address valueAddress,
	6 : optional Age valueAge,
	7 : optional Annotation valueAnnotation,
	8 : optional Attachment valueAttachment,
	9 : optional binary valueBase64Binary,
	10 : optional bool valueBoolean,
	11 : optional code valueCode,
	12 : optional CodeableConcept valueCodeableConcept,
	13 : optional Coding valueCoding,
	14 : optional ContactPoint valueContactPoint,
	15 : optional Count valueCount,
	16 : optional i32 valueDate,
	17 : optional i64 valueDateTime,
	18 : optional double valueDecimal,
	19 : optional Distance valueDistance,
	20 : optional Duration valueDuration,
	21 : optional HumanName valueHumanName,
	22 : optional id valueId,
	23 : optional Identifier valueIdentifier,
	24 : optional instant valueInstant,
	25 : optional i64 valueInteger,
	26 : optional markdown valueMarkdown,
	27 : optional Meta valueMeta,
	28 : optional Money valueMoney,
	29 : optional oid valueOid,
	30 : optional Period valuePeriod,
	31 : optional positiveInt valuePositiveInt,
	32 : optional Quantity valueQuantity,
	33 : optional Range valueRange,
	34 : optional Ratio valueRatio,
	35 : optional Reference valueReference,
	36 : optional SampledData valueSampledData,
	37 : optional Signature valueSignature,
	38 : optional string valueString,
	39 : optional time valueTime,
	40 : optional Timing valueTiming,
	41 : optional int32 valueUnsignedInt,
	42 : optional uri valueUri,
}

struct Task_Requester
{
	1 : required Reference agent,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Reference onBehalfOf,
}

struct Task_Restriction
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional Period period,
	5 : optional list<Reference> recipient,
	6 : optional positiveInt repetitions,
}

struct TestReport
{
	1 : optional list<ResourceContainer> contained,
	2 : optional list<binary> extension,
	3 : optional id _id,
	4 : optional Identifier identifier,
	5 : optional uri implicitRules,
	6 : optional i64 issued,
	7 : optional code language,
	8 : optional Meta meta,
	9 : optional list<binary> modifierExtension,
	10 : optional string name,
	11 : optional list<TestReport_Participant> participant,
	12 : required TestReportResult result,
	13 : optional double score,
	14 : optional TestReport_Setup setup,
	15 : required TestReportStatus status,
	16 : optional TestReport_Teardown teardown,
	17 : optional list<TestReport_Test> test,
	18 : required Reference testScript,
	19 : optional string tester,
	20 : optional Narrative text,
}

struct TestScript
{
	1 : optional list<ContactDetail> contact,
	2 : optional list<ResourceContainer> contained,
	3 : optional markdown copyright,
	4 : optional i64 _date,
	5 : optional markdown description,
	6 : optional list<TestScript_Destination> destination,
	7 : optional bool experimental,
	8 : optional list<binary> extension,
	9 : optional list<TestScript_Fixture> fixture,
	10 : optional id _id,
	11 : optional Identifier identifier,
	12 : optional uri implicitRules,
	13 : optional list<CodeableConcept> jurisdiction,
	14 : optional code language,
	15 : optional Meta meta,
	16 : optional TestScript_Metadata metadata,
	17 : optional list<binary> modifierExtension,
	18 : required string name,
	19 : optional list<TestScript_Origin> origin,
	20 : optional list<Reference> profile,
	21 : optional string publisher,
	22 : optional markdown purpose,
	23 : optional list<TestScript_Rule> rule,
	24 : optional list<TestScript_Ruleset> ruleset,
	25 : optional TestScript_Setup setup,
	26 : required PublicationStatus status,
	27 : optional TestScript_Teardown teardown,
	28 : optional list<TestScript_Test> test,
	29 : optional Narrative text,
	30 : optional string title,
	31 : required uri url,
	32 : optional list<UsageContext> useContext,
	33 : optional list<TestScript_Variable> variable,
	34 : optional string version,
}

struct TestScript_Capability
{
	1 : required Reference capabilities,
	2 : optional string description,
	3 : optional i64 destination,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<uri> link,
	7 : optional list<binary> modifierExtension,
	8 : optional list<i64> origin,
	9 : optional bool _required,
	10 : optional bool validated,
}

struct TestScript_Fixture
{
	1 : optional bool autocreate,
	2 : optional bool autodelete,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional Reference resource,
}

struct TestScript_Metadata
{
	1 : required list<TestScript_Capability> capability,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<TestScript_Link> link,
	5 : optional list<binary> modifierExtension,
}

struct TestScript_Rule
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional list<TestScript_Param> param,
	5 : required Reference resource,
}

struct TestScript_Ruleset
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required Reference resource,
	5 : required list<TestScript_Rule1> rule,
}

struct TriggerDefinition
{
	1 : optional DataRequirement eventData,
	2 : optional string eventName,
	3 : optional i32 eventTimingDate,
	4 : optional i64 eventTimingDateTime,
	5 : optional Reference eventTimingReference,
	6 : optional Timing eventTimingTiming,
	7 : optional list<binary> extension,
	8 : optional string id,
	9 : required TriggerType type,
}

struct ValueSet
{
	1 : optional ValueSet_Compose compose,
	2 : optional list<ContactDetail> contact,
	3 : optional list<ResourceContainer> contained,
	4 : optional markdown copyright,
	5 : optional i64 _date,
	6 : optional markdown description,
	7 : optional ValueSet_Expansion expansion,
	8 : optional bool experimental,
	9 : optional bool extensible,
	10 : optional list<binary> extension,
	11 : optional id _id,
	12 : optional list<Identifier> identifier,
	13 : optional bool immutable,
	14 : optional uri implicitRules,
	15 : optional list<CodeableConcept> jurisdiction,
	16 : optional code language,
	17 : optional Meta meta,
	18 : optional list<binary> modifierExtension,
	19 : optional string name,
	20 : optional string publisher,
	21 : optional markdown purpose,
	22 : required PublicationStatus status,
	23 : optional Narrative text,
	24 : optional string title,
	25 : optional uri url,
	26 : optional list<UsageContext> useContext,
	27 : optional string version,
}

struct VisionPrescription
{
	1 : optional list<ResourceContainer> contained,
	2 : optional i64 dateWritten,
	3 : optional list<VisionPrescription_Dispense> dispense,
	4 : optional Reference encounter,
	5 : optional list<binary> extension,
	6 : optional id _id,
	7 : optional list<Identifier> identifier,
	8 : optional uri implicitRules,
	9 : optional code language,
	10 : optional Meta meta,
	11 : optional list<binary> modifierExtension,
	12 : optional Reference patient,
	13 : optional Reference prescriber,
	14 : optional CodeableConcept reasonCodeableConcept,
	15 : optional Reference reasonReference,
	16 : optional FinancialResourceStatusCodes status,
	17 : optional Narrative text,
}

struct VisionPrescription_Dispense
{
	1 : optional double add,
	2 : optional i64 axis,
	3 : optional double backCurve,
	4 : optional VisionBase base,
	5 : optional string brand,
	6 : optional string color,
	7 : optional double cylinder,
	8 : optional double diameter,
	9 : optional Quantity duration,
	10 : optional list<binary> extension,
	11 : optional VisionEyes eye,
	12 : optional string id,
	13 : optional list<binary> modifierExtension,
	14 : optional list<Annotation> note,
	15 : optional double power,
	16 : optional double prism,
	17 : optional CodeableConcept product,
	18 : optional double sphere,
}

struct bdoType
{
	1 : optional list_string_ _class,
	2 : required dirType dir,
	3 : optional string id,
	4 : optional binary lang,
	5 : optional string style,
	6 : optional string title,
}

