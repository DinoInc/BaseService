enum AccountStatus_list
{
	AccountStatus_list_active,
	AccountStatus_list_entered_in_error,
	AccountStatus_list_inactive,
}

enum ActionCardinalityBehavior_list
{
	ActionCardinalityBehavior_list_multiple,
	ActionCardinalityBehavior_list_single,
}

enum ActionConditionKind_list
{
	ActionConditionKind_list_applicability,
	ActionConditionKind_list_start,
	ActionConditionKind_list_stop,
}

enum ActionGroupingBehavior_list
{
	ActionGroupingBehavior_list_logical_group,
	ActionGroupingBehavior_list_sentence_group,
	ActionGroupingBehavior_list_visual_group,
}

enum ActionList_list
{
	ActionList_list_cancel,
	ActionList_list_poll,
	ActionList_list_reprocess,
	ActionList_list_status,
}

enum ActionParticipantType_list
{
	ActionParticipantType_list_patient,
	ActionParticipantType_list_practitioner,
	ActionParticipantType_list_related_person,
}

enum ActionPrecheckBehavior_list
{
	ActionPrecheckBehavior_list_no,
	ActionPrecheckBehavior_list_yes,
}

enum ActionRelationshipType_list
{
	ActionRelationshipType_list_after,
	ActionRelationshipType_list_after_end,
	ActionRelationshipType_list_after_start,
	ActionRelationshipType_list_before,
	ActionRelationshipType_list_before_end,
	ActionRelationshipType_list_before_start,
	ActionRelationshipType_list_concurrent,
	ActionRelationshipType_list_concurrent_with_end,
	ActionRelationshipType_list_concurrent_with_start,
}

enum ActionRequiredBehavior_list
{
	ActionRequiredBehavior_list_could,
	ActionRequiredBehavior_list_must,
	ActionRequiredBehavior_list_must_unless_documented,
}

enum ActionSelectionBehavior_list
{
	ActionSelectionBehavior_list_all,
	ActionSelectionBehavior_list_all_or_none,
	ActionSelectionBehavior_list_any,
	ActionSelectionBehavior_list_at_most_one,
	ActionSelectionBehavior_list_exactly_one,
	ActionSelectionBehavior_list_one_or_more,
}

enum AddressType_list
{
	AddressType_list_both,
	AddressType_list_physical,
	AddressType_list_postal,
}

enum AddressUse_list
{
	AddressUse_list_home,
	AddressUse_list_old,
	AddressUse_list_temp,
	AddressUse_list_work,
}

enum AdministrativeGender_list
{
	AdministrativeGender_list_female,
	AdministrativeGender_list_male,
	AdministrativeGender_list_other,
	AdministrativeGender_list_unknown,
}

enum AdverseEventCategory_list
{
	AdverseEventCategory_list_AE,
	AdverseEventCategory_list_PAE,
}

enum AdverseEventCausality_list
{
	AdverseEventCausality_list_causality1,
	AdverseEventCausality_list_causality2,
}

enum AggregationMode_list
{
	AggregationMode_list_bundled,
	AggregationMode_list_contained,
	AggregationMode_list_referenced,
}

enum AllergyIntoleranceCategory_list
{
	AllergyIntoleranceCategory_list_biologic,
	AllergyIntoleranceCategory_list_environment,
	AllergyIntoleranceCategory_list_food,
	AllergyIntoleranceCategory_list_medication,
}

enum AllergyIntoleranceClinicalStatus_list
{
	AllergyIntoleranceClinicalStatus_list_active,
	AllergyIntoleranceClinicalStatus_list_inactive,
	AllergyIntoleranceClinicalStatus_list_resolved,
}

enum AllergyIntoleranceCriticality_list
{
	AllergyIntoleranceCriticality_list_high,
	AllergyIntoleranceCriticality_list_low,
	AllergyIntoleranceCriticality_list_unable_to_assess,
}

enum AllergyIntoleranceSeverity_list
{
	AllergyIntoleranceSeverity_list_mild,
	AllergyIntoleranceSeverity_list_moderate,
	AllergyIntoleranceSeverity_list_severe,
}

enum AllergyIntoleranceType_list
{
	AllergyIntoleranceType_list_allergy,
	AllergyIntoleranceType_list_intolerance,
}

enum AllergyIntoleranceVerificationStatus_list
{
	AllergyIntoleranceVerificationStatus_list_confirmed,
	AllergyIntoleranceVerificationStatus_list_entered_in_error,
	AllergyIntoleranceVerificationStatus_list_refuted,
	AllergyIntoleranceVerificationStatus_list_unconfirmed,
}

enum AppointmentStatus_list
{
	AppointmentStatus_list_arrived,
	AppointmentStatus_list_booked,
	AppointmentStatus_list_cancelled,
	AppointmentStatus_list_entered_in_error,
	AppointmentStatus_list_fulfilled,
	AppointmentStatus_list_noshow,
	AppointmentStatus_list_pending,
	AppointmentStatus_list_proposed,
}

enum AssertionDirectionType_list
{
	AssertionDirectionType_list_request,
	AssertionDirectionType_list_response,
}

enum AssertionOperatorType_list
{
	AssertionOperatorType_list_contains,
	AssertionOperatorType_list_empty,
	AssertionOperatorType_list_equals,
	AssertionOperatorType_list_eval,
	AssertionOperatorType_list_greaterThan,
	AssertionOperatorType_list_in,
	AssertionOperatorType_list_lessThan,
	AssertionOperatorType_list_notContains,
	AssertionOperatorType_list_notEmpty,
	AssertionOperatorType_list_notEquals,
	AssertionOperatorType_list_notIn,
}

enum AssertionResponseTypes_list
{
	AssertionResponseTypes_list_bad,
	AssertionResponseTypes_list_conflict,
	AssertionResponseTypes_list_created,
	AssertionResponseTypes_list_forbidden,
	AssertionResponseTypes_list_gone,
	AssertionResponseTypes_list_methodNotAllowed,
	AssertionResponseTypes_list_noContent,
	AssertionResponseTypes_list_notFound,
	AssertionResponseTypes_list_notModified,
	AssertionResponseTypes_list_okay,
	AssertionResponseTypes_list_preconditionFailed,
	AssertionResponseTypes_list_unprocessable,
}

enum AuditEventAction_list
{
	AuditEventAction_list_C,
	AuditEventAction_list_D,
	AuditEventAction_list_E,
	AuditEventAction_list_R,
	AuditEventAction_list_U,
}

enum AuditEventAgentNetworkType_list
{
	AuditEventAgentNetworkType_list_1,
	AuditEventAgentNetworkType_list_2,
	AuditEventAgentNetworkType_list_3,
	AuditEventAgentNetworkType_list_4,
	AuditEventAgentNetworkType_list_5,
}

enum AuditEventOutcome_list
{
	AuditEventOutcome_list_0,
	AuditEventOutcome_list_12,
	AuditEventOutcome_list_4,
	AuditEventOutcome_list_8,
}

enum BindingStrength_list
{
	BindingStrength_list_example,
	BindingStrength_list_extensible,
	BindingStrength_list_preferred,
	BindingStrength_list_required,
}

enum BundleType_list
{
	BundleType_list_batch,
	BundleType_list_batch_response,
	BundleType_list_collection,
	BundleType_list_document,
	BundleType_list_history,
	BundleType_list_message,
	BundleType_list_searchset,
	BundleType_list_transaction,
	BundleType_list_transaction_response,
}

enum CapabilityStatementKind_list
{
	CapabilityStatementKind_list_capability,
	CapabilityStatementKind_list_instance,
	CapabilityStatementKind_list_requirements,
}

enum CarePlanActivityStatus_list
{
	CarePlanActivityStatus_list_cancelled,
	CarePlanActivityStatus_list_completed,
	CarePlanActivityStatus_list_in_progress,
	CarePlanActivityStatus_list_not_started,
	CarePlanActivityStatus_list_on_hold,
	CarePlanActivityStatus_list_scheduled,
	CarePlanActivityStatus_list_unknown,
}

enum CarePlanIntent_list
{
	CarePlanIntent_list_option,
	CarePlanIntent_list_order,
	CarePlanIntent_list_plan,
	CarePlanIntent_list_proposal,
}

enum CarePlanStatus_list
{
	CarePlanStatus_list_active,
	CarePlanStatus_list_cancelled,
	CarePlanStatus_list_completed,
	CarePlanStatus_list_draft,
	CarePlanStatus_list_entered_in_error,
	CarePlanStatus_list_suspended,
	CarePlanStatus_list_unknown,
}

enum CareTeamStatus_list
{
	CareTeamStatus_list_active,
	CareTeamStatus_list_entered_in_error,
	CareTeamStatus_list_inactive,
	CareTeamStatus_list_proposed,
	CareTeamStatus_list_suspended,
}

enum ChargeItemStatus_list
{
	ChargeItemStatus_list_aborted,
	ChargeItemStatus_list_billable,
	ChargeItemStatus_list_billed,
	ChargeItemStatus_list_entered_in_error,
	ChargeItemStatus_list_not_billable,
	ChargeItemStatus_list_planned,
	ChargeItemStatus_list_unknown,
}

enum ClinicalImpressionStatus_list
{
	ClinicalImpressionStatus_list_completed,
	ClinicalImpressionStatus_list_draft,
	ClinicalImpressionStatus_list_entered_in_error,
}

enum CodeSystemContentMode_list
{
	CodeSystemContentMode_list_complete,
	CodeSystemContentMode_list_example,
	CodeSystemContentMode_list_fragment,
	CodeSystemContentMode_list_not_present,
}

enum CodeSystemHierarchyMeaning_list
{
	CodeSystemHierarchyMeaning_list_classified_with,
	CodeSystemHierarchyMeaning_list_grouped_by,
	CodeSystemHierarchyMeaning_list_is_a,
	CodeSystemHierarchyMeaning_list_part_of,
}

enum CompartmentType_list
{
	CompartmentType_list_Device,
	CompartmentType_list_Encounter,
	CompartmentType_list_Patient,
	CompartmentType_list_Practitioner,
	CompartmentType_list_RelatedPerson,
}

enum CompositionAttestationMode_list
{
	CompositionAttestationMode_list_legal,
	CompositionAttestationMode_list_official,
	CompositionAttestationMode_list_personal,
	CompositionAttestationMode_list_professional,
}

enum CompositionStatus_list
{
	CompositionStatus_list_amended,
	CompositionStatus_list_entered_in_error,
	CompositionStatus_list_final,
	CompositionStatus_list_preliminary,
}

enum ConceptMapEquivalence_list
{
	ConceptMapEquivalence_list_disjoint,
	ConceptMapEquivalence_list_equal,
	ConceptMapEquivalence_list_equivalent,
	ConceptMapEquivalence_list_inexact,
	ConceptMapEquivalence_list_narrower,
	ConceptMapEquivalence_list_relatedto,
	ConceptMapEquivalence_list_specializes,
	ConceptMapEquivalence_list_subsumes,
	ConceptMapEquivalence_list_unmatched,
	ConceptMapEquivalence_list_wider,
}

enum ConceptMapGroupUnmappedMode_list
{
	ConceptMapGroupUnmappedMode_list_fixed,
	ConceptMapGroupUnmappedMode_list_other_map,
	ConceptMapGroupUnmappedMode_list_provided,
}

enum ConditionClinicalStatusCodes_list
{
	ConditionClinicalStatusCodes_list_active,
	ConditionClinicalStatusCodes_list_inactive,
	ConditionClinicalStatusCodes_list_recurrence,
	ConditionClinicalStatusCodes_list_remission,
	ConditionClinicalStatusCodes_list_resolved,
}

enum ConditionVerificationStatus_list
{
	ConditionVerificationStatus_list_confirmed,
	ConditionVerificationStatus_list_differential,
	ConditionVerificationStatus_list_entered_in_error,
	ConditionVerificationStatus_list_provisional,
	ConditionVerificationStatus_list_refuted,
	ConditionVerificationStatus_list_unknown,
}

enum ConditionalDeleteStatus_list
{
	ConditionalDeleteStatus_list_multiple,
	ConditionalDeleteStatus_list_not_supported,
	ConditionalDeleteStatus_list_single,
}

enum ConditionalReadStatus_list
{
	ConditionalReadStatus_list_full_support,
	ConditionalReadStatus_list_modified_since,
	ConditionalReadStatus_list_not_match,
	ConditionalReadStatus_list_not_supported,
}

enum ConfidentialityClassification_list
{
	ConfidentialityClassification_list_L,
	ConfidentialityClassification_list_M,
	ConfidentialityClassification_list_N,
	ConfidentialityClassification_list_R,
	ConfidentialityClassification_list_U,
	ConfidentialityClassification_list_V,
}

enum ConsentDataMeaning_list
{
	ConsentDataMeaning_list_authoredby,
	ConsentDataMeaning_list_dependents,
	ConsentDataMeaning_list_instance,
	ConsentDataMeaning_list_related,
}

enum ConsentExceptType_list
{
	ConsentExceptType_list_deny,
	ConsentExceptType_list_permit,
}

enum ConsentState_list
{
	ConsentState_list_active,
	ConsentState_list_draft,
	ConsentState_list_entered_in_error,
	ConsentState_list_inactive,
	ConsentState_list_proposed,
	ConsentState_list_rejected,
}

enum ConstraintSeverity_list
{
	ConstraintSeverity_list_error,
	ConstraintSeverity_list_warning,
}

enum ContactPointSystem_list
{
	ContactPointSystem_list_email,
	ContactPointSystem_list_fax,
	ContactPointSystem_list_other,
	ContactPointSystem_list_pager,
	ContactPointSystem_list_phone,
	ContactPointSystem_list_sms,
	ContactPointSystem_list_url,
}

enum ContactPointUse_list
{
	ContactPointUse_list_home,
	ContactPointUse_list_mobile,
	ContactPointUse_list_old,
	ContactPointUse_list_temp,
	ContactPointUse_list_work,
}

enum ContentType_list
{
	ContentType_list_json,
	ContentType_list_none,
	ContentType_list_ttl,
	ContentType_list_xml,
}

enum ContractResourceStatusCodes_list
{
	ContractResourceStatusCodes_list_amended,
	ContractResourceStatusCodes_list_appended,
	ContractResourceStatusCodes_list_cancelled,
	ContractResourceStatusCodes_list_disputed,
	ContractResourceStatusCodes_list_entered_in_error,
	ContractResourceStatusCodes_list_executable,
	ContractResourceStatusCodes_list_executed,
	ContractResourceStatusCodes_list_negotiable,
	ContractResourceStatusCodes_list_offered,
	ContractResourceStatusCodes_list_policy,
	ContractResourceStatusCodes_list_rejected,
	ContractResourceStatusCodes_list_renewed,
	ContractResourceStatusCodes_list_resolved,
	ContractResourceStatusCodes_list_revoked,
	ContractResourceStatusCodes_list_terminated,
}

enum ContributorType_list
{
	ContributorType_list_author,
	ContributorType_list_editor,
	ContributorType_list_endorser,
	ContributorType_list_reviewer,
}

enum DataElementStringency_list
{
	DataElementStringency_list_comparable,
	DataElementStringency_list_convertable,
	DataElementStringency_list_equivalent,
	DataElementStringency_list_flexible,
	DataElementStringency_list_fully_specified,
	DataElementStringency_list_scaleable,
}

enum DaysOfWeek_list
{
	DaysOfWeek_list_fri,
	DaysOfWeek_list_mon,
	DaysOfWeek_list_sat,
	DaysOfWeek_list_sun,
	DaysOfWeek_list_thu,
	DaysOfWeek_list_tue,
	DaysOfWeek_list_wed,
}

enum DetectedIssueSeverity_list
{
	DetectedIssueSeverity_list_high,
	DetectedIssueSeverity_list_low,
	DetectedIssueSeverity_list_moderate,
}

enum DeviceMetricCalibrationState_list
{
	DeviceMetricCalibrationState_list_calibrated,
	DeviceMetricCalibrationState_list_calibration_required,
	DeviceMetricCalibrationState_list_not_calibrated,
	DeviceMetricCalibrationState_list_unspecified,
}

enum DeviceMetricCalibrationType_list
{
	DeviceMetricCalibrationType_list_gain,
	DeviceMetricCalibrationType_list_offset,
	DeviceMetricCalibrationType_list_two_point,
	DeviceMetricCalibrationType_list_unspecified,
}

enum DeviceMetricCategory_list
{
	DeviceMetricCategory_list_calculation,
	DeviceMetricCategory_list_measurement,
	DeviceMetricCategory_list_setting,
	DeviceMetricCategory_list_unspecified,
}

enum DeviceMetricColor_list
{
	DeviceMetricColor_list_black,
	DeviceMetricColor_list_blue,
	DeviceMetricColor_list_cyan,
	DeviceMetricColor_list_green,
	DeviceMetricColor_list_magenta,
	DeviceMetricColor_list_red,
	DeviceMetricColor_list_white,
	DeviceMetricColor_list_yellow,
}

enum DeviceMetricOperationalStatus_list
{
	DeviceMetricOperationalStatus_list_entered_in_error,
	DeviceMetricOperationalStatus_list_off,
	DeviceMetricOperationalStatus_list_on,
	DeviceMetricOperationalStatus_list_standby,
}

enum DeviceUseStatementStatus_list
{
	DeviceUseStatementStatus_list_active,
	DeviceUseStatementStatus_list_completed,
	DeviceUseStatementStatus_list_entered_in_error,
	DeviceUseStatementStatus_list_intended,
	DeviceUseStatementStatus_list_on_hold,
	DeviceUseStatementStatus_list_stopped,
}

enum DiagnosticReportStatus_list
{
	DiagnosticReportStatus_list_amended,
	DiagnosticReportStatus_list_appended,
	DiagnosticReportStatus_list_cancelled,
	DiagnosticReportStatus_list_corrected,
	DiagnosticReportStatus_list_entered_in_error,
	DiagnosticReportStatus_list_final,
	DiagnosticReportStatus_list_partial,
	DiagnosticReportStatus_list_preliminary,
	DiagnosticReportStatus_list_registered,
	DiagnosticReportStatus_list_unknown,
}

enum DigitalMediaType_list
{
	DigitalMediaType_list_audio,
	DigitalMediaType_list_photo,
	DigitalMediaType_list_video,
}

enum DiscriminatorType_list
{
	DiscriminatorType_list_exists,
	DiscriminatorType_list_pattern,
	DiscriminatorType_list_profile,
	DiscriminatorType_list_type,
	DiscriminatorType_list_value,
}

enum DocumentMode_list
{
	DocumentMode_list_consumer,
	DocumentMode_list_producer,
}

enum DocumentReferenceStatus_list
{
	DocumentReferenceStatus_list_current,
	DocumentReferenceStatus_list_entered_in_error,
	DocumentReferenceStatus_list_superseded,
}

enum DocumentRelationshipType_list
{
	DocumentRelationshipType_list_appends,
	DocumentRelationshipType_list_replaces,
	DocumentRelationshipType_list_signs,
	DocumentRelationshipType_list_transforms,
}

enum EncounterLocationStatus_list
{
	EncounterLocationStatus_list_active,
	EncounterLocationStatus_list_completed,
	EncounterLocationStatus_list_planned,
	EncounterLocationStatus_list_reserved,
}

enum EncounterStatus_list
{
	EncounterStatus_list_arrived,
	EncounterStatus_list_cancelled,
	EncounterStatus_list_entered_in_error,
	EncounterStatus_list_finished,
	EncounterStatus_list_in_progress,
	EncounterStatus_list_onleave,
	EncounterStatus_list_planned,
	EncounterStatus_list_triaged,
	EncounterStatus_list_unknown,
}

enum EndpointStatus_list
{
	EndpointStatus_list_active,
	EndpointStatus_list_entered_in_error,
	EndpointStatus_list_error,
	EndpointStatus_list_off,
	EndpointStatus_list_suspended,
	EndpointStatus_list_test,
}

enum EpisodeOfCareStatus_list
{
	EpisodeOfCareStatus_list_active,
	EpisodeOfCareStatus_list_cancelled,
	EpisodeOfCareStatus_list_entered_in_error,
	EpisodeOfCareStatus_list_finished,
	EpisodeOfCareStatus_list_onhold,
	EpisodeOfCareStatus_list_planned,
	EpisodeOfCareStatus_list_waitlist,
}

enum EventCapabilityMode_list
{
	EventCapabilityMode_list_receiver,
	EventCapabilityMode_list_sender,
}

enum EventStatus_list
{
	EventStatus_list_aborted,
	EventStatus_list_completed,
	EventStatus_list_entered_in_error,
	EventStatus_list_in_progress,
	EventStatus_list_preparation,
	EventStatus_list_suspended,
	EventStatus_list_unknown,
}

enum EventTiming_list
{
	EventTiming_list_AC,
	EventTiming_list_ACD,
	EventTiming_list_ACM,
	EventTiming_list_ACV,
	EventTiming_list_AFT,
	EventTiming_list_C,
	EventTiming_list_CD,
	EventTiming_list_CM,
	EventTiming_list_CV,
	EventTiming_list_EVE,
	EventTiming_list_HS,
	EventTiming_list_MORN,
	EventTiming_list_NIGHT,
	EventTiming_list_PC,
	EventTiming_list_PCD,
	EventTiming_list_PCM,
	EventTiming_list_PCV,
	EventTiming_list_PHS,
	EventTiming_list_WAKE,
}

enum ExplanationOfBenefitStatus_list
{
	ExplanationOfBenefitStatus_list_active,
	ExplanationOfBenefitStatus_list_cancelled,
	ExplanationOfBenefitStatus_list_draft,
	ExplanationOfBenefitStatus_list_entered_in_error,
}

enum ExtensionContext_list
{
	ExtensionContext_list_datatype,
	ExtensionContext_list_extension,
	ExtensionContext_list_resource,
}

enum FHIRAllTypes_list
{
	FHIRAllTypes_list_Account,
	FHIRAllTypes_list_ActivityDefinition,
	FHIRAllTypes_list_Address,
	FHIRAllTypes_list_AdverseEvent,
	FHIRAllTypes_list_Age,
	FHIRAllTypes_list_AllergyIntolerance,
	FHIRAllTypes_list_Annotation,
	FHIRAllTypes_list_Any,
	FHIRAllTypes_list_Appointment,
	FHIRAllTypes_list_AppointmentResponse,
	FHIRAllTypes_list_Attachment,
	FHIRAllTypes_list_AuditEvent,
	FHIRAllTypes_list_BackboneElement,
	FHIRAllTypes_list_Basic,
	FHIRAllTypes_list_Binary,
	FHIRAllTypes_list_BodySite,
	FHIRAllTypes_list_Bundle,
	FHIRAllTypes_list_CapabilityStatement,
	FHIRAllTypes_list_CarePlan,
	FHIRAllTypes_list_CareTeam,
	FHIRAllTypes_list_ChargeItem,
	FHIRAllTypes_list_Claim,
	FHIRAllTypes_list_ClaimResponse,
	FHIRAllTypes_list_ClinicalImpression,
	FHIRAllTypes_list_CodeSystem,
	FHIRAllTypes_list_CodeableConcept,
	FHIRAllTypes_list_Coding,
	FHIRAllTypes_list_Communication,
	FHIRAllTypes_list_CommunicationRequest,
	FHIRAllTypes_list_CompartmentDefinition,
	FHIRAllTypes_list_Composition,
	FHIRAllTypes_list_ConceptMap,
	FHIRAllTypes_list_Condition,
	FHIRAllTypes_list_Consent,
	FHIRAllTypes_list_ContactDetail,
	FHIRAllTypes_list_ContactPoint,
	FHIRAllTypes_list_Contract,
	FHIRAllTypes_list_Contributor,
	FHIRAllTypes_list_Count,
	FHIRAllTypes_list_Coverage,
	FHIRAllTypes_list_DataElement,
	FHIRAllTypes_list_DataRequirement,
	FHIRAllTypes_list_DetectedIssue,
	FHIRAllTypes_list_Device,
	FHIRAllTypes_list_DeviceComponent,
	FHIRAllTypes_list_DeviceMetric,
	FHIRAllTypes_list_DeviceRequest,
	FHIRAllTypes_list_DeviceUseStatement,
	FHIRAllTypes_list_DiagnosticReport,
	FHIRAllTypes_list_Distance,
	FHIRAllTypes_list_DocumentManifest,
	FHIRAllTypes_list_DocumentReference,
	FHIRAllTypes_list_DomainResource,
	FHIRAllTypes_list_Dosage,
	FHIRAllTypes_list_Duration,
	FHIRAllTypes_list_Element,
	FHIRAllTypes_list_ElementDefinition,
	FHIRAllTypes_list_EligibilityRequest,
	FHIRAllTypes_list_EligibilityResponse,
	FHIRAllTypes_list_Encounter,
	FHIRAllTypes_list_Endpoint,
	FHIRAllTypes_list_EnrollmentRequest,
	FHIRAllTypes_list_EnrollmentResponse,
	FHIRAllTypes_list_EpisodeOfCare,
	FHIRAllTypes_list_ExpansionProfile,
	FHIRAllTypes_list_ExplanationOfBenefit,
	FHIRAllTypes_list_Extension,
	FHIRAllTypes_list_FamilyMemberHistory,
	FHIRAllTypes_list_Flag,
	FHIRAllTypes_list_Goal,
	FHIRAllTypes_list_GraphDefinition,
	FHIRAllTypes_list_Group,
	FHIRAllTypes_list_GuidanceResponse,
	FHIRAllTypes_list_HealthcareService,
	FHIRAllTypes_list_HumanName,
	FHIRAllTypes_list_Identifier,
	FHIRAllTypes_list_ImagingManifest,
	FHIRAllTypes_list_ImagingStudy,
	FHIRAllTypes_list_Immunization,
	FHIRAllTypes_list_ImmunizationRecommendation,
	FHIRAllTypes_list_ImplementationGuide,
	FHIRAllTypes_list_Library,
	FHIRAllTypes_list_Linkage,
	FHIRAllTypes_list_List,
	FHIRAllTypes_list_Location,
	FHIRAllTypes_list_Measure,
	FHIRAllTypes_list_MeasureReport,
	FHIRAllTypes_list_Media,
	FHIRAllTypes_list_Medication,
	FHIRAllTypes_list_MedicationAdministration,
	FHIRAllTypes_list_MedicationDispense,
	FHIRAllTypes_list_MedicationRequest,
	FHIRAllTypes_list_MedicationStatement,
	FHIRAllTypes_list_MessageDefinition,
	FHIRAllTypes_list_MessageHeader,
	FHIRAllTypes_list_Meta,
	FHIRAllTypes_list_Money,
	FHIRAllTypes_list_NamingSystem,
	FHIRAllTypes_list_Narrative,
	FHIRAllTypes_list_NutritionOrder,
	FHIRAllTypes_list_Observation,
	FHIRAllTypes_list_OperationDefinition,
	FHIRAllTypes_list_OperationOutcome,
	FHIRAllTypes_list_Organization,
	FHIRAllTypes_list_ParameterDefinition,
	FHIRAllTypes_list_Parameters,
	FHIRAllTypes_list_Patient,
	FHIRAllTypes_list_PaymentNotice,
	FHIRAllTypes_list_PaymentReconciliation,
	FHIRAllTypes_list_Period,
	FHIRAllTypes_list_Person,
	FHIRAllTypes_list_PlanDefinition,
	FHIRAllTypes_list_Practitioner,
	FHIRAllTypes_list_PractitionerRole,
	FHIRAllTypes_list_Procedure,
	FHIRAllTypes_list_ProcedureRequest,
	FHIRAllTypes_list_ProcessRequest,
	FHIRAllTypes_list_ProcessResponse,
	FHIRAllTypes_list_Provenance,
	FHIRAllTypes_list_Quantity,
	FHIRAllTypes_list_Questionnaire,
	FHIRAllTypes_list_QuestionnaireResponse,
	FHIRAllTypes_list_Range,
	FHIRAllTypes_list_Ratio,
	FHIRAllTypes_list_Reference,
	FHIRAllTypes_list_ReferralRequest,
	FHIRAllTypes_list_RelatedArtifact,
	FHIRAllTypes_list_RelatedPerson,
	FHIRAllTypes_list_RequestGroup,
	FHIRAllTypes_list_ResearchStudy,
	FHIRAllTypes_list_ResearchSubject,
	FHIRAllTypes_list_Resource,
	FHIRAllTypes_list_RiskAssessment,
	FHIRAllTypes_list_SampledData,
	FHIRAllTypes_list_Schedule,
	FHIRAllTypes_list_SearchParameter,
	FHIRAllTypes_list_Sequence,
	FHIRAllTypes_list_ServiceDefinition,
	FHIRAllTypes_list_Signature,
	FHIRAllTypes_list_SimpleQuantity,
	FHIRAllTypes_list_Slot,
	FHIRAllTypes_list_Specimen,
	FHIRAllTypes_list_StructureDefinition,
	FHIRAllTypes_list_StructureMap,
	FHIRAllTypes_list_Subscription,
	FHIRAllTypes_list_Substance,
	FHIRAllTypes_list_SupplyDelivery,
	FHIRAllTypes_list_SupplyRequest,
	FHIRAllTypes_list_Task,
	FHIRAllTypes_list_TestReport,
	FHIRAllTypes_list_TestScript,
	FHIRAllTypes_list_Timing,
	FHIRAllTypes_list_TriggerDefinition,
	FHIRAllTypes_list_Type,
	FHIRAllTypes_list_UsageContext,
	FHIRAllTypes_list_ValueSet,
	FHIRAllTypes_list_VisionPrescription,
	FHIRAllTypes_list_base64Binary,
	FHIRAllTypes_list_boolean,
	FHIRAllTypes_list_code,
	FHIRAllTypes_list_date,
	FHIRAllTypes_list_dateTime,
	FHIRAllTypes_list_decimal,
	FHIRAllTypes_list_id,
	FHIRAllTypes_list_instant,
	FHIRAllTypes_list_integer,
	FHIRAllTypes_list_markdown,
	FHIRAllTypes_list_oid,
	FHIRAllTypes_list_positiveInt,
	FHIRAllTypes_list_string,
	FHIRAllTypes_list_time,
	FHIRAllTypes_list_unsignedInt,
	FHIRAllTypes_list_uri,
	FHIRAllTypes_list_uuid,
	FHIRAllTypes_list_xhtml,
}

enum FHIRDefinedType_list
{
	FHIRDefinedType_list_Account,
	FHIRDefinedType_list_ActivityDefinition,
	FHIRDefinedType_list_Address,
	FHIRDefinedType_list_AdverseEvent,
	FHIRDefinedType_list_Age,
	FHIRDefinedType_list_AllergyIntolerance,
	FHIRDefinedType_list_Annotation,
	FHIRDefinedType_list_Appointment,
	FHIRDefinedType_list_AppointmentResponse,
	FHIRDefinedType_list_Attachment,
	FHIRDefinedType_list_AuditEvent,
	FHIRDefinedType_list_BackboneElement,
	FHIRDefinedType_list_Basic,
	FHIRDefinedType_list_Binary,
	FHIRDefinedType_list_BodySite,
	FHIRDefinedType_list_Bundle,
	FHIRDefinedType_list_CapabilityStatement,
	FHIRDefinedType_list_CarePlan,
	FHIRDefinedType_list_CareTeam,
	FHIRDefinedType_list_ChargeItem,
	FHIRDefinedType_list_Claim,
	FHIRDefinedType_list_ClaimResponse,
	FHIRDefinedType_list_ClinicalImpression,
	FHIRDefinedType_list_CodeSystem,
	FHIRDefinedType_list_CodeableConcept,
	FHIRDefinedType_list_Coding,
	FHIRDefinedType_list_Communication,
	FHIRDefinedType_list_CommunicationRequest,
	FHIRDefinedType_list_CompartmentDefinition,
	FHIRDefinedType_list_Composition,
	FHIRDefinedType_list_ConceptMap,
	FHIRDefinedType_list_Condition,
	FHIRDefinedType_list_Consent,
	FHIRDefinedType_list_ContactDetail,
	FHIRDefinedType_list_ContactPoint,
	FHIRDefinedType_list_Contract,
	FHIRDefinedType_list_Contributor,
	FHIRDefinedType_list_Count,
	FHIRDefinedType_list_Coverage,
	FHIRDefinedType_list_DataElement,
	FHIRDefinedType_list_DataRequirement,
	FHIRDefinedType_list_DetectedIssue,
	FHIRDefinedType_list_Device,
	FHIRDefinedType_list_DeviceComponent,
	FHIRDefinedType_list_DeviceMetric,
	FHIRDefinedType_list_DeviceRequest,
	FHIRDefinedType_list_DeviceUseStatement,
	FHIRDefinedType_list_DiagnosticReport,
	FHIRDefinedType_list_Distance,
	FHIRDefinedType_list_DocumentManifest,
	FHIRDefinedType_list_DocumentReference,
	FHIRDefinedType_list_DomainResource,
	FHIRDefinedType_list_Dosage,
	FHIRDefinedType_list_Duration,
	FHIRDefinedType_list_Element,
	FHIRDefinedType_list_ElementDefinition,
	FHIRDefinedType_list_EligibilityRequest,
	FHIRDefinedType_list_EligibilityResponse,
	FHIRDefinedType_list_Encounter,
	FHIRDefinedType_list_Endpoint,
	FHIRDefinedType_list_EnrollmentRequest,
	FHIRDefinedType_list_EnrollmentResponse,
	FHIRDefinedType_list_EpisodeOfCare,
	FHIRDefinedType_list_ExpansionProfile,
	FHIRDefinedType_list_ExplanationOfBenefit,
	FHIRDefinedType_list_Extension,
	FHIRDefinedType_list_FamilyMemberHistory,
	FHIRDefinedType_list_Flag,
	FHIRDefinedType_list_Goal,
	FHIRDefinedType_list_GraphDefinition,
	FHIRDefinedType_list_Group,
	FHIRDefinedType_list_GuidanceResponse,
	FHIRDefinedType_list_HealthcareService,
	FHIRDefinedType_list_HumanName,
	FHIRDefinedType_list_Identifier,
	FHIRDefinedType_list_ImagingManifest,
	FHIRDefinedType_list_ImagingStudy,
	FHIRDefinedType_list_Immunization,
	FHIRDefinedType_list_ImmunizationRecommendation,
	FHIRDefinedType_list_ImplementationGuide,
	FHIRDefinedType_list_Library,
	FHIRDefinedType_list_Linkage,
	FHIRDefinedType_list_List,
	FHIRDefinedType_list_Location,
	FHIRDefinedType_list_Measure,
	FHIRDefinedType_list_MeasureReport,
	FHIRDefinedType_list_Media,
	FHIRDefinedType_list_Medication,
	FHIRDefinedType_list_MedicationAdministration,
	FHIRDefinedType_list_MedicationDispense,
	FHIRDefinedType_list_MedicationRequest,
	FHIRDefinedType_list_MedicationStatement,
	FHIRDefinedType_list_MessageDefinition,
	FHIRDefinedType_list_MessageHeader,
	FHIRDefinedType_list_Meta,
	FHIRDefinedType_list_Money,
	FHIRDefinedType_list_NamingSystem,
	FHIRDefinedType_list_Narrative,
	FHIRDefinedType_list_NutritionOrder,
	FHIRDefinedType_list_Observation,
	FHIRDefinedType_list_OperationDefinition,
	FHIRDefinedType_list_OperationOutcome,
	FHIRDefinedType_list_Organization,
	FHIRDefinedType_list_ParameterDefinition,
	FHIRDefinedType_list_Parameters,
	FHIRDefinedType_list_Patient,
	FHIRDefinedType_list_PaymentNotice,
	FHIRDefinedType_list_PaymentReconciliation,
	FHIRDefinedType_list_Period,
	FHIRDefinedType_list_Person,
	FHIRDefinedType_list_PlanDefinition,
	FHIRDefinedType_list_Practitioner,
	FHIRDefinedType_list_PractitionerRole,
	FHIRDefinedType_list_Procedure,
	FHIRDefinedType_list_ProcedureRequest,
	FHIRDefinedType_list_ProcessRequest,
	FHIRDefinedType_list_ProcessResponse,
	FHIRDefinedType_list_Provenance,
	FHIRDefinedType_list_Quantity,
	FHIRDefinedType_list_Questionnaire,
	FHIRDefinedType_list_QuestionnaireResponse,
	FHIRDefinedType_list_Range,
	FHIRDefinedType_list_Ratio,
	FHIRDefinedType_list_Reference,
	FHIRDefinedType_list_ReferralRequest,
	FHIRDefinedType_list_RelatedArtifact,
	FHIRDefinedType_list_RelatedPerson,
	FHIRDefinedType_list_RequestGroup,
	FHIRDefinedType_list_ResearchStudy,
	FHIRDefinedType_list_ResearchSubject,
	FHIRDefinedType_list_Resource,
	FHIRDefinedType_list_RiskAssessment,
	FHIRDefinedType_list_SampledData,
	FHIRDefinedType_list_Schedule,
	FHIRDefinedType_list_SearchParameter,
	FHIRDefinedType_list_Sequence,
	FHIRDefinedType_list_ServiceDefinition,
	FHIRDefinedType_list_Signature,
	FHIRDefinedType_list_SimpleQuantity,
	FHIRDefinedType_list_Slot,
	FHIRDefinedType_list_Specimen,
	FHIRDefinedType_list_StructureDefinition,
	FHIRDefinedType_list_StructureMap,
	FHIRDefinedType_list_Subscription,
	FHIRDefinedType_list_Substance,
	FHIRDefinedType_list_SupplyDelivery,
	FHIRDefinedType_list_SupplyRequest,
	FHIRDefinedType_list_Task,
	FHIRDefinedType_list_TestReport,
	FHIRDefinedType_list_TestScript,
	FHIRDefinedType_list_Timing,
	FHIRDefinedType_list_TriggerDefinition,
	FHIRDefinedType_list_UsageContext,
	FHIRDefinedType_list_ValueSet,
	FHIRDefinedType_list_VisionPrescription,
	FHIRDefinedType_list_base64Binary,
	FHIRDefinedType_list_boolean,
	FHIRDefinedType_list_code,
	FHIRDefinedType_list_date,
	FHIRDefinedType_list_dateTime,
	FHIRDefinedType_list_decimal,
	FHIRDefinedType_list_id,
	FHIRDefinedType_list_instant,
	FHIRDefinedType_list_integer,
	FHIRDefinedType_list_markdown,
	FHIRDefinedType_list_oid,
	FHIRDefinedType_list_positiveInt,
	FHIRDefinedType_list_string,
	FHIRDefinedType_list_time,
	FHIRDefinedType_list_unsignedInt,
	FHIRDefinedType_list_uri,
	FHIRDefinedType_list_uuid,
	FHIRDefinedType_list_xhtml,
}

enum FHIRDeviceStatus_list
{
	FHIRDeviceStatus_list_active,
	FHIRDeviceStatus_list_entered_in_error,
	FHIRDeviceStatus_list_inactive,
	FHIRDeviceStatus_list_unknown,
}

enum FHIRSubstanceStatus_list
{
	FHIRSubstanceStatus_list_active,
	FHIRSubstanceStatus_list_entered_in_error,
	FHIRSubstanceStatus_list_inactive,
}

enum FamilyHistoryStatus_list
{
	FamilyHistoryStatus_list_completed,
	FamilyHistoryStatus_list_entered_in_error,
	FamilyHistoryStatus_list_health_unknown,
	FamilyHistoryStatus_list_partial,
}

enum FilterOperator_list
{
	FilterOperator_list__,
	FilterOperator_list_descendent_of,
	FilterOperator_list_exists,
	FilterOperator_list_generalizes,
	FilterOperator_list_in,
	FilterOperator_list_is_a,
	FilterOperator_list_is_not_a,
	FilterOperator_list_not_in,
	FilterOperator_list_regex,
}

enum FinancialResourceStatusCodes_list
{
	FinancialResourceStatusCodes_list_active,
	FinancialResourceStatusCodes_list_cancelled,
	FinancialResourceStatusCodes_list_draft,
	FinancialResourceStatusCodes_list_entered_in_error,
}

enum FlagStatus_list
{
	FlagStatus_list_active,
	FlagStatus_list_entered_in_error,
	FlagStatus_list_inactive,
}

enum GoalStatus_list
{
	GoalStatus_list_accepted,
	GoalStatus_list_achieved,
	GoalStatus_list_ahead_of_target,
	GoalStatus_list_behind_target,
	GoalStatus_list_cancelled,
	GoalStatus_list_entered_in_error,
	GoalStatus_list_in_progress,
	GoalStatus_list_on_hold,
	GoalStatus_list_on_target,
	GoalStatus_list_planned,
	GoalStatus_list_proposed,
	GoalStatus_list_rejected,
	GoalStatus_list_sustaining,
}

enum GraphCompartmentRule_list
{
	GraphCompartmentRule_list_custom,
	GraphCompartmentRule_list_different,
	GraphCompartmentRule_list_identical,
	GraphCompartmentRule_list_matching,
}

enum GroupType_list
{
	GroupType_list_animal,
	GroupType_list_device,
	GroupType_list_medication,
	GroupType_list_person,
	GroupType_list_practitioner,
	GroupType_list_substance,
}

enum GuidanceResponseStatus_list
{
	GuidanceResponseStatus_list_data_requested,
	GuidanceResponseStatus_list_data_required,
	GuidanceResponseStatus_list_entered_in_error,
	GuidanceResponseStatus_list_failure,
	GuidanceResponseStatus_list_in_progress,
	GuidanceResponseStatus_list_success,
}

enum GuideDependencyType_list
{
	GuideDependencyType_list_inclusion,
	GuideDependencyType_list_reference,
}

enum GuidePageKind_list
{
	GuidePageKind_list_dictionary,
	GuidePageKind_list_directory,
	GuidePageKind_list_example,
	GuidePageKind_list_include,
	GuidePageKind_list_list,
	GuidePageKind_list_page,
	GuidePageKind_list_resource,
	GuidePageKind_list_toc,
}

enum HTTPVerb_list
{
	HTTPVerb_list_DELETE,
	HTTPVerb_list_GET,
	HTTPVerb_list_POST,
	HTTPVerb_list_PUT,
}

enum IdentifierUse_list
{
	IdentifierUse_list_official,
	IdentifierUse_list_secondary,
	IdentifierUse_list_temp,
	IdentifierUse_list_usual,
}

enum IdentityAssuranceLevel_list
{
	IdentityAssuranceLevel_list_level1,
	IdentityAssuranceLevel_list_level2,
	IdentityAssuranceLevel_list_level3,
	IdentityAssuranceLevel_list_level4,
}

enum ImmunizationStatusCodes_list
{
	ImmunizationStatusCodes_list_completed,
	ImmunizationStatusCodes_list_entered_in_error,
}

enum InstanceAvailability_list
{
	InstanceAvailability_list_NEARLINE,
	InstanceAvailability_list_OFFLINE,
	InstanceAvailability_list_ONLINE,
	InstanceAvailability_list_UNAVAILABLE,
}

enum IssueSeverity_list
{
	IssueSeverity_list_error,
	IssueSeverity_list_fatal,
	IssueSeverity_list_information,
	IssueSeverity_list_warning,
}

enum IssueType_list
{
	IssueType_list_business_rule,
	IssueType_list_code_invalid,
	IssueType_list_conflict,
	IssueType_list_duplicate,
	IssueType_list_exception,
	IssueType_list_expired,
	IssueType_list_extension,
	IssueType_list_forbidden,
	IssueType_list_incomplete,
	IssueType_list_informational,
	IssueType_list_invalid,
	IssueType_list_invariant,
	IssueType_list_lock_error,
	IssueType_list_login,
	IssueType_list_no_store,
	IssueType_list_not_found,
	IssueType_list_not_supported,
	IssueType_list_processing,
	IssueType_list_required,
	IssueType_list_security,
	IssueType_list_structure,
	IssueType_list_suppressed,
	IssueType_list_throttled,
	IssueType_list_timeout,
	IssueType_list_too_costly,
	IssueType_list_too_long,
	IssueType_list_transient,
	IssueType_list_unknown,
	IssueType_list_value,
}

enum LinkType_list
{
	LinkType_list_refer,
	LinkType_list_replaced_by,
	LinkType_list_replaces,
	LinkType_list_seealso,
}

enum LinkageType_list
{
	LinkageType_list_alternate,
	LinkageType_list_historical,
	LinkageType_list_source,
}

enum ListMode_list
{
	ListMode_list_changes,
	ListMode_list_snapshot,
	ListMode_list_working,
}

enum ListStatus_list
{
	ListStatus_list_current,
	ListStatus_list_entered_in_error,
	ListStatus_list_retired,
}

enum LocationMode_list
{
	LocationMode_list_instance,
	LocationMode_list_kind,
}

enum LocationStatus_list
{
	LocationStatus_list_active,
	LocationStatus_list_inactive,
	LocationStatus_list_suspended,
}

enum MeasmntPrinciple_list
{
	MeasmntPrinciple_list_acoustical,
	MeasmntPrinciple_list_biological,
	MeasmntPrinciple_list_chemical,
	MeasmntPrinciple_list_electrical,
	MeasmntPrinciple_list_impedance,
	MeasmntPrinciple_list_manual,
	MeasmntPrinciple_list_mechanical,
	MeasmntPrinciple_list_nuclear,
	MeasmntPrinciple_list_optical,
	MeasmntPrinciple_list_other,
	MeasmntPrinciple_list_thermal,
}

enum MeasureReportStatus_list
{
	MeasureReportStatus_list_complete,
	MeasureReportStatus_list_error,
	MeasureReportStatus_list_pending,
}

enum MeasureReportType_list
{
	MeasureReportType_list_individual,
	MeasureReportType_list_patient_list,
	MeasureReportType_list_summary,
}

enum MedicationAdministrationStatus_list
{
	MedicationAdministrationStatus_list_completed,
	MedicationAdministrationStatus_list_entered_in_error,
	MedicationAdministrationStatus_list_in_progress,
	MedicationAdministrationStatus_list_on_hold,
	MedicationAdministrationStatus_list_stopped,
	MedicationAdministrationStatus_list_unknown,
}

enum MedicationDispenseStatus_list
{
	MedicationDispenseStatus_list_completed,
	MedicationDispenseStatus_list_entered_in_error,
	MedicationDispenseStatus_list_in_progress,
	MedicationDispenseStatus_list_on_hold,
	MedicationDispenseStatus_list_preparation,
	MedicationDispenseStatus_list_stopped,
}

enum MedicationRequestIntent_list
{
	MedicationRequestIntent_list_instance_order,
	MedicationRequestIntent_list_order,
	MedicationRequestIntent_list_plan,
	MedicationRequestIntent_list_proposal,
}

enum MedicationRequestPriority_list
{
	MedicationRequestPriority_list_asap,
	MedicationRequestPriority_list_routine,
	MedicationRequestPriority_list_stat,
	MedicationRequestPriority_list_urgent,
}

enum MedicationRequestStatus_list
{
	MedicationRequestStatus_list_active,
	MedicationRequestStatus_list_cancelled,
	MedicationRequestStatus_list_completed,
	MedicationRequestStatus_list_draft,
	MedicationRequestStatus_list_entered_in_error,
	MedicationRequestStatus_list_on_hold,
	MedicationRequestStatus_list_stopped,
	MedicationRequestStatus_list_unknown,
}

enum MedicationStatementStatus_list
{
	MedicationStatementStatus_list_active,
	MedicationStatementStatus_list_completed,
	MedicationStatementStatus_list_entered_in_error,
	MedicationStatementStatus_list_intended,
	MedicationStatementStatus_list_on_hold,
	MedicationStatementStatus_list_stopped,
}

enum MedicationStatementTaken_list
{
	MedicationStatementTaken_list_n,
	MedicationStatementTaken_list_na,
	MedicationStatementTaken_list_unk,
	MedicationStatementTaken_list_y,
}

enum MedicationStatus_list
{
	MedicationStatus_list_active,
	MedicationStatus_list_entered_in_error,
	MedicationStatus_list_inactive,
}

enum MessageSignificanceCategory_list
{
	MessageSignificanceCategory_list_Consequence,
	MessageSignificanceCategory_list_Currency,
	MessageSignificanceCategory_list_Notification,
}

enum NameUse_list
{
	NameUse_list_anonymous,
	NameUse_list_maiden,
	NameUse_list_nickname,
	NameUse_list_official,
	NameUse_list_old,
	NameUse_list_temp,
	NameUse_list_usual,
}

enum NamingSystemIdentifierType_list
{
	NamingSystemIdentifierType_list_oid,
	NamingSystemIdentifierType_list_other,
	NamingSystemIdentifierType_list_uri,
	NamingSystemIdentifierType_list_uuid,
}

enum NamingSystemType_list
{
	NamingSystemType_list_codesystem,
	NamingSystemType_list_identifier,
	NamingSystemType_list_root,
}

enum NarrativeStatus_list
{
	NarrativeStatus_list_additional,
	NarrativeStatus_list_empty,
	NarrativeStatus_list_extensions,
	NarrativeStatus_list_generated,
}

enum NoteType_list
{
	NoteType_list_display,
	NoteType_list_print,
	NoteType_list_printoper,
}

enum NutritionOrderStatus_list
{
	NutritionOrderStatus_list_active,
	NutritionOrderStatus_list_cancelled,
	NutritionOrderStatus_list_completed,
	NutritionOrderStatus_list_draft,
	NutritionOrderStatus_list_entered_in_error,
	NutritionOrderStatus_list_on_hold,
	NutritionOrderStatus_list_planned,
	NutritionOrderStatus_list_proposed,
	NutritionOrderStatus_list_requested,
}

enum ObservationRelationshipType_list
{
	ObservationRelationshipType_list_derived_from,
	ObservationRelationshipType_list_has_member,
	ObservationRelationshipType_list_interfered_by,
	ObservationRelationshipType_list_qualified_by,
	ObservationRelationshipType_list_replaces,
	ObservationRelationshipType_list_sequel_to,
}

enum ObservationStatus_list
{
	ObservationStatus_list_amended,
	ObservationStatus_list_cancelled,
	ObservationStatus_list_corrected,
	ObservationStatus_list_entered_in_error,
	ObservationStatus_list_final,
	ObservationStatus_list_preliminary,
	ObservationStatus_list_registered,
	ObservationStatus_list_unknown,
}

enum OperationKind_list
{
	OperationKind_list_operation,
	OperationKind_list_query,
}

enum OperationParameterUse_list
{
	OperationParameterUse_list_in,
	OperationParameterUse_list_out,
}

enum ParticipantRequired_list
{
	ParticipantRequired_list_information_only,
	ParticipantRequired_list_optional,
	ParticipantRequired_list_required,
}

enum ParticipationStatus_list
{
	ParticipationStatus_list_accepted,
	ParticipationStatus_list_declined,
	ParticipationStatus_list_needs_action,
	ParticipationStatus_list_tentative,
}

enum PropertyRepresentation_list
{
	PropertyRepresentation_list_cdaText,
	PropertyRepresentation_list_typeAttr,
	PropertyRepresentation_list_xhtml,
	PropertyRepresentation_list_xmlAttr,
	PropertyRepresentation_list_xmlText,
}

enum PropertyType_list
{
	PropertyType_list_Coding,
	PropertyType_list_boolean,
	PropertyType_list_code,
	PropertyType_list_dateTime,
	PropertyType_list_integer,
	PropertyType_list_string,
}

enum ProvenanceEntityRole_list
{
	ProvenanceEntityRole_list_derivation,
	ProvenanceEntityRole_list_quotation,
	ProvenanceEntityRole_list_removal,
	ProvenanceEntityRole_list_revision,
	ProvenanceEntityRole_list_source,
}

enum PublicationStatus_list
{
	PublicationStatus_list_active,
	PublicationStatus_list_draft,
	PublicationStatus_list_retired,
	PublicationStatus_list_unknown,
}

enum QuantityComparator_list
{
	QuantityComparator_list__,
	QuantityComparator_list___,
	QuantityComparator_list__,
	QuantityComparator_list___,
}

enum QuestionnaireItemType_list
{
	QuestionnaireItemType_list_attachment,
	QuestionnaireItemType_list_boolean,
	QuestionnaireItemType_list_choice,
	QuestionnaireItemType_list_date,
	QuestionnaireItemType_list_dateTime,
	QuestionnaireItemType_list_decimal,
	QuestionnaireItemType_list_display,
	QuestionnaireItemType_list_group,
	QuestionnaireItemType_list_integer,
	QuestionnaireItemType_list_open_choice,
	QuestionnaireItemType_list_quantity,
	QuestionnaireItemType_list_reference,
	QuestionnaireItemType_list_string,
	QuestionnaireItemType_list_text,
	QuestionnaireItemType_list_time,
	QuestionnaireItemType_list_url,
}

enum QuestionnaireResponseStatus_list
{
	QuestionnaireResponseStatus_list_amended,
	QuestionnaireResponseStatus_list_completed,
	QuestionnaireResponseStatus_list_entered_in_error,
	QuestionnaireResponseStatus_list_in_progress,
	QuestionnaireResponseStatus_list_stopped,
}

enum ReferenceHandlingPolicy_list
{
	ReferenceHandlingPolicy_list_enforced,
	ReferenceHandlingPolicy_list_literal,
	ReferenceHandlingPolicy_list_local,
	ReferenceHandlingPolicy_list_logical,
	ReferenceHandlingPolicy_list_resolves,
}

enum ReferenceVersionRules_list
{
	ReferenceVersionRules_list_either,
	ReferenceVersionRules_list_independent,
	ReferenceVersionRules_list_specific,
}

enum RelatedArtifactType_list
{
	RelatedArtifactType_list_citation,
	RelatedArtifactType_list_composed_of,
	RelatedArtifactType_list_depends_on,
	RelatedArtifactType_list_derived_from,
	RelatedArtifactType_list_documentation,
	RelatedArtifactType_list_justification,
	RelatedArtifactType_list_predecessor,
	RelatedArtifactType_list_successor,
}

enum RemittanceOutcome_list
{
	RemittanceOutcome_list_complete,
	RemittanceOutcome_list_error,
	RemittanceOutcome_list_partial,
}

enum RequestIntent_list
{
	RequestIntent_list_filler_order,
	RequestIntent_list_instance_order,
	RequestIntent_list_option,
	RequestIntent_list_order,
	RequestIntent_list_original_order,
	RequestIntent_list_plan,
	RequestIntent_list_proposal,
	RequestIntent_list_reflex_order,
}

enum RequestPriority_list
{
	RequestPriority_list_asap,
	RequestPriority_list_routine,
	RequestPriority_list_stat,
	RequestPriority_list_urgent,
}

enum RequestStatus_list
{
	RequestStatus_list_active,
	RequestStatus_list_cancelled,
	RequestStatus_list_completed,
	RequestStatus_list_draft,
	RequestStatus_list_entered_in_error,
	RequestStatus_list_suspended,
	RequestStatus_list_unknown,
}

enum ResearchStudyStatus_list
{
	ResearchStudyStatus_list_completed,
	ResearchStudyStatus_list_draft,
	ResearchStudyStatus_list_entered_in_error,
	ResearchStudyStatus_list_in_progress,
	ResearchStudyStatus_list_stopped,
	ResearchStudyStatus_list_suspended,
}

enum ResearchSubjectStatus_list
{
	ResearchSubjectStatus_list_active,
	ResearchSubjectStatus_list_candidate,
	ResearchSubjectStatus_list_completed,
	ResearchSubjectStatus_list_enrolled,
	ResearchSubjectStatus_list_suspended,
	ResearchSubjectStatus_list_withdrawn,
}

enum ResourceType_list
{
	ResourceType_list_Account,
	ResourceType_list_ActivityDefinition,
	ResourceType_list_AdverseEvent,
	ResourceType_list_AllergyIntolerance,
	ResourceType_list_Appointment,
	ResourceType_list_AppointmentResponse,
	ResourceType_list_AuditEvent,
	ResourceType_list_Basic,
	ResourceType_list_Binary,
	ResourceType_list_BodySite,
	ResourceType_list_Bundle,
	ResourceType_list_CapabilityStatement,
	ResourceType_list_CarePlan,
	ResourceType_list_CareTeam,
	ResourceType_list_ChargeItem,
	ResourceType_list_Claim,
	ResourceType_list_ClaimResponse,
	ResourceType_list_ClinicalImpression,
	ResourceType_list_CodeSystem,
	ResourceType_list_Communication,
	ResourceType_list_CommunicationRequest,
	ResourceType_list_CompartmentDefinition,
	ResourceType_list_Composition,
	ResourceType_list_ConceptMap,
	ResourceType_list_Condition,
	ResourceType_list_Consent,
	ResourceType_list_Contract,
	ResourceType_list_Coverage,
	ResourceType_list_DataElement,
	ResourceType_list_DetectedIssue,
	ResourceType_list_Device,
	ResourceType_list_DeviceComponent,
	ResourceType_list_DeviceMetric,
	ResourceType_list_DeviceRequest,
	ResourceType_list_DeviceUseStatement,
	ResourceType_list_DiagnosticReport,
	ResourceType_list_DocumentManifest,
	ResourceType_list_DocumentReference,
	ResourceType_list_DomainResource,
	ResourceType_list_EligibilityRequest,
	ResourceType_list_EligibilityResponse,
	ResourceType_list_Encounter,
	ResourceType_list_Endpoint,
	ResourceType_list_EnrollmentRequest,
	ResourceType_list_EnrollmentResponse,
	ResourceType_list_EpisodeOfCare,
	ResourceType_list_ExpansionProfile,
	ResourceType_list_ExplanationOfBenefit,
	ResourceType_list_FamilyMemberHistory,
	ResourceType_list_Flag,
	ResourceType_list_Goal,
	ResourceType_list_GraphDefinition,
	ResourceType_list_Group,
	ResourceType_list_GuidanceResponse,
	ResourceType_list_HealthcareService,
	ResourceType_list_ImagingManifest,
	ResourceType_list_ImagingStudy,
	ResourceType_list_Immunization,
	ResourceType_list_ImmunizationRecommendation,
	ResourceType_list_ImplementationGuide,
	ResourceType_list_Library,
	ResourceType_list_Linkage,
	ResourceType_list_List,
	ResourceType_list_Location,
	ResourceType_list_Measure,
	ResourceType_list_MeasureReport,
	ResourceType_list_Media,
	ResourceType_list_Medication,
	ResourceType_list_MedicationAdministration,
	ResourceType_list_MedicationDispense,
	ResourceType_list_MedicationRequest,
	ResourceType_list_MedicationStatement,
	ResourceType_list_MessageDefinition,
	ResourceType_list_MessageHeader,
	ResourceType_list_NamingSystem,
	ResourceType_list_NutritionOrder,
	ResourceType_list_Observation,
	ResourceType_list_OperationDefinition,
	ResourceType_list_OperationOutcome,
	ResourceType_list_Organization,
	ResourceType_list_Parameters,
	ResourceType_list_Patient,
	ResourceType_list_PaymentNotice,
	ResourceType_list_PaymentReconciliation,
	ResourceType_list_Person,
	ResourceType_list_PlanDefinition,
	ResourceType_list_Practitioner,
	ResourceType_list_PractitionerRole,
	ResourceType_list_Procedure,
	ResourceType_list_ProcedureRequest,
	ResourceType_list_ProcessRequest,
	ResourceType_list_ProcessResponse,
	ResourceType_list_Provenance,
	ResourceType_list_Questionnaire,
	ResourceType_list_QuestionnaireResponse,
	ResourceType_list_ReferralRequest,
	ResourceType_list_RelatedPerson,
	ResourceType_list_RequestGroup,
	ResourceType_list_ResearchStudy,
	ResourceType_list_ResearchSubject,
	ResourceType_list_Resource,
	ResourceType_list_RiskAssessment,
	ResourceType_list_Schedule,
	ResourceType_list_SearchParameter,
	ResourceType_list_Sequence,
	ResourceType_list_ServiceDefinition,
	ResourceType_list_Slot,
	ResourceType_list_Specimen,
	ResourceType_list_StructureDefinition,
	ResourceType_list_StructureMap,
	ResourceType_list_Subscription,
	ResourceType_list_Substance,
	ResourceType_list_SupplyDelivery,
	ResourceType_list_SupplyRequest,
	ResourceType_list_Task,
	ResourceType_list_TestReport,
	ResourceType_list_TestScript,
	ResourceType_list_ValueSet,
	ResourceType_list_VisionPrescription,
}

enum ResourceVersionPolicy_list
{
	ResourceVersionPolicy_list_no_version,
	ResourceVersionPolicy_list_versioned,
	ResourceVersionPolicy_list_versioned_update,
}

enum ResponseType_list
{
	ResponseType_list_fatal_error,
	ResponseType_list_ok,
	ResponseType_list_transient_error,
}

enum RestfulCapabilityMode_list
{
	RestfulCapabilityMode_list_client,
	RestfulCapabilityMode_list_server,
}

enum Scope
{
	Scope_col,
	Scope_colgroup,
	Scope_row,
	Scope_rowgroup,
}

enum SearchComparator_list
{
	SearchComparator_list_ap,
	SearchComparator_list_eb,
	SearchComparator_list_eq,
	SearchComparator_list_ge,
	SearchComparator_list_gt,
	SearchComparator_list_le,
	SearchComparator_list_lt,
	SearchComparator_list_ne,
	SearchComparator_list_sa,
}

enum SearchEntryMode_list
{
	SearchEntryMode_list_include,
	SearchEntryMode_list_match,
	SearchEntryMode_list_outcome,
}

enum SearchModifierCode_list
{
	SearchModifierCode_list_above,
	SearchModifierCode_list_below,
	SearchModifierCode_list_contains,
	SearchModifierCode_list_exact,
	SearchModifierCode_list_in,
	SearchModifierCode_list_missing,
	SearchModifierCode_list_not,
	SearchModifierCode_list_not_in,
	SearchModifierCode_list_text,
	SearchModifierCode_list_type,
}

enum SearchParamType_list
{
	SearchParamType_list_composite,
	SearchParamType_list_date,
	SearchParamType_list_number,
	SearchParamType_list_quantity,
	SearchParamType_list_reference,
	SearchParamType_list_string,
	SearchParamType_list_token,
	SearchParamType_list_uri,
}

enum Shape
{
	Shape_circle,
	Shape_default,
	Shape_poly,
	Shape_rect,
}

enum SlicingRules_list
{
	SlicingRules_list_closed,
	SlicingRules_list_open,
	SlicingRules_list_openAtEnd,
}

enum SlotStatus_list
{
	SlotStatus_list_busy,
	SlotStatus_list_busy_tentative,
	SlotStatus_list_busy_unavailable,
	SlotStatus_list_entered_in_error,
	SlotStatus_list_free,
}

enum SpecimenStatus_list
{
	SpecimenStatus_list_available,
	SpecimenStatus_list_entered_in_error,
	SpecimenStatus_list_unavailable,
	SpecimenStatus_list_unsatisfactory,
}

enum StructureDefinitionKind_list
{
	StructureDefinitionKind_list_complex_type,
	StructureDefinitionKind_list_logical,
	StructureDefinitionKind_list_primitive_type,
	StructureDefinitionKind_list_resource,
}

enum StructureMapContextType_list
{
	StructureMapContextType_list_type,
	StructureMapContextType_list_variable,
}

enum StructureMapGroupTypeMode_list
{
	StructureMapGroupTypeMode_list_none,
	StructureMapGroupTypeMode_list_type_and_types,
	StructureMapGroupTypeMode_list_types,
}

enum StructureMapInputMode_list
{
	StructureMapInputMode_list_source,
	StructureMapInputMode_list_target,
}

enum StructureMapModelMode_list
{
	StructureMapModelMode_list_produced,
	StructureMapModelMode_list_queried,
	StructureMapModelMode_list_source,
	StructureMapModelMode_list_target,
}

enum StructureMapSourceListMode_list
{
	StructureMapSourceListMode_list_first,
	StructureMapSourceListMode_list_last,
	StructureMapSourceListMode_list_not_first,
	StructureMapSourceListMode_list_not_last,
	StructureMapSourceListMode_list_only_one,
}

enum StructureMapTargetListMode_list
{
	StructureMapTargetListMode_list_collate,
	StructureMapTargetListMode_list_first,
	StructureMapTargetListMode_list_last,
	StructureMapTargetListMode_list_share,
}

enum StructureMapTransform_list
{
	StructureMapTransform_list_append,
	StructureMapTransform_list_c,
	StructureMapTransform_list_cast,
	StructureMapTransform_list_cc,
	StructureMapTransform_list_copy,
	StructureMapTransform_list_cp,
	StructureMapTransform_list_create,
	StructureMapTransform_list_dateOp,
	StructureMapTransform_list_escape,
	StructureMapTransform_list_evaluate,
	StructureMapTransform_list_id,
	StructureMapTransform_list_pointer,
	StructureMapTransform_list_qty,
	StructureMapTransform_list_reference,
	StructureMapTransform_list_translate,
	StructureMapTransform_list_truncate,
	StructureMapTransform_list_uuid,
}

enum SubscriptionChannelType_list
{
	SubscriptionChannelType_list_email,
	SubscriptionChannelType_list_message,
	SubscriptionChannelType_list_rest_hook,
	SubscriptionChannelType_list_sms,
	SubscriptionChannelType_list_websocket,
}

enum SubscriptionStatus_list
{
	SubscriptionStatus_list_active,
	SubscriptionStatus_list_error,
	SubscriptionStatus_list_off,
	SubscriptionStatus_list_requested,
}

enum SupplyDeliveryStatus_list
{
	SupplyDeliveryStatus_list_abandoned,
	SupplyDeliveryStatus_list_completed,
	SupplyDeliveryStatus_list_entered_in_error,
	SupplyDeliveryStatus_list_in_progress,
}

enum SupplyRequestStatus_list
{
	SupplyRequestStatus_list_active,
	SupplyRequestStatus_list_cancelled,
	SupplyRequestStatus_list_completed,
	SupplyRequestStatus_list_draft,
	SupplyRequestStatus_list_entered_in_error,
	SupplyRequestStatus_list_suspended,
	SupplyRequestStatus_list_unknown,
}

enum SystemRestfulInteraction_list
{
	SystemRestfulInteraction_list_batch,
	SystemRestfulInteraction_list_history_system,
	SystemRestfulInteraction_list_search_system,
	SystemRestfulInteraction_list_transaction,
}

enum SystemVersionProcessingMode_list
{
	SystemVersionProcessingMode_list_check,
	SystemVersionProcessingMode_list_default,
	SystemVersionProcessingMode_list_override,
}

enum TFrame
{
	TFrame_above,
	TFrame_below,
	TFrame_border,
	TFrame_box,
	TFrame_hsides,
	TFrame_lhs,
	TFrame_rhs,
	TFrame_void,
	TFrame_vsides,
}

enum TRules
{
	TRules_all,
	TRules_cols,
	TRules_groups,
	TRules_none,
	TRules_rows,
}

enum TaskStatus_list
{
	TaskStatus_list_accepted,
	TaskStatus_list_cancelled,
	TaskStatus_list_completed,
	TaskStatus_list_draft,
	TaskStatus_list_entered_in_error,
	TaskStatus_list_failed,
	TaskStatus_list_in_progress,
	TaskStatus_list_on_hold,
	TaskStatus_list_ready,
	TaskStatus_list_received,
	TaskStatus_list_rejected,
	TaskStatus_list_requested,
}

enum TestReportActionResult_list
{
	TestReportActionResult_list_error,
	TestReportActionResult_list_fail,
	TestReportActionResult_list_pass,
	TestReportActionResult_list_skip,
	TestReportActionResult_list_warning,
}

enum TestReportParticipantType_list
{
	TestReportParticipantType_list_client,
	TestReportParticipantType_list_server,
	TestReportParticipantType_list_test_engine,
}

enum TestReportResult_list
{
	TestReportResult_list_fail,
	TestReportResult_list_pass,
	TestReportResult_list_pending,
}

enum TestReportStatus_list
{
	TestReportStatus_list_completed,
	TestReportStatus_list_entered_in_error,
	TestReportStatus_list_in_progress,
	TestReportStatus_list_stopped,
	TestReportStatus_list_waiting,
}

enum TestScriptRequestMethodCode_list
{
	TestScriptRequestMethodCode_list_delete,
	TestScriptRequestMethodCode_list_get,
	TestScriptRequestMethodCode_list_options,
	TestScriptRequestMethodCode_list_patch,
	TestScriptRequestMethodCode_list_post,
	TestScriptRequestMethodCode_list_put,
}

enum TriggerType_list
{
	TriggerType_list_data_access_ended,
	TriggerType_list_data_accessed,
	TriggerType_list_data_added,
	TriggerType_list_data_modified,
	TriggerType_list_data_removed,
	TriggerType_list_named_event,
	TriggerType_list_periodic,
}

enum TypeDerivationRule_list
{
	TypeDerivationRule_list_constraint,
	TypeDerivationRule_list_specialization,
}

enum TypeRestfulInteraction_list
{
	TypeRestfulInteraction_list_create,
	TypeRestfulInteraction_list_delete,
	TypeRestfulInteraction_list_history_instance,
	TypeRestfulInteraction_list_history_type,
	TypeRestfulInteraction_list_patch,
	TypeRestfulInteraction_list_read,
	TypeRestfulInteraction_list_search_type,
	TypeRestfulInteraction_list_update,
	TypeRestfulInteraction_list_vread,
}

enum UDIEntryType_list
{
	UDIEntryType_list_barcode,
	UDIEntryType_list_card,
	UDIEntryType_list_manual,
	UDIEntryType_list_rfid,
	UDIEntryType_list_self_reported,
	UDIEntryType_list_unknown,
}

enum UnitsOfTime_list
{
	UnitsOfTime_list_a,
	UnitsOfTime_list_d,
	UnitsOfTime_list_h,
	UnitsOfTime_list_min,
	UnitsOfTime_list_mo,
	UnitsOfTime_list_s,
	UnitsOfTime_list_wk,
}

enum UnknownContentCode_list
{
	UnknownContentCode_list_both,
	UnknownContentCode_list_elements,
	UnknownContentCode_list_extensions,
	UnknownContentCode_list_no,
}

enum Use_list
{
	Use_list_complete,
	Use_list_exploratory,
	Use_list_other,
	Use_list_proposed,
}

enum VisionBase_list
{
	VisionBase_list_down,
	VisionBase_list_in,
	VisionBase_list_out,
	VisionBase_list_up,
}

enum VisionEyes_list
{
	VisionEyes_list_left,
	VisionEyes_list_right,
}

enum XPathUsageType_list
{
	XPathUsageType_list_distance,
	XPathUsageType_list_nearby,
	XPathUsageType_list_normal,
	XPathUsageType_list_other,
	XPathUsageType_list_phonetic,
}

enum alignType
{
	alignType_center,
	alignType_char,
	alignType_justify,
	alignType_left,
	alignType_right,
}

enum dirType
{
	dirType_ltr,
	dirType_rtl,
}

enum ismapType
{
	ismapType_ismap,
}

enum nohrefType
{
	nohrefType_nohref,
}

enum qualityType_list
{
	qualityType_list_indel,
	qualityType_list_snp,
	qualityType_list_unknown,
}

enum repositoryType_list
{
	repositoryType_list_directlink,
	repositoryType_list_login,
	repositoryType_list_oauth,
	repositoryType_list_openapi,
	repositoryType_list_other,
}

enum spaceType
{
	spaceType_default,
	spaceType_preserve,
}

enum valignType
{
	valignType_baseline,
	valignType_bottom,
	valignType_middle,
	valignType_top,
}

struct UnspecifiedType
{
	1 : required string baseObjectType,
	2 : required binary object,
}

struct AccountStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AccountStatus_list value,
}

struct ActionCardinalityBehavior
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionCardinalityBehavior_list value,
}

struct ActionConditionKind
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionConditionKind_list value,
}

struct ActionGroupingBehavior
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionGroupingBehavior_list value,
}

struct ActionList
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionList_list value,
}

struct ActionParticipantType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionParticipantType_list value,
}

struct ActionPrecheckBehavior
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionPrecheckBehavior_list value,
}

struct ActionRelationshipType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionRelationshipType_list value,
}

struct ActionRequiredBehavior
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionRequiredBehavior_list value,
}

struct ActionSelectionBehavior
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ActionSelectionBehavior_list value,
}

struct ActivityDefinition_DynamicValue
{
	1 : optional string description,
	2 : optional string expression,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional string language,
	6 : optional list<binary> modifierExtension,
	7 : optional string path,
}

struct AddressType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AddressType_list value,
}

struct AddressUse
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AddressUse_list value,
}

struct AdministrativeGender
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AdministrativeGender_list value,
}

struct AdverseEventCategory
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AdverseEventCategory_list value,
}

struct AdverseEventCausality
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AdverseEventCausality_list value,
}

struct AggregationMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AggregationMode_list value,
}

struct AllergyIntoleranceCategory
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AllergyIntoleranceCategory_list value,
}

struct AllergyIntoleranceClinicalStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AllergyIntoleranceClinicalStatus_list value,
}

struct AllergyIntoleranceCriticality
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AllergyIntoleranceCriticality_list value,
}

struct AllergyIntoleranceSeverity
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AllergyIntoleranceSeverity_list value,
}

struct AllergyIntoleranceType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AllergyIntoleranceType_list value,
}

struct AllergyIntoleranceVerificationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AllergyIntoleranceVerificationStatus_list value,
}

struct AppointmentStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AppointmentStatus_list value,
}

struct AssertionDirectionType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AssertionDirectionType_list value,
}

struct AssertionOperatorType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AssertionOperatorType_list value,
}

struct AssertionResponseTypes
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AssertionResponseTypes_list value,
}

struct AuditEvent_Detail
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string type,
	5 : required binary value,
}

struct AuditEventAction
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AuditEventAction_list value,
}

struct AuditEventAgentNetworkType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AuditEventAgentNetworkType_list value,
}

struct AuditEventOutcome
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional AuditEventOutcome_list value,
}

struct BindingStrength
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional BindingStrength_list value,
}

struct Block
{
}

struct BundleType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional BundleType_list value,
}

struct CapabilityStatement_Software
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string name,
	5 : optional i64 releaseDate,
	6 : optional string version,
}

struct CapabilityStatementKind
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CapabilityStatementKind_list value,
}

struct CarePlanActivityStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CarePlanActivityStatus_list value,
}

struct CarePlanIntent
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CarePlanIntent_list value,
}

struct CarePlanStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CarePlanStatus_list value,
}

struct CareTeamStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CareTeamStatus_list value,
}

struct ChargeItemStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ChargeItemStatus_list value,
}

struct ClinicalImpressionStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ClinicalImpressionStatus_list value,
}

struct CodeSystemContentMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CodeSystemContentMode_list value,
}

struct CodeSystemHierarchyMeaning
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CodeSystemHierarchyMeaning_list value,
}

struct CompartmentType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CompartmentType_list value,
}

struct CompositionAttestationMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CompositionAttestationMode_list value,
}

struct CompositionStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CompositionStatus_list value,
}

struct ConceptMapEquivalence
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConceptMapEquivalence_list value,
}

struct ConceptMapGroupUnmappedMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConceptMapGroupUnmappedMode_list value,
}

struct ConditionClinicalStatusCodes
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConditionClinicalStatusCodes_list value,
}

struct ConditionVerificationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConditionVerificationStatus_list value,
}

struct ConditionalDeleteStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConditionalDeleteStatus_list value,
}

struct ConditionalReadStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConditionalReadStatus_list value,
}

struct ConfidentialityClassification
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConfidentialityClassification_list value,
}

struct ConsentDataMeaning
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConsentDataMeaning_list value,
}

struct ConsentExceptType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConsentExceptType_list value,
}

struct ConsentState
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConsentState_list value,
}

struct ConstraintSeverity
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ConstraintSeverity_list value,
}

struct ContactPointSystem
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ContactPointSystem_list value,
}

struct ContactPointUse
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ContactPointUse_list value,
}

struct ContentType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ContentType_list value,
}

struct ContractResourceStatusCodes
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ContractResourceStatusCodes_list value,
}

struct ContributorType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ContributorType_list value,
}

struct Coverage_Grouping
{
	1 : optional string _class,
	2 : optional string classDisplay,
	3 : optional list<binary> extension,
	4 : optional string group,
	5 : optional string groupDisplay,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
	8 : optional string plan,
	9 : optional string planDisplay,
	10 : optional string subClass,
	11 : optional string subClassDisplay,
	12 : optional string subGroup,
	13 : optional string subGroupDisplay,
	14 : optional string subPlan,
	15 : optional string subPlanDisplay,
}

struct DataElementStringency
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DataElementStringency_list value,
}

struct DaysOfWeek
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DaysOfWeek_list value,
}

struct DetectedIssueSeverity
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DetectedIssueSeverity_list value,
}

struct DeviceMetricCalibrationState
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DeviceMetricCalibrationState_list value,
}

struct DeviceMetricCalibrationType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DeviceMetricCalibrationType_list value,
}

struct DeviceMetricCategory
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DeviceMetricCategory_list value,
}

struct DeviceMetricColor
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DeviceMetricColor_list value,
}

struct DeviceMetricOperationalStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DeviceMetricOperationalStatus_list value,
}

struct DeviceUseStatementStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DeviceUseStatementStatus_list value,
}

struct DiagnosticReportStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DiagnosticReportStatus_list value,
}

struct DigitalMediaType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DigitalMediaType_list value,
}

struct DiscriminatorType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DiscriminatorType_list value,
}

struct DocumentMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DocumentMode_list value,
}

struct DocumentReferenceStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DocumentReferenceStatus_list value,
}

struct DocumentRelationshipType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional DocumentRelationshipType_list value,
}

struct ElementDefinition_Base
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required string max,
	4 : required int32 min,
	5 : required string path,
}

struct ElementDefinition_Discriminator
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required string path,
	4 : required DiscriminatorType type,
}

struct EncounterLocationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional EncounterLocationStatus_list value,
}

struct EncounterStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional EncounterStatus_list value,
}

struct EndpointStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional EndpointStatus_list value,
}

struct EpisodeOfCareStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional EpisodeOfCareStatus_list value,
}

struct EventCapabilityMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional EventCapabilityMode_list value,
}

struct EventStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional EventStatus_list value,
}

struct EventTiming
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional EventTiming_list value,
}

struct ExplanationOfBenefitStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ExplanationOfBenefitStatus_list value,
}

struct ExtensionContext
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ExtensionContext_list value,
}

struct FHIRAllTypes
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FHIRAllTypes_list value,
}

struct FHIRDefinedType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FHIRDefinedType_list value,
}

struct FHIRDeviceStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FHIRDeviceStatus_list value,
}

struct FHIRSubstanceStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FHIRSubstanceStatus_list value,
}

struct FamilyHistoryStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FamilyHistoryStatus_list value,
}

struct FilterOperator
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FilterOperator_list value,
}

struct FinancialResourceStatusCodes
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FinancialResourceStatusCodes_list value,
}

struct FlagStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional FlagStatus_list value,
}

struct Flow
{
}

struct GoalStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional GoalStatus_list value,
}

struct GraphCompartmentRule
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional GraphCompartmentRule_list value,
}

struct GraphDefinition_Compartment
{
	1 : required CompartmentType code,
	2 : optional string description,
	3 : optional string expression,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
	7 : required GraphCompartmentRule rule,
}

struct GroupType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional GroupType_list value,
}

struct GuidanceResponseStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional GuidanceResponseStatus_list value,
}

struct GuideDependencyType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional GuideDependencyType_list value,
}

struct GuidePageKind
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional GuidePageKind_list value,
}

struct HTTPVerb
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional HTTPVerb_list value,
}

struct IdentifierUse
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional IdentifierUse_list value,
}

struct IdentityAssuranceLevel
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional IdentityAssuranceLevel_list value,
}

struct ImmunizationStatusCodes
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ImmunizationStatusCodes_list value,
}

struct Inline
{
}

struct InstanceAvailability
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional InstanceAvailability_list value,
}

struct IssueSeverity
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional IssueSeverity_list value,
}

struct IssueType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional IssueType_list value,
}

struct LinkType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional LinkType_list value,
}

struct LinkageType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional LinkageType_list value,
}

struct ListMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ListMode_list value,
}

struct ListStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ListStatus_list value,
}

struct Location_Position
{
	1 : optional double altitude,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required double latitude,
	5 : required double longitude,
	6 : optional list<binary> modifierExtension,
}

struct LocationMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional LocationMode_list value,
}

struct LocationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional LocationStatus_list value,
}

struct MeasmntPrinciple
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MeasmntPrinciple_list value,
}

struct MeasureReportStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MeasureReportStatus_list value,
}

struct MeasureReportType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MeasureReportType_list value,
}

struct Medication_Batch
{
	1 : optional i64 expirationDate,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional string lotNumber,
	5 : optional list<binary> modifierExtension,
}

struct MedicationAdministrationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationAdministrationStatus_list value,
}

struct MedicationDispenseStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationDispenseStatus_list value,
}

struct MedicationRequestIntent
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationRequestIntent_list value,
}

struct MedicationRequestPriority
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationRequestPriority_list value,
}

struct MedicationRequestStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationRequestStatus_list value,
}

struct MedicationStatementStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationStatementStatus_list value,
}

struct MedicationStatementTaken
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationStatementTaken_list value,
}

struct MedicationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MedicationStatus_list value,
}

struct MessageSignificanceCategory
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional MessageSignificanceCategory_list value,
}

struct NameUse
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional NameUse_list value,
}

struct NamingSystemIdentifierType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional NamingSystemIdentifierType_list value,
}

struct NamingSystemType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional NamingSystemType_list value,
}

struct NarrativeStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional NarrativeStatus_list value,
}

struct NoteType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional NoteType_list value,
}

struct NutritionOrderStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional NutritionOrderStatus_list value,
}

struct ObservationRelationshipType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ObservationRelationshipType_list value,
}

struct ObservationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ObservationStatus_list value,
}

struct OperationDefinition_Overload
{
	1 : optional string comment,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional list<string> parameterName,
}

struct OperationKind
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional OperationKind_list value,
}

struct OperationParameterUse
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional OperationParameterUse_list value,
}

struct ParticipantRequired
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ParticipantRequired_list value,
}

struct ParticipationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ParticipationStatus_list value,
}

struct Period
{
	1 : optional i64 end,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional i64 start,
}

struct PlanDefinition_Condition
{
	1 : optional string description,
	2 : optional string expression,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : required ActionConditionKind kind,
	6 : optional string language,
	7 : optional list<binary> modifierExtension,
}

struct PlanDefinition_DynamicValue
{
	1 : optional string description,
	2 : optional string expression,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional string language,
	6 : optional list<binary> modifierExtension,
	7 : optional string path,
}

struct PractitionerRole_NotAvailable
{
	1 : required string description,
	2 : optional Period during,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct ProcessRequest_Item
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required i64 sequenceLinkId,
}

struct PropertyRepresentation
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional PropertyRepresentation_list value,
}

struct PropertyType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional PropertyType_list value,
}

struct ProvenanceEntityRole
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ProvenanceEntityRole_list value,
}

struct PublicationStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional PublicationStatus_list value,
}

struct QuantityComparator
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional QuantityComparator_list value,
}

struct QuestionnaireItemType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional QuestionnaireItemType_list value,
}

struct QuestionnaireResponseStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional QuestionnaireResponseStatus_list value,
}

struct ReferenceHandlingPolicy
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ReferenceHandlingPolicy_list value,
}

struct ReferenceVersionRules
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ReferenceVersionRules_list value,
}

struct RelatedArtifactType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional RelatedArtifactType_list value,
}

struct RemittanceOutcome
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional RemittanceOutcome_list value,
}

struct RequestGroup_Condition
{
	1 : optional string description,
	2 : optional string expression,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : required ActionConditionKind kind,
	6 : optional string language,
	7 : optional list<binary> modifierExtension,
}

struct RequestIntent
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional RequestIntent_list value,
}

struct RequestPriority
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional RequestPriority_list value,
}

struct RequestStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional RequestStatus_list value,
}

struct ResearchStudyStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ResearchStudyStatus_list value,
}

struct ResearchSubjectStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ResearchSubjectStatus_list value,
}

struct ResourceType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ResourceType_list value,
}

struct ResourceVersionPolicy
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ResourceVersionPolicy_list value,
}

struct ResponseType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional ResponseType_list value,
}

struct RestfulCapabilityMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional RestfulCapabilityMode_list value,
}

struct SampledDataDataType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string value,
}

struct SearchComparator
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SearchComparator_list value,
}

struct SearchEntryMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SearchEntryMode_list value,
}

struct SearchModifierCode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SearchModifierCode_list value,
}

struct SearchParamType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SearchParamType_list value,
}

struct SlicingRules
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SlicingRules_list value,
}

struct SlotStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SlotStatus_list value,
}

struct SpecimenStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SpecimenStatus_list value,
}

struct StructureDefinitionKind
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureDefinitionKind_list value,
}

struct StructureMapContextType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureMapContextType_list value,
}

struct StructureMapGroupTypeMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureMapGroupTypeMode_list value,
}

struct StructureMapInputMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureMapInputMode_list value,
}

struct StructureMapModelMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureMapModelMode_list value,
}

struct StructureMapSourceListMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureMapSourceListMode_list value,
}

struct StructureMapTargetListMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureMapTargetListMode_list value,
}

struct StructureMapTransform
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional StructureMapTransform_list value,
}

struct SubscriptionChannelType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SubscriptionChannelType_list value,
}

struct SubscriptionStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SubscriptionStatus_list value,
}

struct SupplyDeliveryStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SupplyDeliveryStatus_list value,
}

struct SupplyRequestStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SupplyRequestStatus_list value,
}

struct SystemRestfulInteraction
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SystemRestfulInteraction_list value,
}

struct SystemVersionProcessingMode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SystemVersionProcessingMode_list value,
}

struct TaskStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TaskStatus_list value,
}

struct TestReportActionResult
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TestReportActionResult_list value,
}

struct TestReportParticipantType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TestReportParticipantType_list value,
}

struct TestReportResult
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TestReportResult_list value,
}

struct TestReportStatus
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TestReportStatus_list value,
}

struct TestScript_Param
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string name,
	5 : optional string value,
}

struct TestScript_Param1
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string name,
	5 : optional string value,
}

struct TestScript_Param2
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string name,
	5 : required string value,
}

struct TestScript_Param3
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string name,
	5 : required string value,
}

struct TestScript_RequestHeader
{
	1 : optional list<binary> extension,
	2 : required string field,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required string value,
}

struct TestScriptRequestMethodCode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TestScriptRequestMethodCode_list value,
}

struct TriggerType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TriggerType_list value,
}

struct TypeDerivationRule
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TypeDerivationRule_list value,
}

struct TypeRestfulInteraction
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional TypeRestfulInteraction_list value,
}

struct UDIEntryType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional UDIEntryType_list value,
}

struct UnitsOfTime
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional UnitsOfTime_list value,
}

struct UnknownContentCode
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional UnknownContentCode_list value,
}

struct Use
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional Use_list value,
}

struct VisionBase
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional VisionBase_list value,
}

struct VisionEyes
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional VisionEyes_list value,
}

struct XPathUsageType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional XPathUsageType_list value,
}

struct a_content
{
}

struct aType
{
	1 : optional string accesskey,
	2 : optional string charset,
	3 : optional list_string_ _class,
	4 : optional string coords,
	5 : optional dirType dir,
	6 : optional UnspecifiedType href,
	7 : optional string hreflang,
	8 : optional string id,
	9 : optional string lang,
	10 : optional string name,
	11 : optional list_string_ rel,
	12 : optional list_string_ rev,
	13 : optional Shape shape,
	14 : optional string style,
	15 : optional i64 tabindex,
	16 : optional string title,
	17 : optional string type,
}

struct abbrType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct acronymType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct addressType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct areaType
{
	1 : optional string accesskey,
	2 : required string alt,
	3 : optional list_string_ _class,
	4 : optional string coords,
	5 : optional dirType dir,
	6 : optional UnspecifiedType href,
	7 : optional string id,
	8 : optional string lang,
	9 : optional nohrefType nohref,
	10 : optional Shape shape,
	11 : optional string style,
	12 : optional i64 tabindex,
	13 : optional string title,
}

struct bType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct _base64Binary
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional binary value,
}

struct bigType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct blockquoteType
{
	1 : optional UnspecifiedType cite,
	2 : optional list_string_ _class,
	3 : optional dirType dir,
	4 : optional string id,
	5 : optional string lang,
	6 : optional string style,
	7 : optional string title,
}

struct _boolean
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional bool value,
}

struct brType
{
	1 : optional list_string_ _class,
	2 : optional string id,
	3 : optional string style,
	4 : optional string title,
}

struct captionType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct citeType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct code
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string value,
}

struct codeType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct colType
{
	1 : optional alignType align,
	2 : optional string char,
	3 : optional string charoff,
	4 : optional list_string_ _class,
	5 : optional dirType dir,
	6 : optional string id,
	7 : optional string lang,
	8 : optional i64 span,
	9 : optional string style,
	10 : optional string title,
	11 : optional valignType valign,
	12 : optional string width,
}

struct colgroupType
{
	1 : optional alignType align,
	2 : optional string char,
	3 : optional string charoff,
	4 : optional list_string_ _class,
	5 : optional list<colType> col,
	6 : optional dirType dir,
	7 : optional string id,
	8 : optional string lang,
	9 : optional i64 span,
	10 : optional string style,
	11 : optional string title,
	12 : optional valignType valign,
	13 : optional string width,
}

struct _date
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional binary value,
}

struct _dateTime
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional binary value,
}

struct ddType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct _decimal
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional double value,
}

struct dfnType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct divType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct dtType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct emType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct h1Type
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct h2Type
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct h3Type
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct h4Type
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct h5Type
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct h6Type
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct hrType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct iType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct id
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string value,
}

struct imgType
{
	1 : required string alt,
	2 : optional list_string_ _class,
	3 : optional dirType dir,
	4 : optional string height,
	5 : optional string id,
	6 : optional ismapType ismap,
	7 : optional string lang,
	8 : optional UnspecifiedType longdesc,
	9 : required UnspecifiedType src,
	10 : optional string style,
	11 : optional string title,
	12 : optional UnspecifiedType usemap,
	13 : optional string width,
}

struct instant
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional i64 value,
}

struct _integer
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional i32 value,
}

struct kbdType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct liType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct mapType
{
	1 : optional list<areaType> area,
	2 : optional UnspecifiedType _class,
	3 : optional dirType dir,
	4 : required string id,
	5 : optional string lang,
	6 : optional string name,
	7 : optional string style,
	8 : optional string title,
}

struct markdown
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string value,
}

struct oid
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional UnspecifiedType value,
}

struct olType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : required list<liType> li,
	6 : optional string style,
	7 : optional string title,
}

struct pType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct positiveInt
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional i64 value,
}

struct pre_content
{
	1 : optional aType a,
}

struct preType
{
	1 : optional aType a,
	2 : optional list_string_ _class,
	3 : optional dirType dir,
	4 : optional string id,
	5 : optional string lang,
	6 : optional spaceType space,
	7 : optional string style,
	8 : optional string title,
}

struct qType
{
	1 : optional UnspecifiedType cite,
	2 : optional list_string_ _class,
	3 : optional dirType dir,
	4 : optional string id,
	5 : optional string lang,
	6 : optional string style,
	7 : optional string title,
}

struct qualityType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional qualityType_list value,
}

struct repositoryType
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional repositoryType_list value,
}

struct sampType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct smallType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct spanType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct _string
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string value,
}

struct strongType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct subType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct supType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct tdType
{
	1 : optional string abbr,
	2 : optional alignType align,
	3 : optional UnspecifiedType axis,
	4 : optional string char,
	5 : optional string charoff,
	6 : optional list_string_ _class,
	7 : optional i64 colspan,
	8 : optional dirType dir,
	9 : optional binary headers,
	10 : optional string id,
	11 : optional string lang,
	12 : optional i64 rowspan,
	13 : optional Scope scope,
	14 : optional string style,
	15 : optional string title,
	16 : optional valignType valign,
}

struct thType
{
	1 : optional string abbr,
	2 : optional alignType align,
	3 : optional UnspecifiedType axis,
	4 : optional string char,
	5 : optional string charoff,
	6 : optional list_string_ _class,
	7 : optional i64 colspan,
	8 : optional dirType dir,
	9 : optional binary headers,
	10 : optional string id,
	11 : optional string lang,
	12 : optional i64 rowspan,
	13 : optional Scope scope,
	14 : optional string style,
	15 : optional string title,
	16 : optional valignType valign,
}

struct time
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional UnspecifiedType value,
}

struct trType
{
	1 : optional alignType align,
	2 : optional string char,
	3 : optional string charoff,
	4 : optional list_string_ _class,
	5 : optional dirType dir,
	6 : optional string id,
	7 : optional string lang,
	8 : optional string style,
	9 : optional tdType td,
	10 : optional thType th,
	11 : optional string title,
	12 : optional valignType valign,
}

struct ttType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct ulType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : required list<liType> li,
	6 : optional string style,
	7 : optional string title,
}

struct _unsignedInt
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional i64 value,
}

struct uri
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional UnspecifiedType value,
}

struct uuid
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional UnspecifiedType value,
}

struct varType
{
	1 : optional list_string_ _class,
	2 : optional dirType dir,
	3 : optional string id,
	4 : optional string lang,
	5 : optional string style,
	6 : optional string title,
}

struct Address
{
	1 : optional string city,
	2 : optional string country,
	3 : optional string district,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<string> line,
	7 : optional Period period,
	8 : optional string postalCode,
	9 : optional string state,
	10 : optional string text,
	11 : optional AddressType type,
	12 : optional AddressUse use,
}

struct Age
{
	1 : optional code _code,
	2 : optional QuantityComparator comparator,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri system,
	6 : optional string unit,
	7 : optional double value,
}

struct Attachment
{
	1 : optional code contentType,
	2 : optional i64 creation,
	3 : optional binary data,
	4 : optional list<binary> extension,
	5 : optional binary hash,
	6 : optional string id,
	7 : optional code language,
	8 : optional int32 size,
	9 : optional string title,
	10 : optional uri url,
}

struct AuditEvent_Network
{
	1 : optional string address,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional AuditEventAgentNetworkType type,
}

struct Bundle_Link
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string relation,
	5 : required uri url,
}

struct Bundle_Request
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string ifMatch,
	4 : optional instant ifModifiedSince,
	5 : optional string ifNoneExist,
	6 : optional string ifNoneMatch,
	7 : required HTTPVerb method,
	8 : optional list<binary> modifierExtension,
	9 : required uri url,
}

struct Bundle_Search
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional SearchEntryMode mode,
	4 : optional list<binary> modifierExtension,
	5 : optional double score,
}

struct CapabilityStatement_Certificate
{
	1 : optional binary blob,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional code type,
}

struct CapabilityStatement_Implementation
{
	1 : required string description,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional uri url,
}

struct CapabilityStatement_Interaction
{
	1 : required TypeRestfulInteraction code,
	2 : optional string documentation,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct CapabilityStatement_Interaction1
{
	1 : required SystemRestfulInteraction code,
	2 : optional string documentation,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct CapabilityStatement_SearchParam
{
	1 : optional uri definition,
	2 : optional string documentation,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : required string name,
	7 : required SearchParamType type,
}

struct CodeSystem_Filter
{
	1 : required code _code,
	2 : optional string description,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : required list<FilterOperator> operator,
	7 : required string value,
}

struct CodeSystem_Property
{
	1 : required code _code,
	2 : optional string description,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : required PropertyType type,
	7 : optional uri _uri,
}

struct Coding
{
	1 : optional code _code,
	2 : optional string display,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri system,
	6 : optional bool userSelected,
	7 : optional string version,
}

struct CompartmentDefinition_Resource
{
	1 : required ResourceType code,
	2 : optional string documentation,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional list<string> param,
}

struct ConceptMap_DependsOn
{
	1 : required string code,
	2 : optional string display,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : required uri property,
	7 : optional uri system,
}

struct ConceptMap_Target
{
	1 : optional code _code,
	2 : optional string comment,
	3 : optional list<ConceptMap_DependsOn> dependsOn,
	4 : optional string display,
	5 : optional ConceptMapEquivalence equivalence,
	6 : optional list<binary> extension,
	7 : optional string id,
	8 : optional list<binary> modifierExtension,
	9 : optional list<ConceptMap_DependsOn> product,
}

struct ConceptMap_Unmapped
{
	1 : optional code _code,
	2 : optional string display,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : required ConceptMapGroupUnmappedMode mode,
	6 : optional list<binary> modifierExtension,
	7 : optional uri url,
}

struct Consent_Policy
{
	1 : optional uri authority,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional uri _uri,
}

struct ContactPoint
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional Period period,
	4 : optional positiveInt rank,
	5 : optional ContactPointSystem system,
	6 : optional ContactPointUse use,
	7 : optional string value,
}

struct Count
{
	1 : optional code _code,
	2 : optional QuantityComparator comparator,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri system,
	6 : optional string unit,
	7 : optional double value,
}

struct DataElement_Mapping
{
	1 : optional string comment,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required id identity,
	5 : optional list<binary> modifierExtension,
	6 : optional string name,
	7 : optional uri _uri,
}

struct Device_Udi
{
	1 : optional binary carrierAIDC,
	2 : optional string carrierHRF,
	3 : optional string deviceIdentifier,
	4 : optional UDIEntryType entryType,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional uri issuer,
	8 : optional uri jurisdiction,
	9 : optional list<binary> modifierExtension,
	10 : optional string name,
}

struct DeviceMetric_Calibration
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional DeviceMetricCalibrationState state,
	5 : optional instant time,
	6 : optional DeviceMetricCalibrationType type,
}

struct Distance
{
	1 : optional code _code,
	2 : optional QuantityComparator comparator,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri system,
	6 : optional string unit,
	7 : optional double value,
}

struct DocumentReference_Content
{
	1 : required Attachment attachment,
	2 : optional list<binary> extension,
	3 : optional Coding format,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct Duration
{
	1 : optional code _code,
	2 : optional QuantityComparator comparator,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri system,
	6 : optional string unit,
	7 : optional double value,
}

struct ElementDefinition_Constraint
{
	1 : required string expression,
	2 : optional list<binary> extension,
	3 : required string human,
	4 : optional string id,
	5 : required id key,
	6 : optional string requirements,
	7 : required ConstraintSeverity severity,
	8 : optional uri source,
	9 : optional string xpath,
}

struct ElementDefinition_Mapping
{
	1 : optional string comment,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required id identity,
	5 : optional code language,
	6 : required string map,
}

struct ElementDefinition_Slicing
{
	1 : optional string description,
	2 : optional list<ElementDefinition_Discriminator> discriminator,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional bool ordered,
	6 : required SlicingRules rules,
}

struct ElementDefinition_Type
{
	1 : optional list<AggregationMode> aggregation,
	2 : required uri code,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri profile,
	6 : optional uri targetProfile,
	7 : optional ReferenceVersionRules versioning,
}

struct Encounter_ClassHistory
{
	1 : required Coding _class,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required Period period,
}

struct Encounter_StatusHistory
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required Period period,
	5 : required EncounterStatus status,
}

struct EpisodeOfCare_StatusHistory
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required Period period,
	5 : required EpisodeOfCareStatus status,
}

struct ExpansionProfile_Designation1
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional code language,
	4 : optional list<binary> modifierExtension,
	5 : optional Coding use,
}

struct ExpansionProfile_Designation2
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional code language,
	4 : optional list<binary> modifierExtension,
	5 : optional Coding use,
}

struct ExpansionProfile_Exclude
{
	1 : optional list<ExpansionProfile_Designation2> designation,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct ExpansionProfile_ExcludedSystem
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required uri system,
	5 : optional string version,
}

struct ExpansionProfile_FixedVersion
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required SystemVersionProcessingMode mode,
	4 : optional list<binary> modifierExtension,
	5 : required uri system,
	6 : required string version,
}

struct ExpansionProfile_Include
{
	1 : optional list<ExpansionProfile_Designation1> designation,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct HealthcareService_AvailableTime
{
	1 : optional bool allDay,
	2 : optional time availableEndTime,
	3 : optional time availableStartTime,
	4 : optional list<DaysOfWeek> daysOfWeek,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
}

struct HealthcareService_NotAvailable
{
	1 : required string description,
	2 : optional Period during,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
}

struct HumanName
{
	1 : optional list<binary> extension,
	2 : optional string family,
	3 : optional list<string> given,
	4 : optional string id,
	5 : optional Period period,
	6 : optional list<string> prefix,
	7 : optional list<string> suffix,
	8 : optional string text,
	9 : optional NameUse use,
}

struct ImagingManifest_Instance
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required oid sopClass,
	5 : required oid uid,
}

struct ImagingStudy_Instance
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional int32 number,
	5 : required oid sopClass,
	6 : optional string title,
	7 : required oid uid,
}

struct ImplementationGuide_Dependency
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required GuideDependencyType type,
	5 : required uri _uri,
}

struct ImplementationGuide_Page
{
	1 : optional list<binary> extension,
	2 : optional code format,
	3 : optional string id,
	4 : required GuidePageKind kind,
	5 : optional list<binary> modifierExtension,
	6 : optional list<string> package,
	7 : optional list<binary> page,
	8 : required uri source,
	9 : required string title,
	10 : optional list<ResourceType> type,
}

struct MessageHeader_Source
{
	1 : optional ContactPoint contact,
	2 : required uri endpoint,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional string name,
	7 : optional string software,
	8 : optional string version,
}

struct Meta
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional instant lastUpdated,
	4 : optional list<uri> profile,
	5 : optional list<Coding> security,
	6 : optional list<Coding> tag,
	7 : optional id versionId,
}

struct Money
{
	1 : optional code _code,
	2 : optional QuantityComparator comparator,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri system,
	6 : optional string unit,
	7 : optional double value,
}

struct NamingSystem_UniqueId
{
	1 : optional string comment,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Period period,
	6 : optional bool preferred,
	7 : required NamingSystemIdentifierType type,
	8 : required string value,
}

struct Narrative
{
	1 : required www_w3_org_1999_xhtml.divType div,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required NarrativeStatus status,
}

struct PractitionerRole_AvailableTime
{
	1 : optional bool allDay,
	2 : optional time availableEndTime,
	3 : optional time availableStartTime,
	4 : optional list<DaysOfWeek> daysOfWeek,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
}

struct Quantity
{
	1 : optional code _code,
	2 : optional QuantityComparator comparator,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional uri system,
	6 : optional string unit,
	7 : optional double value,
}

struct Questionnaire_Option
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional Coding valueCoding,
	5 : optional i32 valueDate,
	6 : optional i64 valueInteger,
	7 : optional string valueString,
	8 : optional time valueTime,
}

struct Range
{
	1 : optional list<binary> extension,
	2 : optional Quantity high,
	3 : optional string id,
	4 : optional Quantity low,
}

struct Ratio
{
	1 : optional Quantity denominator,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional Quantity numerator,
}

struct RequestGroup_RelatedAction
{
	1 : required id actionId,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Duration offsetDuration,
	6 : optional Range offsetRange,
	7 : required ActionRelationshipType relationship,
}

struct SampledData
{
	1 : required SampledDataDataType data,
	2 : required positiveInt dimensions,
	3 : optional list<binary> extension,
	4 : optional double factor,
	5 : optional string id,
	6 : optional double lowerLimit,
	7 : required Quantity origin,
	8 : required double period,
	9 : optional double upperLimit,
}

struct Sequence_Repository
{
	1 : optional string datasetId,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional string name,
	6 : optional string readsetId,
	7 : required repositoryType type,
	8 : optional uri url,
	9 : optional string variantsetId,
}

struct StructureDefinition_Mapping
{
	1 : optional string comment,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required id identity,
	5 : optional list<binary> modifierExtension,
	6 : optional string name,
	7 : optional uri _uri,
}

struct StructureMap_Dependent
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required id name,
	5 : required list<string> variable,
}

struct StructureMap_Input
{
	1 : optional string documentation,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required StructureMapInputMode mode,
	5 : optional list<binary> modifierExtension,
	6 : required id name,
	7 : optional string type,
}

struct StructureMap_Parameter
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional bool valueBoolean,
	5 : optional double valueDecimal,
	6 : optional id valueId,
	7 : optional i64 valueInteger,
	8 : optional string valueString,
}

struct StructureMap_Structure
{
	1 : optional string alias,
	2 : optional string documentation,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : required StructureMapModelMode mode,
	6 : optional list<binary> modifierExtension,
	7 : required uri url,
}

struct StructureMap_Target
{
	1 : optional id context,
	2 : optional StructureMapContextType contextType,
	3 : optional string element,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<StructureMapTargetListMode> listMode,
	7 : optional id listRuleId,
	8 : optional list<binary> modifierExtension,
	9 : optional list<StructureMap_Parameter> parameter,
	10 : optional StructureMapTransform transform,
	11 : optional id variable,
}

struct Subscription_Channel
{
	1 : optional uri endpoint,
	2 : optional list<binary> extension,
	3 : optional list<string> header,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional string payload,
	7 : required SubscriptionChannelType type,
}

struct TestReport_Assert
{
	1 : optional string detail,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional markdown message,
	5 : optional list<binary> modifierExtension,
	6 : required TestReportActionResult result,
}

struct TestReport_Operation
{
	1 : optional uri detail,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional markdown message,
	5 : optional list<binary> modifierExtension,
	6 : required TestReportActionResult result,
}

struct TestReport_Participant
{
	1 : optional string display,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required TestReportParticipantType type,
	6 : required uri _uri,
}

struct TestScript_Destination
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required i64 index,
	4 : optional list<binary> modifierExtension,
	5 : required Coding profile,
}

struct TestScript_Link
{
	1 : optional string description,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required uri url,
}

struct TestScript_Operation
{
	1 : optional string accept,
	2 : optional string contentType,
	3 : optional string description,
	4 : optional i64 destination,
	5 : optional bool encodeRequestUrl,
	6 : optional list<binary> extension,
	7 : optional string id,
	8 : optional string label,
	9 : optional list<binary> modifierExtension,
	10 : optional i64 origin,
	11 : optional string params,
	12 : optional list<TestScript_RequestHeader> requestHeader,
	13 : optional id requestId,
	14 : optional FHIRDefinedType resource,
	15 : optional id responseId,
	16 : optional id sourceId,
	17 : optional id targetId,
	18 : optional Coding type,
	19 : optional string url,
}

struct TestScript_Origin
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required i64 index,
	4 : optional list<binary> modifierExtension,
	5 : required Coding profile,
}

struct TestScript_Rule1
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional list<TestScript_Param1> param,
	5 : required id ruleId,
}

struct TestScript_Rule2
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional list<TestScript_Param2> param,
	5 : required id ruleId,
}

struct TestScript_Rule3
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional list<TestScript_Param3> param,
	5 : required id ruleId,
}

struct TestScript_Ruleset1
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional list<TestScript_Rule3> rule,
	5 : required id rulesetId,
}

struct TestScript_Variable
{
	1 : optional string defaultValue,
	2 : optional string description,
	3 : optional string expression,
	4 : optional list<binary> extension,
	5 : optional string headerField,
	6 : optional string hint,
	7 : optional string id,
	8 : optional list<binary> modifierExtension,
	9 : required string name,
	10 : optional string path,
	11 : optional id sourceId,
}

struct Timing_Repeat
{
	1 : optional Duration boundsDuration,
	2 : optional Period boundsPeriod,
	3 : optional Range boundsRange,
	4 : optional i64 count,
	5 : optional i64 countMax,
	6 : optional list<code> dayOfWeek,
	7 : optional double duration,
	8 : optional double durationMax,
	9 : optional UnitsOfTime durationUnit,
	10 : optional list<binary> extension,
	11 : optional i64 frequency,
	12 : optional i64 frequencyMax,
	13 : optional string id,
	14 : optional int32 offset,
	15 : optional double period,
	16 : optional double periodMax,
	17 : optional UnitsOfTime periodUnit,
	18 : optional list<time> timeOfDay,
	19 : optional list<EventTiming> when,
}

struct ValueSet_Designation
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional code language,
	4 : optional list<binary> modifierExtension,
	5 : optional Coding use,
	6 : required string value,
}

struct ValueSet_Filter
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required FilterOperator op,
	5 : required code property,
	6 : required code value,
}

struct ValueSet_Parameter
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required string name,
	5 : optional bool valueBoolean,
	6 : optional code valueCode,
	7 : optional double valueDecimal,
	8 : optional i64 valueInteger,
	9 : optional string valueString,
	10 : optional uri valueUri,
}

struct dlType
{
	1 : optional list_string_ _class,
	2 : optional ddType dd,
	3 : optional dirType dir,
	4 : optional dtType dt,
	5 : optional string id,
	6 : optional string lang,
	7 : optional string style,
	8 : optional string title,
}

struct tbodyType
{
	1 : optional alignType align,
	2 : optional string char,
	3 : optional string charoff,
	4 : optional list_string_ _class,
	5 : optional dirType dir,
	6 : optional string id,
	7 : optional string lang,
	8 : optional string style,
	9 : optional string title,
	10 : required list<trType> tr,
	11 : optional valignType valign,
}

struct tfootType
{
	1 : optional alignType align,
	2 : optional string char,
	3 : optional string charoff,
	4 : optional list_string_ _class,
	5 : optional dirType dir,
	6 : optional string id,
	7 : optional string lang,
	8 : optional string style,
	9 : optional string title,
	10 : required list<trType> tr,
	11 : optional valignType valign,
}

struct theadType
{
	1 : optional alignType align,
	2 : optional string char,
	3 : optional string charoff,
	4 : optional list_string_ _class,
	5 : optional dirType dir,
	6 : optional string id,
	7 : optional string lang,
	8 : optional string style,
	9 : optional string title,
	10 : required list<trType> tr,
	11 : optional valignType valign,
}

struct CapabilityStatement_Endpoint
{
	1 : required uri address,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required Coding protocol,
}

struct CodeSystem_Designation
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional code language,
	4 : optional list<binary> modifierExtension,
	5 : optional Coding use,
	6 : required string value,
}

struct CodeSystem_Property1
{
	1 : required code _code,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional bool valueBoolean,
	6 : optional code valueCode,
	7 : optional Coding valueCoding,
	8 : optional i64 valueDateTime,
	9 : optional i64 valueInteger,
	10 : optional string valueString,
}

struct CodeableConcept
{
	1 : optional list<Coding> coding,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional string text,
}

struct ConceptMap_Element
{
	1 : optional code _code,
	2 : optional string display,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional list<ConceptMap_Target> target,
}

struct ConceptMap_Group
{
	1 : required list<ConceptMap_Element> element,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional uri source,
	6 : optional string sourceVersion,
	7 : optional uri target,
	8 : optional string targetVersion,
	9 : optional ConceptMap_Unmapped unmapped,
}

struct ContactDetail
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string name,
	4 : optional list<ContactPoint> telecom,
}

struct Contributor
{
	1 : optional list<ContactDetail> contact,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required string name,
	5 : required ContributorType type,
}

struct DataRequirement_DateFilter
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required string path,
	4 : optional i64 valueDateTime,
	5 : optional Duration valueDuration,
	6 : optional Period valuePeriod,
}

struct EligibilityResponse_Error
{
	1 : required CodeableConcept code,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct EligibilityResponse_Financial
{
	1 : optional Money allowedMoney,
	2 : optional string allowedString,
	3 : optional int32 allowedUnsignedInt,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
	7 : required CodeableConcept type,
	8 : optional Money usedMoney,
	9 : optional int32 usedUnsignedInt,
}

struct ExpansionProfile_Designation
{
	1 : optional ExpansionProfile_Exclude exclude,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional ExpansionProfile_Include include,
	5 : optional list<binary> modifierExtension,
}

struct ExplanationOfBenefit_Adjudication
{
	1 : optional Money amount,
	2 : required CodeableConcept category,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional CodeableConcept reason,
	7 : optional double value,
}

struct ExplanationOfBenefit_Detail1
{
	1 : optional list<ExplanationOfBenefit_Adjudication> adjudication,
	2 : optional CodeableConcept category,
	3 : optional list<binary> extension,
	4 : optional Money fee,
	5 : optional string id,
	6 : optional list<CodeableConcept> modifier,
	7 : optional list<binary> modifierExtension,
	8 : optional list<positiveInt> noteNumber,
	9 : optional CodeableConcept revenue,
	10 : optional CodeableConcept _service,
}

struct ExplanationOfBenefit_Financial
{
	1 : optional Money allowedMoney,
	2 : optional string allowedString,
	3 : optional int32 allowedUnsignedInt,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
	7 : required CodeableConcept type,
	8 : optional Money usedMoney,
	9 : optional int32 usedUnsignedInt,
}

struct ExplanationOfBenefit_ProcessNote
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CodeableConcept language,
	4 : optional list<binary> modifierExtension,
	5 : optional positiveInt number,
	6 : optional string text,
	7 : optional CodeableConcept type,
}

struct Goal_Target
{
	1 : optional CodeableConcept detailCodeableConcept,
	2 : optional Quantity detailQuantity,
	3 : optional Range detailRange,
	4 : optional i32 dueDate,
	5 : optional Duration dueDuration,
	6 : optional list<binary> extension,
	7 : optional string id,
	8 : optional CodeableConcept measure,
	9 : optional list<binary> modifierExtension,
}

struct Group_Characteristic
{
	1 : required CodeableConcept code,
	2 : required bool exclude,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional Period period,
	7 : optional bool valueBoolean,
	8 : optional CodeableConcept valueCodeableConcept,
	9 : optional Quantity valueQuantity,
	10 : optional Range valueRange,
}

struct Immunization_Explanation
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional list<CodeableConcept> reason,
	5 : optional list<CodeableConcept> reasonNotGiven,
}

struct ImmunizationRecommendation_DateCriterion
{
	1 : required CodeableConcept code,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : required i64 value,
}

struct MedicationAdministration_Dosage
{
	1 : optional Quantity dose,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional CodeableConcept method,
	5 : optional list<binary> modifierExtension,
	6 : optional Quantity rateQuantity,
	7 : optional Ratio rateRatio,
	8 : optional CodeableConcept route,
	9 : optional CodeableConcept site,
	10 : optional string text,
}

struct MedicationRequest_Substitution
{
	1 : required bool allowed,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional CodeableConcept reason,
}

struct NutritionOrder_Nutrient
{
	1 : optional Quantity amount,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional CodeableConcept modifier,
	5 : optional list<binary> modifierExtension,
}

struct NutritionOrder_Texture
{
	1 : optional list<binary> extension,
	2 : optional CodeableConcept foodType,
	3 : optional string id,
	4 : optional CodeableConcept modifier,
	5 : optional list<binary> modifierExtension,
}

struct Observation_ReferenceRange
{
	1 : optional Range age,
	2 : optional list<CodeableConcept> appliesTo,
	3 : optional list<binary> extension,
	4 : optional Quantity high,
	5 : optional string id,
	6 : optional Quantity low,
	7 : optional list<binary> modifierExtension,
	8 : optional string text,
	9 : optional CodeableConcept type,
}

struct OperationOutcome_Issue
{
	1 : required IssueType code,
	2 : optional CodeableConcept details,
	3 : optional string diagnostics,
	4 : optional list<string> expression,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional list<string> location,
	8 : optional list<binary> modifierExtension,
	9 : required IssueSeverity severity,
}

struct Organization_Contact
{
	1 : optional Address address,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional HumanName name,
	6 : optional CodeableConcept purpose,
	7 : optional list<ContactPoint> telecom,
}

struct Patient_Animal
{
	1 : optional CodeableConcept breed,
	2 : optional list<binary> extension,
	3 : optional CodeableConcept genderStatus,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : required CodeableConcept species,
}

struct Patient_Communication
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : required CodeableConcept language,
	4 : optional list<binary> modifierExtension,
	5 : optional bool preferred,
}

struct PaymentReconciliation_ProcessNote
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional string text,
	5 : optional CodeableConcept type,
}

struct PlanDefinition_Participant
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional CodeableConcept role,
	5 : required ActionParticipantType type,
}

struct PlanDefinition_RelatedAction
{
	1 : required id actionId,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional Duration offsetDuration,
	6 : optional Range offsetRange,
	7 : required ActionRelationshipType relationship,
}

struct PlanDefinition_Target
{
	1 : optional CodeableConcept detailCodeableConcept,
	2 : optional Quantity detailQuantity,
	3 : optional Range detailRange,
	4 : optional Duration due,
	5 : optional list<binary> extension,
	6 : optional string id,
	7 : optional CodeableConcept measure,
	8 : optional list<binary> modifierExtension,
}

struct ProcessResponse_ProcessNote
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional string text,
	5 : optional CodeableConcept type,
}

struct ResearchStudy_Arm
{
	1 : optional CodeableConcept code,
	2 : optional string description,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : required string name,
}

struct RiskAssessment_Prediction
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required CodeableConcept outcome,
	5 : optional double probabilityDecimal,
	6 : optional Range probabilityRange,
	7 : optional CodeableConcept qualitativeRisk,
	8 : optional string rationale,
	9 : optional double relativeRisk,
	10 : optional Period whenPeriod,
	11 : optional Range whenRange,
}

struct Sequence_Quality
{
	1 : optional i64 end,
	2 : optional list<binary> extension,
	3 : optional double fScore,
	4 : optional double gtFP,
	5 : optional string id,
	6 : optional CodeableConcept method,
	7 : optional list<binary> modifierExtension,
	8 : optional double precision,
	9 : optional double queryFP,
	10 : optional double queryTP,
	11 : optional double recall,
	12 : optional Quantity score,
	13 : optional CodeableConcept standardSequence,
	14 : optional i64 start,
	15 : optional double truthFN,
	16 : optional double truthTP,
	17 : required qualityType type,
}

struct TestReport_Action
{
	1 : optional TestReport_Assert assert,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional TestReport_Operation operation,
}

struct TestReport_Action1
{
	1 : optional TestReport_Assert assert,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional TestReport_Operation operation,
}

struct TestReport_Action2
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required TestReport_Operation operation,
}

struct TestReport_Setup
{
	1 : required list<TestReport_Action> action,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct TestReport_Teardown
{
	1 : required list<TestReport_Action2> action,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct TestReport_Test
{
	1 : required list<TestReport_Action1> action,
	2 : optional string description,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional string name,
}

struct TestScript_Action2
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : required TestScript_Operation operation,
}

struct TestScript_Assert
{
	1 : optional string compareToSourceExpression,
	2 : optional string compareToSourceId,
	3 : optional string compareToSourcePath,
	4 : optional string contentType,
	5 : optional string description,
	6 : optional AssertionDirectionType direction,
	7 : optional string expression,
	8 : optional list<binary> extension,
	9 : optional string headerField,
	10 : optional string id,
	11 : optional string label,
	12 : optional string minimumId,
	13 : optional list<binary> modifierExtension,
	14 : optional bool navigationLinks,
	15 : optional AssertionOperatorType operator,
	16 : optional string path,
	17 : optional TestScriptRequestMethodCode requestMethod,
	18 : optional string requestURL,
	19 : optional FHIRDefinedType resource,
	20 : optional AssertionResponseTypes response,
	21 : optional string responseCode,
	22 : optional TestScript_Rule2 rule,
	23 : optional TestScript_Ruleset1 ruleset,
	24 : optional id sourceId,
	25 : optional id validateProfileId,
	26 : optional string value,
	27 : optional bool warningOnly,
}

struct TestScript_Teardown
{
	1 : required list<TestScript_Action2> action,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct Timing
{
	1 : optional CodeableConcept code,
	2 : optional list<i64> event,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional Timing_Repeat repeat,
}

struct UsageContext
{
	1 : required Coding code,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional CodeableConcept valueCodeableConcept,
	5 : optional Quantity valueQuantity,
	6 : optional Range valueRange,
}

struct ValueSet_Concept
{
	1 : required code _code,
	2 : optional list<ValueSet_Designation> designation,
	3 : optional string display,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
}

struct ValueSet_Contains
{
	1 : optional bool _abstract,
	2 : optional code _code,
	3 : optional list<binary> contains,
	4 : optional list<ValueSet_Designation> designation,
	5 : optional string display,
	6 : optional list<binary> extension,
	7 : optional string id,
	8 : optional bool inactive,
	9 : optional list<binary> modifierExtension,
	10 : optional uri system,
	11 : optional string version,
}

struct ValueSet_Expansion
{
	1 : optional list<ValueSet_Contains> contains,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : required uri identifier,
	5 : optional list<binary> modifierExtension,
	6 : optional i64 offset,
	7 : optional list<ValueSet_Parameter> parameter,
	8 : required i64 timestamp,
	9 : optional i64 total,
}

struct ValueSet_Include
{
	1 : optional list<ValueSet_Concept> concept,
	2 : optional list<binary> extension,
	3 : optional list<ValueSet_Filter> filter,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional uri system,
	7 : optional list<uri> valueSet,
	8 : optional string version,
}

struct tableType
{
	1 : optional i64 border,
	2 : optional captionType caption,
	3 : optional string cellpadding,
	4 : optional string cellspacing,
	5 : optional list_string_ _class,
	6 : optional list<colType> col,
	7 : optional list<colgroupType> colgroup,
	8 : optional dirType dir,
	9 : optional TFrame frame,
	10 : optional string id,
	11 : optional string lang,
	12 : optional TRules rules,
	13 : optional string style,
	14 : optional string summary,
	15 : optional list<tbodyType> tbody,
	16 : optional tfootType tfoot,
	17 : optional theadType thead,
	18 : optional string title,
	19 : optional list<trType> tr,
	20 : optional string width,
}

struct ActivityDefinition_Participant
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional CodeableConcept role,
	5 : required ActionParticipantType type,
}

struct CapabilityStatement_Security
{
	1 : optional list<CapabilityStatement_Certificate> certificate,
	2 : optional bool cors,
	3 : optional string description,
	4 : optional list<binary> extension,
	5 : optional string id,
	6 : optional list<binary> modifierExtension,
	7 : optional list<CodeableConcept> _service,
}

struct ClaimResponse_Adjudication
{
	1 : optional Money amount,
	2 : required CodeableConcept category,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional CodeableConcept reason,
	7 : optional double value,
}

struct ClaimResponse_Detail1
{
	1 : optional list<ClaimResponse_Adjudication> adjudication,
	2 : optional CodeableConcept category,
	3 : optional list<binary> extension,
	4 : optional Money fee,
	5 : optional string id,
	6 : optional list<CodeableConcept> modifier,
	7 : optional list<binary> modifierExtension,
	8 : optional list<positiveInt> noteNumber,
	9 : optional CodeableConcept revenue,
	10 : optional CodeableConcept _service,
}

struct ClaimResponse_Error
{
	1 : required CodeableConcept code,
	2 : optional positiveInt detailSequenceLinkId,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional positiveInt sequenceLinkId,
	7 : optional positiveInt subdetailSequenceLinkId,
}

struct ClaimResponse_ProcessNote
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional CodeableConcept language,
	4 : optional list<binary> modifierExtension,
	5 : optional positiveInt number,
	6 : optional string text,
	7 : optional CodeableConcept type,
}

struct ClaimResponse_SubDetail
{
	1 : optional list<ClaimResponse_Adjudication> adjudication,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional list<positiveInt> noteNumber,
	6 : required positiveInt sequenceLinkId,
}

struct CodeSystem_Concept
{
	1 : required code _code,
	2 : optional list<binary> concept,
	3 : optional string definition,
	4 : optional list<CodeSystem_Designation> designation,
	5 : optional string display,
	6 : optional list<binary> extension,
	7 : optional string id,
	8 : optional list<binary> modifierExtension,
	9 : optional list<CodeSystem_Property1> property,
}

struct Dosage
{
	1 : optional list<CodeableConcept> additionalInstruction,
	2 : optional bool asNeededBoolean,
	3 : optional CodeableConcept asNeededCodeableConcept,
	4 : optional Quantity doseQuantity,
	5 : optional Range doseRange,
	6 : optional list<binary> extension,
	7 : optional string id,
	8 : optional Quantity maxDosePerAdministration,
	9 : optional Quantity maxDosePerLifetime,
	10 : optional Ratio maxDosePerPeriod,
	11 : optional CodeableConcept method,
	12 : optional string patientInstruction,
	13 : optional Quantity rateQuantity,
	14 : optional Range rateRange,
	15 : optional Ratio rateRatio,
	16 : optional CodeableConcept route,
	17 : optional i64 sequence,
	18 : optional CodeableConcept site,
	19 : optional string text,
	20 : optional Timing timing,
}

struct EligibilityResponse_BenefitBalance
{
	1 : required CodeableConcept category,
	2 : optional string description,
	3 : optional bool excluded,
	4 : optional list<binary> extension,
	5 : optional list<EligibilityResponse_Financial> financial,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
	8 : optional string name,
	9 : optional CodeableConcept network,
	10 : optional CodeableConcept subCategory,
	11 : optional CodeableConcept term,
	12 : optional CodeableConcept unit,
}

struct ExplanationOfBenefit_AddItem
{
	1 : optional list<ExplanationOfBenefit_Adjudication> adjudication,
	2 : optional CodeableConcept category,
	3 : optional list<ExplanationOfBenefit_Detail1> detail,
	4 : optional list<binary> extension,
	5 : optional Money fee,
	6 : optional string id,
	7 : optional list<CodeableConcept> modifier,
	8 : optional list<binary> modifierExtension,
	9 : optional list<positiveInt> noteNumber,
	10 : optional CodeableConcept revenue,
	11 : optional list<positiveInt> sequenceLinkId,
	12 : optional CodeableConcept _service,
}

struct ExplanationOfBenefit_BenefitBalance
{
	1 : required CodeableConcept category,
	2 : optional string description,
	3 : optional bool excluded,
	4 : optional list<binary> extension,
	5 : optional list<ExplanationOfBenefit_Financial> financial,
	6 : optional string id,
	7 : optional list<binary> modifierExtension,
	8 : optional string name,
	9 : optional CodeableConcept network,
	10 : optional CodeableConcept subCategory,
	11 : optional CodeableConcept term,
	12 : optional CodeableConcept unit,
}

struct NutritionOrder_Administration
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional list<binary> modifierExtension,
	4 : optional Quantity quantity,
	5 : optional Quantity rateQuantity,
	6 : optional Ratio rateRatio,
	7 : optional Timing schedule,
}

struct NutritionOrder_EnteralFormula
{
	1 : optional string additiveProductName,
	2 : optional CodeableConcept additiveType,
	3 : optional list<NutritionOrder_Administration> administration,
	4 : optional string administrationInstruction,
	5 : optional string baseFormulaProductName,
	6 : optional CodeableConcept baseFormulaType,
	7 : optional Quantity caloricDensity,
	8 : optional list<binary> extension,
	9 : optional string id,
	10 : optional Quantity maxVolumeToDeliver,
	11 : optional list<binary> modifierExtension,
	12 : optional CodeableConcept routeofAdministration,
}

struct NutritionOrder_OralDiet
{
	1 : optional list<binary> extension,
	2 : optional list<CodeableConcept> fluidConsistencyType,
	3 : optional string id,
	4 : optional string instruction,
	5 : optional list<binary> modifierExtension,
	6 : optional list<NutritionOrder_Nutrient> nutrient,
	7 : optional list<Timing> schedule,
	8 : optional list<NutritionOrder_Texture> texture,
	9 : optional list<CodeableConcept> type,
}

struct NutritionOrder_Supplement
{
	1 : optional list<binary> extension,
	2 : optional string id,
	3 : optional string instruction,
	4 : optional list<binary> modifierExtension,
	5 : optional string productName,
	6 : optional Quantity quantity,
	7 : optional list<Timing> schedule,
	8 : optional CodeableConcept type,
}

struct Observation_Component
{
	1 : required CodeableConcept code,
	2 : optional CodeableConcept dataAbsentReason,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional CodeableConcept interpretation,
	6 : optional list<binary> modifierExtension,
	7 : optional list<Observation_ReferenceRange> referenceRange,
	8 : optional Attachment valueAttachment,
	9 : optional CodeableConcept valueCodeableConcept,
	10 : optional i64 valueDateTime,
	11 : optional Period valuePeriod,
	12 : optional Quantity valueQuantity,
	13 : optional Range valueRange,
	14 : optional Ratio valueRatio,
	15 : optional SampledData valueSampledData,
	16 : optional string valueString,
	17 : optional time valueTime,
}

struct TestScript_Action
{
	1 : optional TestScript_Assert assert,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional TestScript_Operation operation,
}

struct TestScript_Action1
{
	1 : optional TestScript_Assert assert,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional TestScript_Operation operation,
}

struct TestScript_Setup
{
	1 : required list<TestScript_Action> action,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
}

struct TestScript_Test
{
	1 : required list<TestScript_Action1> action,
	2 : optional string description,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional string name,
}

struct ValueSet_Compose
{
	1 : optional list<ValueSet_Include> exclude,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional bool inactive,
	5 : required list<ValueSet_Include> include,
	6 : optional i32 lockedDate,
	7 : optional list<binary> modifierExtension,
}

struct ClaimResponse_AddItem
{
	1 : optional list<ClaimResponse_Adjudication> adjudication,
	2 : optional CodeableConcept category,
	3 : optional list<ClaimResponse_Detail1> detail,
	4 : optional list<binary> extension,
	5 : optional Money fee,
	6 : optional string id,
	7 : optional list<CodeableConcept> modifier,
	8 : optional list<binary> modifierExtension,
	9 : optional list<positiveInt> noteNumber,
	10 : optional CodeableConcept revenue,
	11 : optional list<positiveInt> sequenceLinkId,
	12 : optional CodeableConcept _service,
}

struct ClaimResponse_Detail
{
	1 : optional list<ClaimResponse_Adjudication> adjudication,
	2 : optional list<binary> extension,
	3 : optional string id,
	4 : optional list<binary> modifierExtension,
	5 : optional list<positiveInt> noteNumber,
	6 : required positiveInt sequenceLinkId,
	7 : optional list<ClaimResponse_SubDetail> subDetail,
}

struct ClaimResponse_Item
{
	1 : optional list<ClaimResponse_Adjudication> adjudication,
	2 : optional list<ClaimResponse_Detail> detail,
	3 : optional list<binary> extension,
	4 : optional string id,
	5 : optional list<binary> modifierExtension,
	6 : optional list<positiveInt> noteNumber,
	7 : required positiveInt sequenceLinkId,
}

